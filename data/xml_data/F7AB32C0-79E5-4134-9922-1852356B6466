<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations/><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/D1774113-D5D2-4B7C-A412-66A90FE4B96F"><gtr:id>D1774113-D5D2-4B7C-A412-66A90FE4B96F</gtr:id><gtr:name>University of Cambridge</gtr:name><gtr:department>Computer Laboratory</gtr:department><gtr:address><gtr:line1>Lensfield Road</gtr:line1><gtr:line4>Cambridge</gtr:line4><gtr:postCode>CB2 1EW</gtr:postCode><gtr:region>East of England</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/D1774113-D5D2-4B7C-A412-66A90FE4B96F"><gtr:id>D1774113-D5D2-4B7C-A412-66A90FE4B96F</gtr:id><gtr:name>University of Cambridge</gtr:name><gtr:address><gtr:line1>Lensfield Road</gtr:line1><gtr:line4>Cambridge</gtr:line4><gtr:postCode>CB2 1EW</gtr:postCode><gtr:region>East of England</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/A1FA5E2C-705B-4A74-9596-1A1CAC2A8375"><gtr:id>A1FA5E2C-705B-4A74-9596-1A1CAC2A8375</gtr:id><gtr:name>IBM</gtr:name><gtr:address><gtr:line1>IBM Corporation</gtr:line1><gtr:line2>1 New Orchard Road</gtr:line2><gtr:line4>Armonk</gtr:line4><gtr:line5>NY 10504-1722</gtr:line5><gtr:region>Outside UK</gtr:region><gtr:country>United States</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/98BF5121-C99E-4246-971D-E7C4C3783EB4"><gtr:id>98BF5121-C99E-4246-971D-E7C4C3783EB4</gtr:id><gtr:name>University of Texas at Austin</gtr:name><gtr:address><gtr:line1>One University Station</gtr:line1><gtr:postCode>78712</gtr:postCode><gtr:region>Outside UK</gtr:region><gtr:country>United States</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/1850C875-CBFE-4487-AD7B-A5EA05A06BA3"><gtr:id>1850C875-CBFE-4487-AD7B-A5EA05A06BA3</gtr:id><gtr:name>ARM Ltd</gtr:name><gtr:address><gtr:line1>Central Building</gtr:line1><gtr:line2>110 Fulbourn Road</gtr:line2><gtr:line4>Cambridge</gtr:line4><gtr:postCode>CB1 9NJ</gtr:postCode><gtr:region>East of England</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/C78926DB-8710-402A-B3BA-9AA387D7996B"><gtr:id>C78926DB-8710-402A-B3BA-9AA387D7996B</gtr:id><gtr:firstName>Susmit</gtr:firstName><gtr:surname>Sarkar</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FH027351%2F1"><gtr:id>F7AB32C0-79E5-4134-9922-1852356B6466</gtr:id><gtr:title>Multiprocessors: From Microarchitecture to Semantic Theory</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Fellowship</gtr:grantCategory><gtr:grantReference>EP/H027351/1</gtr:grantReference><gtr:abstractText>Modern computers have become predominantly multicore, providing programmers with many simultaneously-executing threads of execution sharing the system memory. Concurrent programming is challenging, and this trend in hardware should have been an ideal application target for previous academic work on software verification. Concurrent programming has been extensively studied, with the development of areas such as model checking, process calculi, separation logic, and rely-guarantee reasoning. Unfortunately, realistic architectures violate a key assumption of most such work, that all threads have a consistent view of memory, an assumption often referred to as Sequential Consistency. Instead, programmers are actually faced with a Relaxed Memory Model , with only approximate consistency, making programming and verification significantly more challenging.Relaxed memory models arise, ultimately, from hardware (and compiler) implementation features designed for performance. Unfortunately, there is no clear understanding of how the microarchitectural choices made in hardware implementations lead to programmer-observable consequences. This is an instance of a more general problem, that modern hardware is too complex to understand without formal proofs, as witnessed by a succession of errata in deployed processors. Hardware verification is itself a field that has received a great deal of study. However, the field has still not reached the point of verifying global semantic properties, such as relaxed memory models, that emerge from the interaction of multiple disparate subsystems, each of which suffers from imprecise specifications.I propose to create a general theory of the programmer-observable behaviour which emerges from the microarchitectural choices and optimizations made in multiprocessor implementations. I will develop abstract mathematical models of the implementations, and explain with proof the observable consequences of those implementations. With specifications derived from that theory, I will go on to study the hardware verification problem, establishing techniques and methods for verifying global programmer-visible properties. Throughout, I will address not just safety properties, but also progress and liveness properties that sophisticated programmers rely on.Such a general theory is critical for a better understanding of multiprocessor semantics, by both programmers and hardware implementers, and for enabling these different communities to communicate their knowledge to each other. It is also an essential prerequisite for sound theories of concurrent programming. An improved understanding and communication of these issues is imperative for reliable multiprocessor usage.</gtr:abstractText><gtr:potentialImpactText>The beneficiaries of this research in the larger world include practitioners of concurrent programming, and of computer architecture, and of the verification of both, within both academia and industry. This will in the medium term benefit the users of shared memory multiprocessors, who will find their systems becoming more reliable. Such users constitute a huge and still growing section of the general public, since desktops, mobile devices, and servers are steadily becoming multiprocessor. As an indicative point for the time required for benefits to become available to the general public, hardware designs take on the order of five years to become publicly available. The academic beneficiaries are listed in a separate section, and I note that there already exists very strong links between the academic and industrial community in each of these fields, leading to an easy exchange of knowledge within each field. I note some additional points relevant to industrial practitioners here. Modern hardware architectures are extremely complex, and also extremely difficult to change if found not to be correct. The major processor vendors, including Intel, AMD, IBM, and ARM, have already deployed a huge number of multiprocessors, in high-performance systems, in commodity consumer computers, and in the embedded market, with even mobile phones starting to become multiprocessor. This trend will intensify as low-power and high-performance devices enjoy greater demand, and it becomes critical to remove bugs and inconsistencies at an early stage, and give precise guarantees about multiprocessors to the programmers that develop systems above them. Mistakes can be very expensive, in terms of both money and reputation. Key improvements can be made by using mathematical theory at early stages of the design process, for example, by helping cache-protocol designers understand the consequences of the choices they make on programmer-observable behaviour. I will engage with the hardware-design community, particularly with my project partners in IBM, as also the large expert community in the Austin industrial area. I also have a nascent relationships with ARM in Cambridge, which I hope to build upon. The real-world expertise and experience provided by my industrial contacts will complement my expertise in semantics and mechanized mathematics. The proposed work will provide methods and techniques of verification, and example formal proofs of concrete implementations as case studies. I will make these publicly available in the scientific literature, and via the web.</gtr:potentialImpactText><gtr:fund><gtr:end>2013-07-15</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2010-06-10</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>269820</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs/><gtr:disseminationOutputs/><gtr:exploitationOutputs/><gtr:furtherFundingOutputs><gtr:furtherFundingOutput><gtr:amountPounds>668897</gtr:amountPounds><gtr:country>United Kingdom of Great Britain &amp; Northern Ireland (UK)</gtr:country><gtr:currCode>GBP</gtr:currCode><gtr:currCountryCode>United Kingdom</gtr:currCountryCode><gtr:currLang>en_GB</gtr:currLang><gtr:description>C3: Scalable &amp;amp; Verified Shared Memory via Consistency-directed Cache Coherence</gtr:description><gtr:end>2018-10-02</gtr:end><gtr:fundingOrg>Engineering and Physical Sciences Research Council (EPSRC)</gtr:fundingOrg><gtr:fundingRef>EP/M027317/1</gtr:fundingRef><gtr:id>24578C18-04FD-4506-AC09-33B6A05048B2</gtr:id><gtr:outcomeId>56d9ab08e22b49.82095531</gtr:outcomeId><gtr:sector>Academic/University</gtr:sector><gtr:start>2015-11-01</gtr:start></gtr:furtherFundingOutput><gtr:furtherFundingOutput><gtr:amountPounds>20000</gtr:amountPounds><gtr:country>United Kingdom of Great Britain &amp; Northern Ireland (UK)</gtr:country><gtr:currCode>GBP</gtr:currCode><gtr:currCountryCode>United Kingdom</gtr:currCountryCode><gtr:currLang>en_GB</gtr:currLang><gtr:description>SICSA Early Career Industrial Fellowship</gtr:description><gtr:end>2016-04-02</gtr:end><gtr:fundingOrg>SICSA Scottish Informatics and Computer Science Alliance</gtr:fundingOrg><gtr:id>85843E38-8842-4CAB-83C8-C38C10283FB5</gtr:id><gtr:outcomeId>5460ba9c98b9c6.58199657</gtr:outcomeId><gtr:sector>Academic/University</gtr:sector><gtr:start>2014-04-01</gtr:start></gtr:furtherFundingOutput></gtr:furtherFundingOutputs><gtr:impactSummaryOutputs><gtr:impactSummaryOutput><gtr:description>Material has fed into the development of new ISO C/C++ concurrency standards (C11/C++11/C++14).

Findings have been used internally in industrial organisations to make precise the &amp;quot;relaxed concurrency model&amp;quot; of hardware processors; and of new &amp;quot;transactional memory&amp;quot; extensions of IBM Power8 and ARMv8 architectures

Developed tools (PPCMEM/CPPMEM/ARMMEM) have been used by compiler developers and OS developers within the open-source community (GCC,CLang, Linux)</gtr:description><gtr:firstYearOfImpact>2012</gtr:firstYearOfImpact><gtr:id>4136622D-49A2-41EB-882D-CAE34BF410A0</gtr:id><gtr:impactTypes><gtr:impactType>Economic</gtr:impactType></gtr:impactTypes><gtr:outcomeId>56d9aa1461de70.96864050</gtr:outcomeId><gtr:sector>Digital/Communication/Information Technologies (including Software)</gtr:sector></gtr:impactSummaryOutput></gtr:impactSummaryOutputs><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>Precise description of the programmer model on IBM POWER and ARM Multiprocessors, important for correct programming; 

Precise description of concurrent programming on C and C++ (ISO C11/C++11); 

Correctness techniques for compiling concurrent code from C/C++ to hardware; 

Ways of hardware design to take advantage of programmer-oriented models</gtr:description><gtr:exploitationPathways>The Linux Weekly News article targeted kernel programmers, who are beginning to use the ppcmem and cppmem tool to understand hardware behaviours;

Architects in IBM and ARM informally discuss future architecture behaviour parameters (eg IBM's transaction extensions, under a CDA, now lifted);
 Academic papers detailing techniques and proofs;

Contributed to ISO C and C++ standards (C11 and C++11), making the standards more robust and reliable;

Released web-based tools to explore subtle memory model behaviour (ppcmem tool was featured in a Linux Weekly News article targeting kernel programmers);

Gave an invited tutorial at POPL'13, a premier programming language conference</gtr:exploitationPathways><gtr:id>69B40165-5A85-4751-B90B-BA52FE7E2724</gtr:id><gtr:outcomeId>r-3250349567.5049253777403d0</gtr:outcomeId><gtr:sectors><gtr:sector>Digital/Communication/Information Technologies (including Software)</gtr:sector></gtr:sectors></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs/><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>BC44E146-AD0E-4A22-8321-D57DDCB1C0E1</gtr:id><gtr:title>Fences in weak memory models (extended version)</gtr:title><gtr:parentPublicationTitle>Formal Methods in System Design</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/ea74d38041eb38981c3c69c1d5ce0723"><gtr:id>ea74d38041eb38981c3c69c1d5ce0723</gtr:id><gtr:otherNames>Alglave J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2012-01-01</gtr:date><gtr:outcomeId>doi_53cfdbfdb30bbb45</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>CD4E81F8-9009-4AF5-9703-68491941D2D3</gtr:id><gtr:title>Understanding POWER multiprocessors</gtr:title><gtr:parentPublicationTitle>ACM SIGPLAN Notices</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/caf3d032b5e39560b0be5e4330259686"><gtr:id>caf3d032b5e39560b0be5e4330259686</gtr:id><gtr:otherNames>Sarkar S</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2011-01-01</gtr:date><gtr:outcomeId>doi_53d074074fa5fa5c</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>44507645-F17E-40F7-9AB5-D1C90DE544AF</gtr:id><gtr:title>Fence Placement for Legacy Data-Race-Free Programs via Synchronization Read Detection</gtr:title><gtr:parentPublicationTitle>ACM Transactions on Architecture and Code Optimization</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/b6df7e22ff794d71176e34379499a743"><gtr:id>b6df7e22ff794d71176e34379499a743</gtr:id><gtr:otherNames>Mcpherson A</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2015-01-01</gtr:date><gtr:outcomeId>56d9abdc8e07c1.51065307</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>8634AF74-F7E6-405E-95AD-87E448407329</gtr:id><gtr:title>Fast RMWs for TSO: Semantics and Implementation</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/8cc6f92725df601fd60e81245e9f3a05"><gtr:id>8cc6f92725df601fd60e81245e9f3a05</gtr:id><gtr:otherNames>Bhargava Rajaram (Author)</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2013-01-01</gtr:date><gtr:outcomeId>m_744551191413d99294</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>2F155B59-E768-4BA0-889C-1EB300F8D541</gtr:id><gtr:title>Automatically deriving cost models for structured parallel processes using hylomorphisms</gtr:title><gtr:parentPublicationTitle>Future Generation Computer Systems</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/8cd09c69ec9d07e98148ee4bc6bdd56e"><gtr:id>8cd09c69ec9d07e98148ee4bc6bdd56e</gtr:id><gtr:otherNames>Castro D</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2018-01-01</gtr:date><gtr:outcomeId>5aa1ada23530b2.91066370</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>09CC7C9C-C247-4B9F-A196-451C8DD3CDDA</gtr:id><gtr:title>Simplifying ARM concurrency: multicopy-atomic axiomatic and operational models for ARMv8</gtr:title><gtr:parentPublicationTitle>Proceedings of the ACM on Programming Languages</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/c35e41dbf769b0271214da56e5a8a1ed"><gtr:id>c35e41dbf769b0271214da56e5a8a1ed</gtr:id><gtr:otherNames>Pulte C</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2017-01-01</gtr:date><gtr:outcomeId>5aa1afbc3e76c5.64599311</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>9A3ECA3C-EAAF-4C2B-ADF4-B8D66C3A6153</gtr:id><gtr:title>Mathematizing C++ concurrency</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/555e4a0beedee841e3b4e4b9b66d83ec"><gtr:id>555e4a0beedee841e3b4e4b9b66d83ec</gtr:id><gtr:otherNames>Mark Batty (Co-author)</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2011-01-01</gtr:date><gtr:outcomeId>m_658851325613efb18c</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/H027351/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>