<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations><gtr:collaborator url="http://gtr.ukri.org:80/organisation/AFE5C6FD-3500-44F6-B100-184B5F2FD0D7"><gtr:id>AFE5C6FD-3500-44F6-B100-184B5F2FD0D7</gtr:id><gtr:name>Microsoft Research</gtr:name><gtr:address><gtr:line1>One Microsoft Way</gtr:line1><gtr:line4>Redmond</gtr:line4><gtr:line5>Washington 98052</gtr:line5><gtr:region>Outside UK</gtr:region><gtr:country>United States</gtr:country></gtr:address></gtr:collaborator><gtr:collaborator url="http://gtr.ukri.org:80/organisation/2DBC66F8-451F-4411-9BF8-5B7978CF1C03"><gtr:id>2DBC66F8-451F-4411-9BF8-5B7978CF1C03</gtr:id><gtr:name>Maynooth University</gtr:name></gtr:collaborator><gtr:collaborator url="http://gtr.ukri.org:80/organisation/553F14BF-CA70-407C-B718-F0C91FF37FC8"><gtr:id>553F14BF-CA70-407C-B718-F0C91FF37FC8</gtr:id><gtr:name>Altran</gtr:name></gtr:collaborator></gtr:collaborations><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/E5A82D2C-5AD4-488A-ACFF-566345A5D6DA"><gtr:id>E5A82D2C-5AD4-488A-ACFF-566345A5D6DA</gtr:id><gtr:name>Heriot-Watt University</gtr:name><gtr:department>S of Mathematical and Computer Sciences</gtr:department><gtr:address><gtr:line1>Administration Building</gtr:line1><gtr:line2>Riccarton</gtr:line2><gtr:line3>Ricarton</gtr:line3><gtr:line4>Currie</gtr:line4><gtr:postCode>EH14 4AS</gtr:postCode><gtr:region>Scotland</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/E5A82D2C-5AD4-488A-ACFF-566345A5D6DA"><gtr:id>E5A82D2C-5AD4-488A-ACFF-566345A5D6DA</gtr:id><gtr:name>Heriot-Watt University</gtr:name><gtr:address><gtr:line1>Administration Building</gtr:line1><gtr:line2>Riccarton</gtr:line2><gtr:line3>Ricarton</gtr:line3><gtr:line4>Currie</gtr:line4><gtr:postCode>EH14 4AS</gtr:postCode><gtr:region>Scotland</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/AFE5C6FD-3500-44F6-B100-184B5F2FD0D7"><gtr:id>AFE5C6FD-3500-44F6-B100-184B5F2FD0D7</gtr:id><gtr:name>Microsoft Research</gtr:name><gtr:address><gtr:line1>One Microsoft Way</gtr:line1><gtr:line4>Redmond</gtr:line4><gtr:line5>Washington 98052</gtr:line5><gtr:region>Outside UK</gtr:region><gtr:country>United States</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role><gtr:role><gtr:name>COLLABORATOR</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/2DBC66F8-451F-4411-9BF8-5B7978CF1C03"><gtr:id>2DBC66F8-451F-4411-9BF8-5B7978CF1C03</gtr:id><gtr:name>Maynooth University</gtr:name><gtr:roles><gtr:role><gtr:name>COLLABORATOR</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/553F14BF-CA70-407C-B718-F0C91FF37FC8"><gtr:id>553F14BF-CA70-407C-B718-F0C91FF37FC8</gtr:id><gtr:name>Altran</gtr:name><gtr:roles><gtr:role><gtr:name>COLLABORATOR</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/13CFE7DC-3F2A-45B0-898F-C22A970A79A3"><gtr:id>13CFE7DC-3F2A-45B0-898F-C22A970A79A3</gtr:id><gtr:name>Altran UK Ltd</gtr:name><gtr:address><gtr:line1>22 St Lawrence St</gtr:line1><gtr:line2>Southgate</gtr:line2><gtr:line4>Bath</gtr:line4><gtr:postCode>BA1 1AN</gtr:postCode><gtr:region>South West</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/01C61C8F-7AEA-4E4E-AA2F-4E09475A1DB8"><gtr:id>01C61C8F-7AEA-4E4E-AA2F-4E09475A1DB8</gtr:id><gtr:name>National University of Ireland Maynooth</gtr:name><gtr:address><gtr:line1>National University of Ireland Maynooth</gtr:line1><gtr:line3>Maynooth</gtr:line3><gtr:line4>Kildare</gtr:line4><gtr:region>Outside UK</gtr:region><gtr:country>Ireland</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/AF5505A8-6252-46AC-8ECA-774CB35D53FD"><gtr:id>AF5505A8-6252-46AC-8ECA-774CB35D53FD</gtr:id><gtr:name>Escher Technologies Ltd.</gtr:name><gtr:address><gtr:line1>Mallard House</gtr:line1><gtr:line2>Hillside Road</gtr:line2><gtr:line3>Ash Vale</gtr:line3><gtr:postCode>GU12 5BJ</gtr:postCode><gtr:region>South East</gtr:region></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/B88463B3-0B31-40E1-A2D3-AEE4231BD73F"><gtr:id>B88463B3-0B31-40E1-A2D3-AEE4231BD73F</gtr:id><gtr:firstName>Gudmund</gtr:firstName><gtr:surname>Grov</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole><gtr:personRole url="http://gtr.ukri.org:80/person/28D87AC7-6900-416B-A602-EFBD16F48661"><gtr:id>28D87AC7-6900-416B-A602-EFBD16F48661</gtr:id><gtr:firstName>Iain</gtr:firstName><gtr:surname>Whiteside</gtr:surname><gtr:roles><gtr:role><gtr:name>RESEARCHER</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FM018407%2F1"><gtr:id>7D2C4E49-7C12-4058-B561-D96A8B867A32</gtr:id><gtr:title>DTacs - Program Verifier Tactics : Reducing the Development Time for Program Verifiers with re-usable Verification Strategies</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Research Grant</gtr:grantCategory><gtr:grantReference>EP/M018407/1</gtr:grantReference><gtr:abstractText>Software is woven into just about everything digital that we touch or depend upon: from communications, entertainment and consumer electronics - to railway, air-control, automotive, finance, defence, national infrastructure and health-care systems. The dependability of such software remains a major challenge. In 2002 it was estimated that software mistakes cost the US economy $59 Billion; more recent estimates have suggested an annual cost of more than $300 Billion worldwide. Dependability is therefore a key differentiator in commercial products. Whoever can cost-effectively crack the dependability challenge will have a major advantage.

Conventional techniques used to ensure dependability are based around testing; and this can amount to half of the development time. Still, a fundamental problem of testing is that all combinations of inputs and conditions are not feasible. Formal approaches to software engineering use mathematics to ensure dependability. These have the advantage over conventional testing techniques that the software can be proven correct for all combinations of inputs and conditions. This is a result of using mathematics, and increases both the dependability and product quality. However, common bottlenecks of these approaches are limited availability of theorem proving skills and lack of automation provided by tools. Therefore they have often suffered from increased development time and costs when applied beyond niche markets such as safety and mission critical systems.

Program verification is a formal software engineering technique where the source code is combined with a formal specification of desired behaviour. Mathematics is used to prove that the program satisfies its specification. Recently, there has been a wave of new program verifiers, where the underlying mathematics is hidden. Skills familiar to programmers are used to guide the proof in the program text rather than theorem proving skills; removing the &amp;quot;skill-barrier&amp;quot; associated with theorem provers and creating a more accessible discipline for a software engineer. Still, an open challenge is to reduce the amount of guidance that is required to complete the verification of a program - a challenge that has to be solved before program verification becomes a viable cost-effective mainstream software engineering discipline. 

This proposal addresses the automation challenge by enabling software engineers to encode patterns used to guide proofs directly in the program text as special programs. As a result, low-level and repetitive details, often resulting from a trial-and-error process, can be replaced by a higher-level underlying pattern. These can be re-used for similar tasks, liberating users from low-level and repetitive search tasks. As a pattern only needs to be developed once, less guidance will be needed - increasing automation and reducing development time and cost.

The language used to write programs and guide proofs within a program verifier will be extended to enable software engineers to also encode their verification patterns. The extension should be as minimal as possible, to avoid reducing accessibility with new skill-barriers that have to be overcome. The development of such language requires a new understanding of how users guide program verifiers. We will focus on the Dafny program verifier; re-engineering the development process used in a selection of the available Dafny case studies; and developing and verifying new programs from scratch. In both cases, each step of the verification process will be captured, creating a catalogue of verification patterns. 

Based on this catalogue the language used within Dafny will be extended with a new special method called a `DTac' (Dafny Tactic). A verification pattern will be encoded as a DTac. Automation will be achieved by developing a new tool called Tacny that can read DTacs and apply them to other Dafny programs to automate the verification.</gtr:abstractText><gtr:potentialImpactText>There are a large number of examples illustrating the cost of software failures - human, financial and reputational. Recent examples include Toyota, which had to recall 3.8 Million cars due to a defect in the electronic throttle-control system in 2009/10; and a bug in the software of the Moody credit rating agency, incorrectly awarding top ratings worth $4 Billion at the beginning of the recent recession. The crash of Air France flight 447 in the Atlantic Ocean in 2009, killing 228 people, can also be attributed to software, or at least a misunderstanding of software behaviour. These examples clearly illustrate the need for dependable software. 

Formal approaches to software engineering improve dependability by using mathematics to prove correctness for all combinations of inputs and conditions. This is unfeasible for traditional test-based techniques. Formal approaches have been shown to improve the product quality; it has also been shown to be more cost-effective than methods based upon testing for safety/mission critical systems; and to combat Cyber Security threats to the UK - considered as `Tier 1' by the UK National Security Strategy. However, a significant amount of user guidance is often required for the verification, and such skills are at a premium. Whoever can reduce the amount of guidance, and cost-effectively crack the dependability challenge, will therefore have a major advantage.

The type of program verifiers addressed in this proposal has reduced the skills required by hiding much of the underlying mathematics. The proofs are instead guided in the program text, using techniques more familiar to a software engineer. Toyota is now considering using such techniques following the bug in their electronic throttle system. 

While automation has improved in such techniques, further reduction will be required to have real impact as a cost-effective mainstream software engineering discipline.

This proposal addresses the automation challenge by enabling users of the Dafny program verifiers to encode verification patterns that can be re-used for similar verification tasks. A prototype tool called Tacny will be developed for Dafny. Tacny will be able to apply user-provided verification patterns to unverified programs in order to automate the verification. Dafny users will therefore directly benefit from this work by using this tool to reduce the required user-interaction. Tacny will be freely available for anyone to try out.

The main scientific impact of this proposal will be improved automation by reducing this interaction. A language where a user can capture the underlying patterns of a proof will be developed. A novelty of this language is that constructs familiar to software engineers should be used to write the patterns. This will have a profound effect on the potential update of this technology, as the additional knowledge required is incremental, and the language used will be known. 

By re-applying a pattern to a verification task, more automation can be achieved without requiring interaction and exposition of underlying proof details. This could take program verification techniques one step closer as a solution to the dependability challenge. Companies already using program verification technology may have a direct advantage by embedding the techniques we develop to reduce their development time.
Safer, more dependable and more secure software can then also be developed faster, which may help in attracting new companies to adopt program verification technology, and further combating the Cyber Security threats.</gtr:potentialImpactText><gtr:fund><gtr:end>2016-11-30</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2015-06-01</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>100186</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs><gtr:collaborationOutput><gtr:collaboratingOrganisation>Altran</gtr:collaboratingOrganisation><gtr:country>United Kingdom of Great Britain &amp; Northern Ireland (UK)</gtr:country><gtr:description>Altran UK</gtr:description><gtr:id>8A9EC63A-1488-4ACD-9C5A-A1EF6D6DDA11</gtr:id><gtr:impact>So far we have discussed ideas and future collaborations.</gtr:impact><gtr:outcomeId>56d5a1a4bb92e9.59605239-1</gtr:outcomeId><gtr:partnerContribution>Discussion of ideas and research directions.</gtr:partnerContribution><gtr:piContribution>Discussion of how to adapt the ideas of this project into their SPARK tool.</gtr:piContribution><gtr:sector>Private</gtr:sector><gtr:start>2015-01-01</gtr:start></gtr:collaborationOutput><gtr:collaborationOutput><gtr:collaboratingOrganisation>Maynooth University</gtr:collaboratingOrganisation><gtr:country>Ireland, Republic of</gtr:country><gtr:description>Maynooth</gtr:description><gtr:id>9BDDC576-78B6-4532-B4C6-7A356111B5A5</gtr:id><gtr:impact>So far discussion of ideas.</gtr:impact><gtr:outcomeId>56d5a24f6a5668.82935759-1</gtr:outcomeId><gtr:partnerContribution>Feedback on work done so-far and discussion of ideas.</gtr:partnerContribution><gtr:piContribution>Visit to their campus; presentation of the project and discussion of ideas and future collaborations.</gtr:piContribution><gtr:sector>Academic/University</gtr:sector><gtr:start>2015-01-01</gtr:start></gtr:collaborationOutput><gtr:collaborationOutput><gtr:collaboratingOrganisation>Microsoft Research</gtr:collaboratingOrganisation><gtr:country>Global</gtr:country><gtr:description>MS Research</gtr:description><gtr:id>E32FC91D-0A76-4A91-9B7D-8DE744E03980</gtr:id><gtr:impact>Development of tactics and exchange of ideas. A visit to their research lab for the PI has been conducted.</gtr:impact><gtr:outcomeId>56d5a10176fcf5.35869408-1</gtr:outcomeId><gtr:partnerContribution>They are supporting us in developing tactics and in incorporating our tools into their toolchain</gtr:partnerContribution><gtr:piContribution>We are extending their programming language/verifier with tactic support</gtr:piContribution><gtr:sector>Private</gtr:sector><gtr:start>2015-01-01</gtr:start></gtr:collaborationOutput></gtr:collaborationOutputs><gtr:disseminationOutputs/><gtr:exploitationOutputs/><gtr:furtherFundingOutputs/><gtr:impactSummaryOutputs/><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>The goal of this grant was to improve automation for program verifiers, which are used to mathematically prove that a program satisfies its specification. Our hypothesis is that it is feasible to achieve automation by developing a language such that users can encode their generic proof patterns which can be reused. We call this extension a tactic language. So far we have shown feasibility by encoding some patterns and developed a prototype implementation to show that this is possible to implement as well. The project is finished however we are still working on integrating the tool with the Dafny program verifier.</gtr:description><gtr:exploitationPathways>We have developed a prototype tactic language for a particular program verifier called Dafny. Once fully integrated with Dafny, there is a lot of scope for both using and developing this further, as well as adapting the ideas to other program verifiers. We are now working on improved tool support so that it becomes easier for other users to use it.</gtr:exploitationPathways><gtr:id>B05C6F0D-075A-4ACA-880A-F9112C960B19</gtr:id><gtr:outcomeId>56d59c7a969d64.00365587</gtr:outcomeId><gtr:sectors><gtr:sector>Aerospace, Defence and Marine,Digital/Communication/Information Technologies (including Software),Education,Electronics,Financial Services, and Management Consultancy</gtr:sector></gtr:sectors><gtr:url>https://sites.google.com/site/tacnyproject/</gtr:url></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs><gtr:researchMaterialOutput><gtr:description>We have a prototype integration of the techniques developed with the Dafny program verifier. This implements the techniques described in the publications.</gtr:description><gtr:id>F1AD4ACB-41E6-4FF0-A0A9-AE051A1D246A</gtr:id><gtr:impact>The tool is still under development, so beyond the research we have conducted no further impact has been made.</gtr:impact><gtr:outcomeId>58c11b451fee39.50342132</gtr:outcomeId><gtr:providedToOthers>false</gtr:providedToOthers><gtr:title>Tacny</gtr:title><gtr:type>Improvements to research infrastructure</gtr:type><gtr:url>https://github.com/ggrov/dafny</gtr:url></gtr:researchMaterialOutput></gtr:researchMaterialOutputs><gtr:softwareAndTechnicalProductOutputs/><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>F729F6E4-6C66-4A7D-B9FF-58D67F072FE0</gtr:id><gtr:title>Extending the Dafny IDE with Tactics and Dead Annotation Analysis (tool demo)</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/170a82d9ca6053019c8c0e01152e6975"><gtr:id>170a82d9ca6053019c8c0e01152e6975</gtr:id><gtr:otherNames>Grov G.</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2017-01-01</gtr:date><gtr:issn>20752180</gtr:issn><gtr:outcomeId>58c11f330b2d77.87686916</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>670505AF-FC6B-471C-AFF2-C8FD1672080B</gtr:id><gtr:title>Tactics for the Dafny Program Verifier</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/170a82d9ca6053019c8c0e01152e6975"><gtr:id>170a82d9ca6053019c8c0e01152e6975</gtr:id><gtr:otherNames>Grov G.</gtr:otherNames></gtr:author></gtr:authors><gtr:issn>03029743</gtr:issn><gtr:outcomeId>56d59ed42e5145.57736755</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/M018407/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>25</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic><gtr:researchTopic><gtr:id>E05CFE0B-163D-412D-A3C2-28E89B2CA336</gtr:id><gtr:percentage>75</gtr:percentage><gtr:text>Software Engineering</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>