<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations><gtr:collaborator url="http://gtr.ukri.org:80/organisation/455203A4-9781-4725-A589-223CA5AD2E10"><gtr:id>455203A4-9781-4725-A589-223CA5AD2E10</gtr:id><gtr:name>Australian National University (ANU)</gtr:name></gtr:collaborator></gtr:collaborations><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/46387D84-F71E-4B7D-8C7D-9C288F113510"><gtr:id>46387D84-F71E-4B7D-8C7D-9C288F113510</gtr:id><gtr:name>Imperial College London</gtr:name><gtr:department>Dept of Computing</gtr:department><gtr:address><gtr:line1>South Kensington Campus</gtr:line1><gtr:line2>Exhibition Road</gtr:line2><gtr:line4>London</gtr:line4><gtr:postCode>SW7 2AZ</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/46387D84-F71E-4B7D-8C7D-9C288F113510"><gtr:id>46387D84-F71E-4B7D-8C7D-9C288F113510</gtr:id><gtr:name>Imperial College London</gtr:name><gtr:address><gtr:line1>South Kensington Campus</gtr:line1><gtr:line2>Exhibition Road</gtr:line2><gtr:line4>London</gtr:line4><gtr:postCode>SW7 2AZ</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/455203A4-9781-4725-A589-223CA5AD2E10"><gtr:id>455203A4-9781-4725-A589-223CA5AD2E10</gtr:id><gtr:name>Australian National University (ANU)</gtr:name><gtr:roles><gtr:role><gtr:name>COLLABORATOR</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/8D85F118-49C4-4F5A-8A03-0536BC5EB562"><gtr:id>8D85F118-49C4-4F5A-8A03-0536BC5EB562</gtr:id><gtr:firstName>James</gtr:firstName><gtr:surname>Brotherston</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FF043767%2F1"><gtr:id>92E1E698-B410-4BBF-AA97-AAAD874C1D5A</gtr:id><gtr:title>Cyclic Proofs for Logic-Based Program Verification</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Fellowship</gtr:grantCategory><gtr:grantReference>EP/F043767/1</gtr:grantReference><gtr:abstractText>The last few years have seen a increasingly widespreadinterest, both from the academic perspective and from elementsof industry, in the mathematical verification of desirableproperties of computer programs. Such properties might state,for example, that a program does not exceed its memory bounds(``memory safety'') or that it is always able to perform acertain action (``liveness''). The development of appropriatereasoning principles for programs and of proof systems andcomputer tools supporting those principles is thus currentlyattracting considerable activity amongst the computer scienceresearch community.Despite the advances in developing various forms of programlogic, the underlying notion of a *proof* of a programproperty has changed very little; by default, a proof is afinite tree whose construction respects the particularinference rules of the logic (a.k.a. derivation tree ), sothat the leaves of the tree are axiom instances and the root ofthe tree is the theorem to be proven, with intermediate nodesrelated by logical inferences. Recently, however, analternative mode of formal proof has been mooted as a paradigmfor reasoning in logics that feature various forms ofrecursion, known as *cyclic proof*. A cyclic proof isessentially obtained by identifying some cycles in a derivationtree, i.e., a cyclic proof is really a regular, infinitederivation tree, represented in cyclic graph form. Typically,not every such proof structure represents a sound proof, so anadditional, global guardedness condition is imposed oncyclic proofs that ensures their soundness. The existing investigations of cyclic proof, first in the purelogical settings of first-order logic and BI with inductivedefinitions, and subsequently in a separation logic systemfor proving termination of simple programs, have demonstratedits viability as a tool for formal reasoning, and its potentialpower as a proof method. Moreover, in the case of first-orderlogic with inductive definitions, a completeness result foran associated infinitary proof system establishes the semanticnaturality of the approach. We view our previous work in thesedirections as having substantially established the area ofcyclic proof as both a theoretically natural one worthy ofstudy, and ripe for applications in program verification.The broad aim of the proposed Postdoctoral Fellowship is tobuild on the developed theoretical foundations of cyclic proof,and especially its initial development into separationlogic-based reasoning about programs, in order to furtherexploit the ideas in the direction of applications. First, we wish to formulate and analyse cyclic proof systems for program verification based on separation logic, and to extend the cyclic proof concept to mixed induction and coinduction. Second, we wish to investigate the potential of cyclic proof as a vehicle for automated theorem proving.</gtr:abstractText><gtr:fund><gtr:end>2011-10-31</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2008-11-01</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>253391</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs><gtr:collaborationOutput><gtr:collaboratingOrganisation>Australian National University (ANU)</gtr:collaboratingOrganisation><gtr:country>Australia, Commonwealth of</gtr:country><gtr:description>Raj</gtr:description><gtr:id>E93EB598-F52E-4AEA-A640-99B39DF6FA88</gtr:id><gtr:impact>TABLEAUX 2011 publication: Craig Interpolation for Displayable Logics by Brotherston and Gore.
IJCAR 2016 publication: Machine-checked interpolation theorems for substructural logics using display calculi by Dawson, Brotherston and Gore</gtr:impact><gtr:outcomeId>54636efc82c6e4.24920077-1</gtr:outcomeId><gtr:partnerContribution>Joint work on research project into Craig interpolation for displayable logics</gtr:partnerContribution><gtr:piContribution>Joint work on research project into Craig interpolation for displayable logics</gtr:piContribution><gtr:sector>Academic/University</gtr:sector><gtr:start>2010-01-01</gtr:start></gtr:collaborationOutput></gtr:collaborationOutputs><gtr:disseminationOutputs/><gtr:exploitationOutputs/><gtr:furtherFundingOutputs/><gtr:impactSummaryOutputs><gtr:impactSummaryOutput><gtr:description>The papers produced as the principal outcome of this fellowship have since received multiple citations by authors working on related subjects. The Cyclist theorem prover is now a standard point of comparison for authors working on automated verification in separation logic (and in inductive theorem proving more generally).</gtr:description><gtr:firstYearOfImpact>2012</gtr:firstYearOfImpact><gtr:id>5EFD398E-3D08-44CD-BAB8-B0E777F84016</gtr:id><gtr:impactTypes/><gtr:outcomeId>54636d35dec5f7.84440723</gtr:outcomeId><gtr:sector>Digital/Communication/Information Technologies (including Software)</gtr:sector></gtr:impactSummaryOutput></gtr:impactSummaryOutputs><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>As well as the research on cyclic proofs highlighted in the original fellowship proposal, we identified several interesting and significant foundational issues concerning the resource-orientated logics (like separation logic) to which we had proposed applying cyclic proof technology, and were able to make progress in both areas.</gtr:description><gtr:exploitationPathways>The Cyclist theorem prover, developed as part of the fellowship, is open source software and can be used for a wide range of user defined logics.</gtr:exploitationPathways><gtr:id>FC305117-5AE5-4C32-9081-4A2678915D62</gtr:id><gtr:outcomeId>54636cc1525a36.71977589</gtr:outcomeId><gtr:sectors><gtr:sector>Digital/Communication/Information Technologies (including Software)</gtr:sector></gtr:sectors></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs><gtr:softwareAndTechnicalProductOutput><gtr:description>Cyclic theorem proving framework instantiable to a wide range of user-defined logics. Comes with prebuilt instantiations and specialised auxiliary tools.</gtr:description><gtr:id>CD41D55B-9F99-4805-A2EE-00691A7EAC19</gtr:id><gtr:impact>We believe this to be the first general-purpose theorem proving tool based on the theoretical concept of &amp;quot;cyclic proof&amp;quot;.</gtr:impact><gtr:outcomeId>54636a4218ca89.95170448</gtr:outcomeId><gtr:title>Cyclist</gtr:title><gtr:type>Software</gtr:type><gtr:url>https://github.com/ngorogiannis/cyclist</gtr:url><gtr:yearFirstProvided>2012</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput></gtr:softwareAndTechnicalProductOutputs><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>283A0F00-B3CE-47E7-A5F3-3F6FBC67749E</gtr:id><gtr:title>Undecidability of Propositional Separation Logic and Its Neighbours</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/4318012ae61b9d7d7927edb1df295cbe"><gtr:id>4318012ae61b9d7d7927edb1df295cbe</gtr:id><gtr:otherNames>Brotherston J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2010-01-01</gtr:date><gtr:isbn>978-1-4244-7588-9</gtr:isbn><gtr:outcomeId>doi_53d05b05b2a103ce</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>6DECF79B-01F4-4625-ACD6-21108AC65EFB</gtr:id><gtr:title>Classical BI (A logic for reasoning about dualising resources)</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/4318012ae61b9d7d7927edb1df295cbe"><gtr:id>4318012ae61b9d7d7927edb1df295cbe</gtr:id><gtr:otherNames>Brotherston J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2009-01-01</gtr:date><gtr:outcomeId>r_5821489991cac2d154</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>6680FF5D-C981-45FE-AC62-BDBCC9E5461A</gtr:id><gtr:title>A Unified Display Proof Theory for Bunched Logic</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/4318012ae61b9d7d7927edb1df295cbe"><gtr:id>4318012ae61b9d7d7927edb1df295cbe</gtr:id><gtr:otherNames>Brotherston J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2010-01-01</gtr:date><gtr:outcomeId>54621582031de7.89357828</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>38C4E034-BA6E-45E8-9425-7034327DAFA6</gtr:id><gtr:title>Classical BI</gtr:title><gtr:parentPublicationTitle>ACM SIGPLAN Notices</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/4318012ae61b9d7d7927edb1df295cbe"><gtr:id>4318012ae61b9d7d7927edb1df295cbe</gtr:id><gtr:otherNames>Brotherston J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2009-01-01</gtr:date><gtr:outcomeId>5a578b0c975b01.67976516</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>014AF380-3305-40F5-A075-5D557FC94711</gtr:id><gtr:title>Bunched Logics Displayed</gtr:title><gtr:parentPublicationTitle>Studia Logica</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/4318012ae61b9d7d7927edb1df295cbe"><gtr:id>4318012ae61b9d7d7927edb1df295cbe</gtr:id><gtr:otherNames>Brotherston J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2012-01-01</gtr:date><gtr:outcomeId>doi_53cfdefde9bd126a</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>66DE3471-97B9-402A-8800-C0FAB4595AAE</gtr:id><gtr:title>Classical BI: Its Semantics and Proof Theory</gtr:title><gtr:parentPublicationTitle>Logical Methods in Computer Science</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/4318012ae61b9d7d7927edb1df295cbe"><gtr:id>4318012ae61b9d7d7927edb1df295cbe</gtr:id><gtr:otherNames>Brotherston J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2010-01-01</gtr:date><gtr:outcomeId>doi_53d084084ec90bb8</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>60BCDAC9-9A58-4E36-842E-E60FAD8154C4</gtr:id><gtr:title>Sequent calculi for induction and infinite descent</gtr:title><gtr:parentPublicationTitle>Journal of Logic and Computation</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/4318012ae61b9d7d7927edb1df295cbe"><gtr:id>4318012ae61b9d7d7927edb1df295cbe</gtr:id><gtr:otherNames>Brotherston J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2010-01-01</gtr:date><gtr:outcomeId>546214d95a9f89.61151947</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/F043767/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>