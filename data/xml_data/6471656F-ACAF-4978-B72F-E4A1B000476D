<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations/><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/7A0397DD-E0C6-4EA3-8031-B841D2503C4D"><gtr:id>7A0397DD-E0C6-4EA3-8031-B841D2503C4D</gtr:id><gtr:name>Royal Holloway, University of London</gtr:name><gtr:department>Computer Science</gtr:department><gtr:address><gtr:line1>Egham Hill</gtr:line1><gtr:line4>Egham</gtr:line4><gtr:line5>Surrey</gtr:line5><gtr:postCode>TW20 0EX</gtr:postCode><gtr:region>South East</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/7A0397DD-E0C6-4EA3-8031-B841D2503C4D"><gtr:id>7A0397DD-E0C6-4EA3-8031-B841D2503C4D</gtr:id><gtr:name>Royal Holloway, University of London</gtr:name><gtr:address><gtr:line1>Egham Hill</gtr:line1><gtr:line4>Egham</gtr:line4><gtr:line5>Surrey</gtr:line5><gtr:postCode>TW20 0EX</gtr:postCode><gtr:region>South East</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/C682FA11-738A-4AC5-A377-533C7AD0AE16"><gtr:id>C682FA11-738A-4AC5-A377-533C7AD0AE16</gtr:id><gtr:firstName>Robin</gtr:firstName><gtr:surname>Adams</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FD066638%2F1"><gtr:id>6471656F-ACAF-4978-B72F-E4A1B000476D</gtr:id><gtr:title>Reverse Mathematics in Dependent Type Theory</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Fellowship</gtr:grantCategory><gtr:grantReference>EP/D066638/1</gtr:grantReference><gtr:abstractText>It has been known for over a century that it is possible in principle to build a machine that would check whether a proof of a mathematical theorem is correct, if that proof is written in a language designed for the task, called a language of formal logic (or sometimes system or theory of formal logic). The study of these languages is the field of mathematics called mathematical logic.Nowadays, it is possible in practice. There are several computer programs, called proof checkers, that check whether a proof written in a particular logical system is correct. These have proven useful both to research mathematicians, and to computer scientists for reasoning about programs, when it is desired to have a proof that a given program has a certain property, and a cast-iron guarantee that the proof is correct.Proof checkers based on the family of systems of formal logic known as dependent type theories have proven very successful, particularly for these computer science applications. However, dependent type theory has so far only been successfully applied to constructive mathematics - a school of thought in the philosophy of mathematics that rejects many methods of proof that are accepted in classical mathematics, the practice of mathematics followed by the mainstream mathematical community.Constructive mathematics, or constructivism, is only one of a number of alternatives to classical mathematics. Many such foundations for mathematics have been proposed, going by such weird and wonderful names as predicativism, finitism and ultraintuitionism.There is a project of research in mathematical logic called Reverse Mathematics that has conducted an extremely detailed analysis of several theories of logic of the kind known as second-order logics, many of which correspond closely to some foundational scheme in mathematics. This programme has been very succesful, revealing unsuspected connections between the foundational schemes, and helping to make more precise what is meant by the strength of a mathematical theorem.It is our opinion that Reverse Mathematics has been hampered by this concentration on second-order logic. Second-order logic can only talk about two types of mathematical object: natural numbers, and sets of natural numbers. To handle other objects, researchers in Reverse Mathematics must pretend that certain natural numbers are disguised (they prefer the word 'coded'). This is not always possible, and it is often inconvenient when it is possible. Type theory, in contrast, as its name suggests, is designed to handle a variety of different types of mathematical object.We believe it is time for dependent type theory to be applied outside constructive mathematics, and for Reverse Mathematics to have a second string to its bow.We therefore feel it is time that these two strands of research were brought together. We propose to carry out a programme similar to Reverse Mathematics in dependent type theory. We shall use Peter Aczel's recent concept of a logic-enriched type theory: a type theory in which the mechanism for representing mathematical objects, and the mechanism for reasoning about those objects, are rigidly separated. It is therefore possible to change the logic to be classical, predicative, or what you will, without changing the collection of objects about which one can speak.We propose to construct a number of different logic-enriched type theories corresponding to different foundational schemes in mathematics, and to investigate which proofs can be formalised within each. We shall adapt an existing general-purpose proof checker to implement these theories. We hope that this shall both reveal connections between the foundational systems of mathematics that are not apparent in Reverse Mathematics, and be a large step towards the construction of a proof checker that retains all the strengths of dependent type theory, but can accept non-constructive proofs.</gtr:abstractText><gtr:fund><gtr:end>2009-10-15</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2006-10-16</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>225677</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs/><gtr:disseminationOutputs/><gtr:exploitationOutputs/><gtr:furtherFundingOutputs/><gtr:impactSummaryOutputs/><gtr:intellectualPropertyOutputs/><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs/><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>F9438DB6-BFFC-4B97-AFD9-395D2FB86AE0</gtr:id><gtr:title>Structural subtyping for inductive types with functorial equality rules</gtr:title><gtr:parentPublicationTitle>Mathematical Structures in Computer Science</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/0313b38a328e6cf43f92dcf78b9a6586"><gtr:id>0313b38a328e6cf43f92dcf78b9a6586</gtr:id><gtr:otherNames>LUO Z</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2008-01-01</gtr:date><gtr:outcomeId>doi_53d0130134bafe52</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>52015989-8E31-4EC9-B5BD-772882023B64</gtr:id><gtr:title>Weyl's predicative classical mathematics as a logic-enriched type theory</gtr:title><gtr:parentPublicationTitle>ACM Transactions on Computational Logic</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/f8fc7aab55825204e4ea4a91d8c76fa9"><gtr:id>f8fc7aab55825204e4ea4a91d8c76fa9</gtr:id><gtr:otherNames>Adams R</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2010-01-01</gtr:date><gtr:outcomeId>doi_53d0740748e0d415</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/D066638/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>90</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject><gtr:researchSubject><gtr:id>DEA11FBC-BEED-4EDD-890B-97D728462D26</gtr:id><gtr:percentage>10</gtr:percentage><gtr:text>Mathematical sciences</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>90</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic><gtr:researchTopic><gtr:id>9A30FDC6-AEB7-447C-A30E-0EF6BDB406FB</gtr:id><gtr:percentage>10</gtr:percentage><gtr:text>Logic &amp; Combinatorics</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>