<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations/><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/EAAD4D43-BD15-432B-9385-2DBD0C65958D"><gtr:id>EAAD4D43-BD15-432B-9385-2DBD0C65958D</gtr:id><gtr:name>University of Bath</gtr:name><gtr:department>Computer Science</gtr:department><gtr:address><gtr:line1>University of Bath</gtr:line1><gtr:line2>Claverton Down</gtr:line2><gtr:line4>Bath</gtr:line4><gtr:line5>Avon</gtr:line5><gtr:postCode>BA2 7AY</gtr:postCode><gtr:region>South West</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/EAAD4D43-BD15-432B-9385-2DBD0C65958D"><gtr:id>EAAD4D43-BD15-432B-9385-2DBD0C65958D</gtr:id><gtr:name>University of Bath</gtr:name><gtr:address><gtr:line1>University of Bath</gtr:line1><gtr:line2>Claverton Down</gtr:line2><gtr:line4>Bath</gtr:line4><gtr:line5>Avon</gtr:line5><gtr:postCode>BA2 7AY</gtr:postCode><gtr:region>South West</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/BED18F2A-AA79-4DF6-A31D-888230D82CE7"><gtr:id>BED18F2A-AA79-4DF6-A31D-888230D82CE7</gtr:id><gtr:firstName>Anthony</gtr:firstName><gtr:otherNames>John</gtr:otherNames><gtr:surname>Power</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FK028243%2F1"><gtr:id>DBFEF5BB-AA6A-4757-8A11-ED179DE4E484</gtr:id><gtr:title>Coalgebraic Logic Programming for Type Inference</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Research Grant</gtr:grantCategory><gtr:grantReference>EP/K028243/1</gtr:grantReference><gtr:abstractText>The main goal of typing is to prevent the occurrence of execution errors during the running of a program. 
Milner formalised the idea, showing that ``well-typed programs cannot go wrong''. In practice, type structures provide a fundamental technique of reducing programmer errors. At their strongest, they cover most of the properties of interest to the verification community.

A major trend in the development of functional languages is improvement in expressiveness of the underlying type system, e.g., in terms of Dependent Types, Type Classes, Generalised Algebraic Types (GADTs), Dependent Type Classes and Canonical Structures. Milner-style decidable type inference does not always suffice for such extensions (e.g. the principal type may no longer exist), and deciding well-typedness sometimes requires computation additional to compile-time type inference.

Implementations of new type inference algorithms include a variety of first-order decision procedures, notably Unification and Logic Programming (LP), Constraint LP, LP embedded into interactive tactics (Coq's eauto), and LP supplemented by rewriting.

Recently, a strong claim has been made by Gonthier et al that, for richer type systems, LP-style type inference is more efficient and natural than traditional tactic-driven proof development.

A second major trend is parallelism: the absence of side-effects makes it easy to evaluate sub-expressions in parallel. Powerful abstraction mechanisms of function composition and higher-order functions play important roles in parallelisation. Three major parallel languages are Eden (explicit parallelism) Parallel ML (implicit parallelism) and Glasgow parallel Haskell (semi-explicit parallelism). Control parallelism in particular distinguishes functional languages.

Type inference and parallelism are rarely considered together in the literature. As type inference becomes more sophisticated and takes a bigger role in the overall program development, sequential type inference is bound to become a bottle-neck for language parallelisation.

Our new Coalgebraic Logic Programming (CoALP) offers both extra expressiveness (corecursion) and parallelism in one algorithm. We propose to use CoALP in place of LP tools currently used in type inference.

With the mentioned major developments in Corecursion, Parallelism, and Typeful (functional) programming it has become vital for these disjoint communities to combine their efforts: enriched type theories rely more and more on the new generation of LP languages; coalgebraic semantics has become influential in language design; and parallel dialects of languages have huge potential in applying common techniques across the FP/LP programming paradigm. This project is unique in bringing together local and international collaborators working in the three communities. The number of
supporters the project has speaks better than words about the timeliness of our agenda.


The project will impact on two streams of EPSRC's strategic plan: &amp;quot;Programming Languages and Compilers&amp;quot; and &amp;quot;Verification and Correctness&amp;quot;. The project is novel in aspects of Theory (coalgebraic study of (co)recursive computations arising in automated proof-search); Practice (implementation of the new language CoALP and its embedding in type-inference tools); and Methodology (Mixed corecursion and parallelism).</gtr:abstractText><gtr:fund><gtr:end>2017-01-31</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2013-09-01</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>37114</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs/><gtr:disseminationOutputs><gtr:disseminationOutput><gtr:description>Invited talk (Cambridge)</gtr:description><gtr:form>A talk or presentation</gtr:form><gtr:geographicReach>Local</gtr:geographicReach><gtr:id>1E80DBE7-E57F-4AA3-8360-1763EE59B81B</gtr:id><gtr:impact>People had not noticed the issue I explained, and they asked a string of questions about it. It also led to email correspondence.

In a somewhat circuitous way, it led to a proposal to apply for joint research involving Australia (one of the audience having recently done relevant joint work with a researcher based in Australia).</gtr:impact><gtr:outcomeId>563b2aa3314298.20251461</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Participants in your research and patient groups</gtr:primaryAudience><gtr:url>http://www.talks.cam.ac.uk/talk/index/60903</gtr:url><gtr:year>2015</gtr:year></gtr:disseminationOutput><gtr:disseminationOutput><gtr:description>Invited talk LFCS 30th anniversary</gtr:description><gtr:form>A talk or presentation</gtr:form><gtr:geographicReach>International</gtr:geographicReach><gtr:id>586EEBB1-E9BB-4B7F-AFC0-04C2FFA35AFD</gtr:id><gtr:impact>It was the 30th anniversary celebration workshop for the Laboratory for the Foundations of Computer Science at the University of Edinburgh. It was taped and made available to the wider world.</gtr:impact><gtr:outcomeId>580dbd50dc4972.37590750</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Professional Practitioners</gtr:primaryAudience><gtr:year>2016</gtr:year></gtr:disseminationOutput><gtr:disseminationOutput><gtr:description>Invited talk (YamCats)</gtr:description><gtr:form>A talk or presentation</gtr:form><gtr:geographicReach>Regional</gtr:geographicReach><gtr:id>8A029F29-E1A8-42D0-A336-640F5FB72EEF</gtr:id><gtr:impact>The talk led people to think about Logic Programming and Coalgebraic Logic Programming in a way that they had not previously done. They asked questions and clearly gave the approach some thought. YamCats is a Yorkshire and Midlands based seminar series on category theory.

After my talk, I was invited to give a further talk at Cambridge. We also discussed the possibility of running a workshop arising from it.</gtr:impact><gtr:outcomeId>563b28ff0a61b5.55609867</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Participants in your research and patient groups</gtr:primaryAudience><gtr:url>http://www2.le.ac.uk/departments/mathematics/extranet/staff-material/staff-profiles/simona-paoli/yorkshire-and-midlands-category-theory-seminar-yamcats</gtr:url><gtr:year>2015</gtr:year></gtr:disseminationOutput><gtr:disseminationOutput><gtr:description>invited talk (ScotCats)</gtr:description><gtr:form>A talk or presentation</gtr:form><gtr:geographicReach>National</gtr:geographicReach><gtr:id>93F75161-B9C2-407F-BB6B-C6744D3D1087</gtr:id><gtr:impact>There was considerable discussion. It also helped me to refine my own thinking.

It, along with the other talks and visits on the grant, has helped to progress a fundamentally new mathematical structure that I and assorted other leading researchers in the topic are confident will be of key importance.</gtr:impact><gtr:outcomeId>563b2bdb22f837.14678050</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Participants in your research and patient groups</gtr:primaryAudience><gtr:url>http://msp.cis.strath.ac.uk/fibs-2014/</gtr:url><gtr:year>2014</gtr:year></gtr:disseminationOutput><gtr:disseminationOutput><gtr:description>Invited talks at Macquarie University</gtr:description><gtr:form>A talk or presentation</gtr:form><gtr:geographicReach>Regional</gtr:geographicReach><gtr:id>F2E9CA06-BDFA-4516-9054-FDA515B9B55C</gtr:id><gtr:impact>I was asked to give two talks at Macquarie University in Sydney, Australia: one to the Mathematics department as a whole; the other to specialists in my area.</gtr:impact><gtr:outcomeId>580dbdc6503886.56307007</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Professional Practitioners</gtr:primaryAudience><gtr:year>2016</gtr:year></gtr:disseminationOutput></gtr:disseminationOutputs><gtr:exploitationOutputs/><gtr:furtherFundingOutputs/><gtr:impactSummaryOutputs><gtr:impactSummaryOutput><gtr:description>Personally, in Bath, I have been responsible for the abstract mathematical part of the grant. The more applied work has all been done in Dundee. So I refer you to it. My own research has definitely contributed to the Dundee work, but independently of that, I have only propagated my research in academic environments, as one would normally expect of abstract mathematics.</gtr:description><gtr:firstYearOfImpact>2016</gtr:firstYearOfImpact><gtr:id>5FFCBB3A-9AC7-4D96-978A-2A90C9C3A33F</gtr:id><gtr:impactTypes><gtr:impactType>Economic</gtr:impactType></gtr:impactTypes><gtr:outcomeId>5447d6484a4c32.64262168</gtr:outcomeId><gtr:sector>Digital/Communication/Information Technologies (including Software),Other</gtr:sector></gtr:impactSummaryOutput></gtr:impactSummaryOutputs><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>I have worked holistically on this, with relevant research that was partially done before the grant began being completed, and with new research being commenced. 

That has involved the completion of a succession of papers together with editing a proceedings. The latter included one paper that was done during the grant period but written (necessarily) by the co-PI in Dundee. Of its nature, it amounted to testing what computation can actually be done as a result of the abstract mathematics. The other papers in the proceedings surrounded that, a general investigation of the combination of algebra and coalgebra with its interactions with logic and computation: note that the grant is inherently about using coalgebra to model logic programming. 

The mathematical work of the grant, which is the part for which I am responsible, is inherently abstract, with a number of applications. So I investigated a somewhat different, but related application on my visits to Japan (funded by a Japanese university and now by Royal Society), where we used coalgebraic-style techniques to model &amp;quot;setoids&amp;quot;, which form a kind of logic that underlies the programming language Agda, which is broadly a sophisticated kind of logic programming language, reflecting a kind of extension to logic programming as we said we would study.

I also used the underlying category theoretic techniques, in collaboration with colleagues in Bath, to model game semantics.

And we finished work on our first journal paper that was directly on the narrow topic of the grant, and commenced research on further work. The latter involved dealing with the key underlying mathematical problem, that of providing a precise category theoretic semantics for &amp;quot;coinductive trees&amp;quot; and variants. That has not been written up yet; nor have the details been checked; but it has begun very well. 

We have written another journal paper now that I think is particularly good, further refining the underlying mathematics and connecting our approach with that of a French/Italian group. Much of the writing for that was done on a Royal Society-funded visit to Australia, where I also spoke about the work. 

In the meantime, the Dundee group has continued its more applied work, which in turn is raising new mathematical questions, in particular in regard to modelling the various kinds of recursion that arise here.</gtr:description><gtr:exploitationPathways>I have given seminars on the work (upon invitation) at Cambridge, Oxford, Strathclyde, Edinburgh and Macquarie University in Australia over the past few years. several times in Cambridge and Edinburgh They were all received intelligently and well by substantial audiences. So I am optimistic that the mathematicians and theoretical computer scientists there will absorb the ideas into their own work.</gtr:exploitationPathways><gtr:id>440D0630-A4DF-41A9-982D-5331F12402BD</gtr:id><gtr:outcomeId>5447d557d3aef0.15540364</gtr:outcomeId><gtr:sectors><gtr:sector>Digital/Communication/Information Technologies (including Software),Other</gtr:sector></gtr:sectors></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs/><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>001A1037-6ED3-412E-92A6-DD4810C2563D</gtr:id><gtr:title>Category theoretic structure of setoids</gtr:title><gtr:parentPublicationTitle>Theoretical Computer Science</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/1c7902c81cb1f8b6edd1e317f4d0dfba"><gtr:id>1c7902c81cb1f8b6edd1e317f4d0dfba</gtr:id><gtr:otherNames>Kinoshita Y</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2014-01-01</gtr:date><gtr:outcomeId>541adddf2d5dd1.35488720</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>F9761758-C827-4DA6-A6C6-B16645B7EB80</gtr:id><gtr:title>Coalgebraic logic programming: from Semantics to Implementation</gtr:title><gtr:parentPublicationTitle>Journal of Logic and Computation</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/8a1f751684eea59daa41e9b748a08fae"><gtr:id>8a1f751684eea59daa41e9b748a08fae</gtr:id><gtr:otherNames>Komendantskaya E</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2016-01-01</gtr:date><gtr:outcomeId>541adeabdff7f1.22498544</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>8E462BAF-EFE1-4D95-84D4-E1136EB8954E</gtr:id><gtr:title>A graphical foundation for interleaving in game semantics</gtr:title><gtr:parentPublicationTitle>Journal of Pure and Applied Algebra</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/bace80eb382ef681b5eff83b41fbc9b0"><gtr:id>bace80eb382ef681b5eff83b41fbc9b0</gtr:id><gtr:otherNames>McCusker G</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2015-01-01</gtr:date><gtr:outcomeId>541ae0acabc9b9.79570897</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>3922CC5D-4641-40D5-8A38-449EE9BB21A8</gtr:id><gtr:title>Logic programming: laxness and saturation</gtr:title><gtr:parentPublicationTitle>Journal of Logic and Algebraic Methods in Programming</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/bb78f711c4ccf8f70ca544a666d98a92"><gtr:id>bb78f711c4ccf8f70ca544a666d98a92</gtr:id><gtr:otherNames>E. Komenandtskaya</gtr:otherNames></gtr:author></gtr:authors><gtr:outcomeId>580dc21c6cedf8.21790337</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>FCAC127C-834C-45F3-B7C2-E2BA0938C3C3</gtr:id><gtr:title>Category Theoretic Semantics for Logic Programming: Laxness and Saturation</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/aaeb1c49455937a922ecc463f8d935b5"><gtr:id>aaeb1c49455937a922ecc463f8d935b5</gtr:id><gtr:otherNames>J. Power</gtr:otherNames></gtr:author></gtr:authors><gtr:outcomeId>580dc28839e1f1.99112641</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>E4C0F127-C10A-4115-8363-4FE9134271B5</gtr:id><gtr:title>Preface</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/48df613035ac8dba117b03a9ddb889ba"><gtr:id>48df613035ac8dba117b03a9ddb889ba</gtr:id><gtr:otherNames>A.J.Power</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2014-01-01</gtr:date><gtr:outcomeId>541add3d96c554.83916473</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/K028243/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>