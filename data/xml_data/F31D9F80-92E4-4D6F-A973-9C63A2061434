<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations/><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/EAAD4D43-BD15-432B-9385-2DBD0C65958D"><gtr:id>EAAD4D43-BD15-432B-9385-2DBD0C65958D</gtr:id><gtr:name>University of Bath</gtr:name><gtr:department>Computer Science</gtr:department><gtr:address><gtr:line1>University of Bath</gtr:line1><gtr:line2>Claverton Down</gtr:line2><gtr:line4>Bath</gtr:line4><gtr:line5>Avon</gtr:line5><gtr:postCode>BA2 7AY</gtr:postCode><gtr:region>South West</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/EAAD4D43-BD15-432B-9385-2DBD0C65958D"><gtr:id>EAAD4D43-BD15-432B-9385-2DBD0C65958D</gtr:id><gtr:name>University of Bath</gtr:name><gtr:address><gtr:line1>University of Bath</gtr:line1><gtr:line2>Claverton Down</gtr:line2><gtr:line4>Bath</gtr:line4><gtr:line5>Avon</gtr:line5><gtr:postCode>BA2 7AY</gtr:postCode><gtr:region>South West</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/DD43001C-409F-452A-BC45-AA4152577BB5"><gtr:id>DD43001C-409F-452A-BC45-AA4152577BB5</gtr:id><gtr:firstName>James</gtr:firstName><gtr:surname>Laird</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FK037633%2F1"><gtr:id>F31D9F80-92E4-4D6F-A973-9C63A2061434</gtr:id><gtr:title>Semantic Types for Verified Program Behaviour</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Research Grant</gtr:grantCategory><gtr:grantReference>EP/K037633/1</gtr:grantReference><gtr:abstractText>Types help programmers to combine program components correctly, avoiding errors. Subtype polymorphism adds flexibility by allowing programs of different types to be used safely in the same context - as a means of structuring programs it has already found extremely widespread and fruitful application in object-oriented languages. Second-order features such as bounded quantification and type operators allows programmers further control over the type of code which is passed between programs, constituting powerful descriptive tools for the modular combination and reuse of code.

Denotational semantics is used to construct precise models of programming languages which abstract away from implementation detail and allows programs to be proved correct by reasoning about their interpretations as mathematical objects. This project aims to use semantics to understand the highly complex structures captured by second-order type systems, while developing the new capacity to use them to describe and reason about computational behaviour of programs and the environments in which they may be evaluated: for example, preventing malicious code from compromising security by constraining its access to control or information flow. It will develop the capacity to verify such properties and to use proofs directly and indirectly in the construction of programs. It will study types and type systems using game semantics, which describes programs in terms of their interaction with the environment, as a formal two player game. This reflects the behavioural properties that we wish to reason about, like control and information flow, elegantly captures key computational side-effects, like local state, and lends itself to powerful algorithmic and operational techniques for reasoning about them. Moreover, it allows a simple notion of intensional semantic subtyping to be formalised and investigated: a type S represents a subtype of T if program behaviour in T is available in S, and environment behaviour in S is available in T. By combining this with recently developed intensional representations of second-order types as games, the project will develop new models - of programming languages with higher-order state, dynamic binding, bounded quantifiers, and type constructors - new type theories using these features to represent program behaviour, computational effects and the environments in which code may be run - and new reasoning techniques for verifying program properties by model checking, type checking, and operational methods.</gtr:abstractText><gtr:potentialImpactText>Errors or inefficiencies in the computer software and computational systems which pervade society are relatively common, and can have major negative impact. Avoiding or rectifying them will require profound understanding of the increasingly complex structure and behaviour of programs. Assurance that programs are correct (i.e. error-free) is often critical for systems engineers, software developers, vendors and purchasers. The only means to guarantee that programs are correct is by formal verification - i.e. mathematical proof, which requires deep and rigorous foundational theories. This project will develop these foundations using powerful theories based on denotational semantics - which abstracts away from incidental details of particular implementations and lends itself to automated verification of key properties - and type theory, which provides a framework to express these properties which is already well understood by practitioners as the basis of well-structured high-level programs. Semantics and type theory are increasingly and fruitfully used (separately) as the basis of practical verification techniques (model and type checking). By combining both areas, the project will enable the flow of ideas and techniques between them: in particular, allowing the use of types to express and reason about deeper and more global structure and properties than hitherto.

Over the longer term (10+ years), these ideas have the potential for significant influence on the software industry by supporting the development of typing systems which integrate software specification, generation and verification. The increasingly modular and distributed nature of code and its development entail that finding ways to combine program components safely will become increasingly important: semantic types provide a way to do this which will allow developers and programmers to describe the requirements of trustworthy code (in terms of its behaviour in a given environment), and delegate its verification to powerful model-checking tools. This will support (for example) the creation of technical standards for software, contracts for multi-party software development, and open-source libraries of generic, verified code components.
In summary, the project will impact upon the development of safe, reliable software by:
1 Discovering powerful new reasoning techniques for verifying program behaviour, and leveraging current and future developments in verification by model-checking, by extending them to powerful type systems with generic subtype polymorphism.
2 Contributing to the art and science of programming language design by developing new typing systems allowing programmers to reason about the behaviour of their code and control the contexts in which it is used.
3 Laying foundations for a new form of software development which uses types as abstractions of program behaviour which can be independently verified and used as guarantees of correctness.

This will convey significant benefits for commercial enterprise, institutions and individuals - in economic terms, by improving reliability and productivity of programs, as well as enhancing safety of automated systems, and security of communication and interaction.</gtr:potentialImpactText><gtr:fund><gtr:end>2017-07-31</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2014-02-28</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>265060</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs/><gtr:disseminationOutputs/><gtr:exploitationOutputs/><gtr:furtherFundingOutputs><gtr:furtherFundingOutput><gtr:amountPounds>11800</gtr:amountPounds><gtr:country>United Kingdom of Great Britain &amp; Northern Ireland (UK)</gtr:country><gtr:currCode>GBP</gtr:currCode><gtr:currCountryCode>United Kingdom</gtr:currCountryCode><gtr:currLang>en_GB</gtr:currLang><gtr:description>International Exchange</gtr:description><gtr:end>2017-08-02</gtr:end><gtr:fundingOrg>The Royal Society</gtr:fundingOrg><gtr:fundingRef>IE150138</gtr:fundingRef><gtr:id>0FA3A8ED-AB9F-4C76-B466-7CF8C15A526A</gtr:id><gtr:outcomeId>56deb507332398.79404640</gtr:outcomeId><gtr:sector>Academic/University</gtr:sector><gtr:start>2015-08-01</gtr:start></gtr:furtherFundingOutput></gtr:furtherFundingOutputs><gtr:impactSummaryOutputs/><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>Research funded by this award described new theories for constructing precise mathematical models of programming logics. In particular:

It designed a new proof system in which proofs correspond to programs with mutable state.
It devloped a new way of modelling polymorphism - a fundamental concept in programming languages.
It discovered a new way to represent the quantitative properties of a program how probable it is to fail, how much resources (time, memory) it uses to return an answer etc.</gtr:description><gtr:exploitationPathways>These findings may be used in the development of new programming languages, and verification tools for proving correctness of software.</gtr:exploitationPathways><gtr:id>9F558B92-6532-4738-A71B-9BDBD61F47C1</gtr:id><gtr:outcomeId>56debaa4dbf562.72815235</gtr:outcomeId><gtr:sectors><gtr:sector>Digital/Communication/Information Technologies (including Software)</gtr:sector></gtr:sectors><gtr:url>http://www.cs.bath.ac.uk/~jl317/</gtr:url></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs/><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>C36A68D5-D82A-462A-B8C6-CBACAE4AF4CC</gtr:id><gtr:title>An interpretation of system F through bar recursion</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/b25f2a9e4af5c028c69016156c269873"><gtr:id>b25f2a9e4af5c028c69016156c269873</gtr:id><gtr:otherNames>Blot V</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2017-01-01</gtr:date><gtr:issn>10436871</gtr:issn><gtr:outcomeId>5a941d6c25c213.89937963</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>7BB7BD59-0649-4867-BCA4-134682D8108D</gtr:id><gtr:title>Polymorphic game semantics for dynamic binding</gtr:title><gtr:parentPublicationTitle>Leibniz International Proceedings in Informatics, LIPIcs</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/ca7174165db866e9e85b740b9f60c26c"><gtr:id>ca7174165db866e9e85b740b9f60c26c</gtr:id><gtr:otherNames>Laird J.</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2016-01-01</gtr:date><gtr:issn>18688969</gtr:issn><gtr:outcomeId>58c29d18c00440.62056956</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>AFFA2F3C-D462-4038-B1A5-8E1A85465647</gtr:id><gtr:title>Sequential Algorithms for Unbounded Nondeterminism</gtr:title><gtr:parentPublicationTitle>Electronic Notes in Theoretical Computer Science</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/32ef196d364ee7cae32f8bde286d72e5"><gtr:id>32ef196d364ee7cae32f8bde286d72e5</gtr:id><gtr:otherNames>Laird J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2015-01-01</gtr:date><gtr:outcomeId>56deb251f33df4.45803254</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>26B6499B-45E5-4E72-8D9C-C335E23D269E</gtr:id><gtr:title>Weighted relational models for mobility</gtr:title><gtr:parentPublicationTitle>Leibniz International Proceedings in Informatics, LIPIcs</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/ca7174165db866e9e85b740b9f60c26c"><gtr:id>ca7174165db866e9e85b740b9f60c26c</gtr:id><gtr:otherNames>Laird J.</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2016-01-01</gtr:date><gtr:issn>18688969</gtr:issn><gtr:outcomeId>58ac766d005e13.51364398</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>A34EB3E7-D90B-4F5A-9312-1DDC387418C8</gtr:id><gtr:title>Combining control effects and their models: Game semantics for a hierarchy of static, dynamic and delimited control effects</gtr:title><gtr:parentPublicationTitle>Annals of Pure and Applied Logic</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/32ef196d364ee7cae32f8bde286d72e5"><gtr:id>32ef196d364ee7cae32f8bde286d72e5</gtr:id><gtr:otherNames>Laird J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2017-01-01</gtr:date><gtr:outcomeId>585d61325e4da0.68267919</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>190624EE-6FB9-4175-942B-2BF6A9C61432</gtr:id><gtr:title>Typed realizability for first-order classical analysis</gtr:title><gtr:parentPublicationTitle>Logical Methods in Computer Science</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/b25f2a9e4af5c028c69016156c269873"><gtr:id>b25f2a9e4af5c028c69016156c269873</gtr:id><gtr:otherNames>Blot V</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2015-01-01</gtr:date><gtr:issn>18605974</gtr:issn><gtr:outcomeId>56deb3e38d7124.02198748</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>C51963E1-6112-48BA-8A45-3E4E6B3A3639</gtr:id><gtr:title>Realizability for Peano arithmetic with winning conditions in HON games</gtr:title><gtr:parentPublicationTitle>Annals of Pure and Applied Logic</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/b25f2a9e4af5c028c69016156c269873"><gtr:id>b25f2a9e4af5c028c69016156c269873</gtr:id><gtr:otherNames>Blot V</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2017-01-01</gtr:date><gtr:outcomeId>585d612fd6ce84.51411674</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>8871E9D0-1F66-441B-9DE7-F8075AD86E40</gtr:id><gtr:title>Classical extraction in continuation models</gtr:title><gtr:parentPublicationTitle>Leibniz International Proceedings in Informatics, LIPIcs</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/f557d8cd2ee6245dab6c8e3424f21e32"><gtr:id>f557d8cd2ee6245dab6c8e3424f21e32</gtr:id><gtr:otherNames>Blot V.</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2016-01-01</gtr:date><gtr:issn>18688969</gtr:issn><gtr:outcomeId>58ac76abd263e1.81394853</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>9A8F2316-0AB8-4247-ADE1-71EE844D1784</gtr:id><gtr:title>Sequoidal categories and transfinite games: A coalgebraic approach to stateful objects in game semantics</gtr:title><gtr:parentPublicationTitle>Leibniz International Proceedings in Informatics, LIPIcs</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/6519a199e954117e061ddddab9b42920"><gtr:id>6519a199e954117e061ddddab9b42920</gtr:id><gtr:otherNames>Gowers W.J.</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2017-01-01</gtr:date><gtr:issn>18688969</gtr:issn><gtr:outcomeId>5a941cf4871b55.71441726</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/K037633/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>