<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations><gtr:collaborator url="http://gtr.ukri.org:80/organisation/EF77BFB6-C66E-441F-AFE3-94353782E01C"><gtr:id>EF77BFB6-C66E-441F-AFE3-94353782E01C</gtr:id><gtr:name>University of Tokyo</gtr:name><gtr:address><gtr:line1>University of Tokyo</gtr:line1><gtr:line2>Bunkyo-Ku</gtr:line2><gtr:region>Outside UK</gtr:region><gtr:country>Japan</gtr:country></gtr:address></gtr:collaborator></gtr:collaborations><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/3EAE04CA-9D62-4483-B9C4-F91AD9F4C5A9"><gtr:id>3EAE04CA-9D62-4483-B9C4-F91AD9F4C5A9</gtr:id><gtr:name>University of Oxford</gtr:name><gtr:department>Computer Science</gtr:department><gtr:address><gtr:line1>University Chest</gtr:line1><gtr:line2>Wellington Square</gtr:line2><gtr:line4>Oxford</gtr:line4><gtr:postCode>OX1 2JD</gtr:postCode><gtr:region>South East</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/3EAE04CA-9D62-4483-B9C4-F91AD9F4C5A9"><gtr:id>3EAE04CA-9D62-4483-B9C4-F91AD9F4C5A9</gtr:id><gtr:name>University of Oxford</gtr:name><gtr:address><gtr:line1>University Chest</gtr:line1><gtr:line2>Wellington Square</gtr:line2><gtr:line4>Oxford</gtr:line4><gtr:postCode>OX1 2JD</gtr:postCode><gtr:region>South East</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/EF77BFB6-C66E-441F-AFE3-94353782E01C"><gtr:id>EF77BFB6-C66E-441F-AFE3-94353782E01C</gtr:id><gtr:name>University of Tokyo</gtr:name><gtr:address><gtr:line1>University of Tokyo</gtr:line1><gtr:line2>Bunkyo-Ku</gtr:line2><gtr:region>Outside UK</gtr:region><gtr:country>Japan</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>COLLABORATOR</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/84F65808-C65E-4A6F-BA9D-7B002697DA66"><gtr:id>84F65808-C65E-4A6F-BA9D-7B002697DA66</gtr:id><gtr:firstName>Luke</gtr:firstName><gtr:surname>Ong</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FM023974%2F1"><gtr:id>2DF1CCF6-1F83-4CD3-A665-9A594CA7697A</gtr:id><gtr:title>Compositional Higher-Order Model Checking: Logics, Models and Algorithms</gtr:title><gtr:status>Active</gtr:status><gtr:grantCategory>Research Grant</gtr:grantCategory><gtr:grantReference>EP/M023974/1</gtr:grantReference><gtr:abstractText>The construction of bug-free programs is a challenging research problem of international importance and huge potential impact. Yet the traditional approaches to achieving confidence in software, such as testing and debugging, are not effective, often accounting for 50-75% of the total development cost. 

In the past decade, automated verification techniques such as model checking have made great strides towards remedying this situation, especially when applied to first-order imperative programs such as C. Model checking is an approach to program verification that promises accurate analysis with pushdown automation. To model check a program against a correctness property, one first expresses the correctness property as a formula of a decidable logic. Then an abstract, typically finite, model of the system is constructed, which is then checked exhaustively for violation of the formula. Tools such as SLAM and Terminator demonstrate that model checking is scalable and highly effective for C-like programs.

This project is about the application of model checking and its allied automated verification methods to higher-order functional programs. Functional programs have long been applied to real-world tasks. Programmers use functional languages because they can build more robust code more quickly and with fewer errors then they could before, thereby boosting reliability and cutting costs. Others turn to functional languages because of the advantages they offer in data parallelism, concurrency, GPGPU and cloud programming. Examples: The Microsoft .NET language F# has emerged as a prototyping language of choice in finance and scientific applications. The concurrency-oriented functional language Erlang is a natural fit for programming multicore CPUs, networked servers, distributed databases, GUIs, and monitoring, control and testing tools. Thus by making functional programming safer and more robust and productive, techniques and tool support for the formal analysis of functional programs will bring significant benefits to the digital economy as a whole, but especially to financial modelling, scientific applications, computing and telecommunications, which are vital to current and future UK economic success.

Our GOAL is to develop a scalable, fully-automatic and well-founded method for the verification of functional programs, based on a compositional approach to Higher-Order Model Checking. Our approach is novel: we marry semantic methods (notably game semantics and intersection types) with algorithmic and automata-theoretic techniques from automated verification and program analysis. The verification problem is intrinsically challenging, not least because of its hyper-exponential worst-case complexity. Nevertheless a prototype implementation of our model checking algorithm, PREFACE, readily scales to recursion schemes of thousands of rules, well beyond the capabilities of current state-of-the-art higher-order model checkers, thus indicating that our approach is very promising. Hence our RESEARCH HYPOTHESIS: It is possible to design well-founded yet practical program verification procedures. This will be achieved by a principled approach based on COMPOSITIONAL Higher-Order Model Checking.</gtr:abstractText><gtr:potentialImpactText>SCIENTIFIC COMMUNITY: KNOWLEDGE CREATION

This project will impact the scientific community because of the new knowledge that will be created. The proposed research contributes chiefly to three areas:

A. Verification and Correctness

B. Programming Languages

C. Theory of Computing, especially Logic and Algorithms, Game Semantics, and Lambda Calculus and Types

The work will impact on and benefit the academics and researchers working in these areas. The manner of the impact and the nature of the knowledge that will be created are explained in the section on Academic Beneficiaries. 

Research areas A and B above are PRIORITY AREAS which EPSRC has earmarked for growth, thus underlining the national importance of the proposed work. 


FINANCIAL MODELLING, SCIENTIFIC APPLICATIONS, COMPUTING AND TELECOMMUNICATIONS: SAFER AND MORE ROBUST CODE

In terms of the strategic themes identified by EPSRC, this proposal sits most naturally with the DIGITAL ECONOMY theme (in particular, with the CLOUD COMPUTING, and VALUE CREATION AND CAPTURE subthemes - see (ii) and (iii) below, respectively).

The construction of bug-free programs is a challenging research problem of international importance and huge potential impact. In a National Institute of Standards and Technology report of 2002, the cost to the US economy of faulty software was estimated at $60 billion. It is vitally important to transfer the benefits of model checking and other automatic verification techniques to higher-order functional languages such as F#, OCaml, Haskell and Erlang. 

(i) Higher-order constructs such as first-class functions, lambda-expressions and closures are now basic features of the most widely-used languages such as Javascript, Perl5, Python, C# and C++0x, which are standard in web programming, hardware and embedded systems design. 

(ii) Because functional languages support domain-specific languages and are good for organising data parallelism, they are widely used in scientific applications and financial modelling. 

(iii) The absence of mutable variables and the use of monadic structuring principle to encapsulate side-effects make functional languages attractive for concurrent programming, which has become extremely important thanks to the rapid growth of multi-core and GPGPU processing and cloud computing.

Thus, by making functional programming safer and more robust and productive, techniques and tool support for the formal analysis of functional programs will bring significant benefits to financial modelling, scientific applications, and the computing and telecommunications industries, which are vital to current and future UK economic success.


WEALTH CREATION

The development of verification techniques and tools is an important precursor to wealth creation because of the opportunities for licensing and spin-offs. Indirectly all of society will benefit because they give rise to safe and reliable software. Our daily lives rely on software infrastructure for banking, communications, travel, shopping, and many other necessities. Ultimately better verification techniques and tools for software will lead to better quality of life in the digital world.</gtr:potentialImpactText><gtr:fund><gtr:end>2019-06-30</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2015-07-01</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>630834</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs><gtr:collaborationOutput><gtr:collaboratingOrganisation>University of Tokyo</gtr:collaboratingOrganisation><gtr:country>Japan</gtr:country><gtr:department>Department of Electrical Engineering and Information Systems</gtr:department><gtr:description>Relating game semantics, intersection types and Taylor expansion of lambda terms</gtr:description><gtr:id>77EFCF68-5A9B-41DB-B2CE-63BB221B4D8E</gtr:id><gtr:impact>This has led to the publication of the following paper:

Takeshi Tsukada, C.-H. Luke Ong: Plays as Resource Terms via Non-idempotent Intersection Types. LICS 2016: 237-246</gtr:impact><gtr:outcomeId>58c7c81fbd7426.39973544-1</gtr:outcomeId><gtr:partnerContribution>Professor Takeshi Tsukada contributed ideas and helped to write up the work for publication.</gtr:partnerContribution><gtr:piContribution>A program is interpreted as a collection of resource terms by the Taylor expansion, as a collection of plays by game semantics, and as a collection of types by a non-idempotent intersection type assignment system. This paper investigates the connection between these models and aims to show that they are essentially the same in a certain sense. Technically we study the relational interpretations of resource terms and of plays, which can be seen as non- idempotent intersection type assignment systems for resource terms and plays, respectively.We show that both relational interpretations are injective, have the same image, and respect composition. This result allows us to study a property of the game model by using the syntax of a resource calculus and vice versa.
Categories</gtr:piContribution><gtr:sector>Academic/University</gtr:sector><gtr:start>2016-01-01</gtr:start></gtr:collaborationOutput></gtr:collaborationOutputs><gtr:disseminationOutputs/><gtr:exploitationOutputs/><gtr:furtherFundingOutputs><gtr:furtherFundingOutput><gtr:amountPounds>180000</gtr:amountPounds><gtr:country>Singapore, Republic of</gtr:country><gtr:currCode>SGD</gtr:currCode><gtr:currCountryCode>Singapore</gtr:currCountryCode><gtr:currLang>en_SG</gtr:currLang><gtr:description>Research Programme on Logic, Automata and Games, Institute for Mathematical Sciences, National University of Singapore, 22 August - 23 September 2016</gtr:description><gtr:end>2016-09-02</gtr:end><gtr:fundingOrg>National University of Singapore</gtr:fundingOrg><gtr:id>ADF3E081-6887-4C66-AD96-846D14635B2C</gtr:id><gtr:outcomeId>58c7c9b32d06e4.79063741</gtr:outcomeId><gtr:sector>Academic/University</gtr:sector><gtr:start>2016-08-01</gtr:start></gtr:furtherFundingOutput><gtr:furtherFundingOutput><gtr:amountPounds>80000</gtr:amountPounds><gtr:country>United Kingdom of Great Britain &amp; Northern Ireland (UK)</gtr:country><gtr:currCode>GBP</gtr:currCode><gtr:currCountryCode>United Kingdom</gtr:currCountryCode><gtr:currLang>en_GB</gtr:currLang><gtr:description>Scatcherd Scholarship</gtr:description><gtr:end>2019-04-02</gtr:end><gtr:fundingOrg>University of Oxford</gtr:fundingOrg><gtr:id>B4C629A0-2750-4981-97BE-65A48AEFDD3F</gtr:id><gtr:outcomeId>56e0afd8b25e30.92086828</gtr:outcomeId><gtr:sector>Academic/University</gtr:sector><gtr:start>2015-10-01</gtr:start></gtr:furtherFundingOutput></gtr:furtherFundingOutputs><gtr:impactSummaryOutputs/><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>We show the diagonal problem for higher-order pushdown automata (HOPDA), and hence the simultaneous unboundedness problem, is decidable. From recent work by Zetzsche this means that we can construct the downward closure of the set of words accepted by a given HOPDA. This also means we can construct the downward closure of the Parikh image of a HOPDA. Both of these consequences play an important role in verifying concurrent higher-order programs expressed as HOPDA or safe higher-order recursion schemes.</gtr:description><gtr:exploitationPathways>Soon after publication of our work at POPL 2016, Clemente et al. [1] built on and extended the key ideas of our result to prove the computability of the downward closure of the set of words generated by a given collapsible pushdown automata (or equivalently higher-order recursion schemes).

[1] Lorenzo Clemente, Pawel Parys, Sylvain Salvati, Igor Walukiewicz: The Diagonal Problem for Higher-Order Recursion Schemes is Decidable. LICS 2016: 96-105</gtr:exploitationPathways><gtr:id>C3A9AAAD-CD83-49D2-BFE2-94B9AB926979</gtr:id><gtr:outcomeId>56e0bf82544cc1.21267927</gtr:outcomeId><gtr:sectors><gtr:sector>Aerospace, Defence and Marine,Education,Electronics,Other</gtr:sector></gtr:sectors></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs/><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>94C90971-4636-4FA8-BD0C-B2A48BC67A50</gtr:id><gtr:title>Higher-order constrained horn clauses for verification</gtr:title><gtr:parentPublicationTitle>Proceedings of the ACM on Programming Languages</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/c89d4044ab88a2eb9388ffcbffea6387"><gtr:id>c89d4044ab88a2eb9388ffcbffea6387</gtr:id><gtr:otherNames>Cathcart Burn T</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2017-01-01</gtr:date><gtr:outcomeId>5a66fe14b02be8.12898980</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>178CF73E-BDD3-4FAF-918C-444A37B50A69</gtr:id><gtr:title>Higher-Order Model Checking: An Overview</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/11e88221c692f0663e9e51b36dd0258d"><gtr:id>11e88221c692f0663e9e51b36dd0258d</gtr:id><gtr:otherNames>Ong L</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2015-01-01</gtr:date><gtr:outcomeId>56e05db14bb845.47365108</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>089C8C96-8CED-4680-9972-7EA187E15EB9</gtr:id><gtr:title>Denotational validation of higher-order Bayesian inference</gtr:title><gtr:parentPublicationTitle>Proceedings of the ACM on Programming Languages</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/4eb1ccc2fdc68cbe344ae7df614ef6ae"><gtr:id>4eb1ccc2fdc68cbe344ae7df614ef6ae</gtr:id><gtr:otherNames>Scibior A</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2017-01-01</gtr:date><gtr:outcomeId>5a6f301a325364.50930001</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>6BC724D8-177C-4576-B645-019E72903F16</gtr:id><gtr:title>Collapsible Pushdown Automata and Recursion Schemes</gtr:title><gtr:parentPublicationTitle>ACM Transactions on Computational Logic</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/63d8a16bab9938c67b533027115c71c0"><gtr:id>63d8a16bab9938c67b533027115c71c0</gtr:id><gtr:otherNames>Hague M</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2017-01-01</gtr:date><gtr:issn>1529-3785</gtr:issn><gtr:outcomeId>5a35194cafb503.72958902</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>D11B3769-903E-420A-8ED5-FE87CC4543CB</gtr:id><gtr:title>Nondeterminism in Game Semantics via Sheaves</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/c493f127a788df6a02e0d36de362ace5"><gtr:id>c493f127a788df6a02e0d36de362ace5</gtr:id><gtr:otherNames>Tsukada T</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2015-01-01</gtr:date><gtr:outcomeId>56e05db1aad773.00091332</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/M023974/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>