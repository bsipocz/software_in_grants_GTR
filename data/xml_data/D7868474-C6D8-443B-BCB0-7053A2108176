<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations/><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/D5337A10-AC8A-402A-8164-C5F9CC6B0140"><gtr:id>D5337A10-AC8A-402A-8164-C5F9CC6B0140</gtr:id><gtr:name>Queen Mary, University of London</gtr:name><gtr:department>Computer Science</gtr:department><gtr:address><gtr:line1>Mile End Road</gtr:line1><gtr:line4>London</gtr:line4><gtr:postCode>E1 4NS</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/D5337A10-AC8A-402A-8164-C5F9CC6B0140"><gtr:id>D5337A10-AC8A-402A-8164-C5F9CC6B0140</gtr:id><gtr:name>Queen Mary, University of London</gtr:name><gtr:address><gtr:line1>Mile End Road</gtr:line1><gtr:line4>London</gtr:line4><gtr:postCode>E1 4NS</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/5C67C667-B4C0-4FDC-A9CA-1451BBB60638"><gtr:id>5C67C667-B4C0-4FDC-A9CA-1451BBB60638</gtr:id><gtr:firstName>Dino</gtr:firstName><gtr:surname>Distefano</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FG006245%2F1"><gtr:id>D7868474-C6D8-443B-BCB0-7053A2108176</gtr:id><gtr:title>Adaptive Heap Analysis</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Research Grant</gtr:grantCategory><gtr:grantReference>EP/G006245/1</gtr:grantReference><gtr:abstractText>Software is a key element of modern life. It is pervasive and controls manyfundamental services and systems our society depends upon. Therefore high qualitysoftware is absolutely vital. Unfortunately, however, software nearly alwayscontains mistakes - called bugs - and therefore misbehaves. These bugs are due to the size and complexity of the code: modern code is so large and complicatedthat today's technology cannot detect many of them.One of the major source of complexity in real-life code is the intensive use of dynamic allocated memory (called the heap) for storing important data structures.But programming error in the use of the heap is notoriously difficult to avoid and even detect.Heap analyses (often called shape analyses) are program analyses meant to give accurate resultsfor programs using the heap. Having to reason about pointers,heap analysis is one of the hardest kinds of program analysis, and is considered a major open problem.Many program analyses (e.g. those addressing numerical properties) areboth fully automatic and general, therefore providing meaningfulresults for most programs. This is unfortunately not true in the caseof heap analysis. Currently, most of them are ad-hoc and work only for ahand-full of specific (hard-wired) data structures.If a program happens not to use one of these structures imprecise (useless) results will be delivered. This is a problem because the variety of data structures used in real software is great.It makes heap analysis in practice non-automatic: from program to program new tailored techniquesneed to be designed. In turn, this makes its cost of application prohibitive. Thus, poor generality and automation are major factorshindering the application of heap analysis to verification of real programs.This project aims to address these issues, which are on the criticalpath to making heap analysis applicable outside academia. It proposesto develop methodologies to make an analysis adapt on-the-flyto the data structures of the analysed program. Adaptation can providethe necessary flexibility and generality to make heap analysis automatic.Success in this project will provide significant steps towards theapplication of automatic analysis techniques to verification of substantial, real-world code.</gtr:abstractText><gtr:fund><gtr:end>2012-02-16</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2009-02-17</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>253049</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs/><gtr:disseminationOutputs/><gtr:exploitationOutputs/><gtr:furtherFundingOutputs/><gtr:impactSummaryOutputs><gtr:impactSummaryOutput><gtr:description>The result of the research contributed to the main product 
developed by a start-up (Monoidics ltd) that me and my collaborators founded. The start-up was then acquired by Facebook and now the research developed in this grant is used daily in Facebook and other companies.</gtr:description><gtr:id>C837E620-52CF-492D-86B4-024436FB1DE6</gtr:id><gtr:impactTypes><gtr:impactType>Economic</gtr:impactType></gtr:impactTypes><gtr:outcomeId>56dcc164308ed4.10956231</gtr:outcomeId><gtr:sector>Digital/Communication/Information Technologies (including Software)</gtr:sector></gtr:impactSummaryOutput></gtr:impactSummaryOutputs><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>Real life code powering the computers used everyday by millions

of people (such as open source code) makes intensive use of

dynamic allocated data structures. But programming error in the

use of these structures is notoriously difficult to avoid and

even detect. Deep-heap analyses (often called shape analyses)

are program analyses meant to give accurate results for programs

using dynamic allocated data structures. Having to reason about

pointers, deep-heap analysis is one of the hardest kinds of

program analysis, and is considered a major open problem.



Many program analyses (e.g. those addressing numerical

properties) are both fully automatic and general, therefore

providing meaningful results for most programs. This is

unfortunately not true in the case of deep-heap analysis which

work moslty for a handful of specific, hard-wired data

structures. If a program happens not to use one of these

structures useless results will be delivered.



This project aimed to address these issues, which are on the

critical path to making shape analysis applicable in real world

programs. We have developed methodologies 

to make shape analysis scale to industrial size software and 

to facilitate an analysis to adapt to the data structures of the analysed

program. Adaptation provides the necessary flexibility and

generality to make shape analysis more automatic.</gtr:description><gtr:exploitationPathways>The finding are currently used in industry.</gtr:exploitationPathways><gtr:id>01B5C86A-00A9-415E-9530-10998DFB87B9</gtr:id><gtr:outcomeId>r-9297195262.55242277960304</gtr:outcomeId><gtr:sectors><gtr:sector>Digital/Communication/Information Technologies (including Software)</gtr:sector></gtr:sectors></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs/><gtr:spinOutOutputs><gtr:spinOutOutput><gtr:companyName>Monoidics</gtr:companyName><gtr:description>Start-up developing an automatic software analyzer able to find subtle bugs in industrial software</gtr:description><gtr:id>47B4592B-2D75-482F-8910-A25B6C7C32A4</gtr:id><gtr:impact>The company had several industrial clients using its product. Then the company was acquired by Facebook that now daily uses Monoidics software.</gtr:impact><gtr:outcomeId>56dcc4a984deb6.72017388</gtr:outcomeId><gtr:yearCompanyFormed>2009</gtr:yearCompanyFormed></gtr:spinOutOutput></gtr:spinOutOutputs></gtr:output><gtr:publications><gtr:publication><gtr:id>FB84B77C-B7CB-4B58-B4C9-94251EBCD54F</gtr:id><gtr:title>Compositional Shape Analysis by Means of Bi-Abduction</gtr:title><gtr:parentPublicationTitle>Journal of the ACM</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/f16d98c6c088408dcf7cd02f629624f7"><gtr:id>f16d98c6c088408dcf7cd02f629624f7</gtr:id><gtr:otherNames>Calcagno C</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2011-01-01</gtr:date><gtr:outcomeId>doi_53d075075269fad6</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>A2C4EC69-9B78-4943-BBF2-91C67F5BB7A7</gtr:id><gtr:title>Compositional shape analysis by means of bi-abduction</gtr:title><gtr:parentPublicationTitle>ACM SIGPLAN Notices</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/f16d98c6c088408dcf7cd02f629624f7"><gtr:id>f16d98c6c088408dcf7cd02f629624f7</gtr:id><gtr:otherNames>Calcagno C</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2009-01-01</gtr:date><gtr:outcomeId>54649afb065630.81340874</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/G006245/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>