<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations><gtr:collaborator url="http://gtr.ukri.org:80/organisation/FEA99D62-F3F5-4841-A426-458315CA704B"><gtr:id>FEA99D62-F3F5-4841-A426-458315CA704B</gtr:id><gtr:name>Xilinx Corp</gtr:name><gtr:address><gtr:line1>2100 Logic Drive</gtr:line1><gtr:line4>San Jose</gtr:line4><gtr:line5>California 95124-3400</gtr:line5><gtr:region>Outside UK</gtr:region><gtr:country>United States</gtr:country></gtr:address></gtr:collaborator></gtr:collaborations><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/46387D84-F71E-4B7D-8C7D-9C288F113510"><gtr:id>46387D84-F71E-4B7D-8C7D-9C288F113510</gtr:id><gtr:name>Imperial College London</gtr:name><gtr:department>Electrical and Electronic Engineering</gtr:department><gtr:address><gtr:line1>South Kensington Campus</gtr:line1><gtr:line2>Exhibition Road</gtr:line2><gtr:line4>London</gtr:line4><gtr:postCode>SW7 2AZ</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/46387D84-F71E-4B7D-8C7D-9C288F113510"><gtr:id>46387D84-F71E-4B7D-8C7D-9C288F113510</gtr:id><gtr:name>Imperial College London</gtr:name><gtr:address><gtr:line1>South Kensington Campus</gtr:line1><gtr:line2>Exhibition Road</gtr:line2><gtr:line4>London</gtr:line4><gtr:postCode>SW7 2AZ</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/FEA99D62-F3F5-4841-A426-458315CA704B"><gtr:id>FEA99D62-F3F5-4841-A426-458315CA704B</gtr:id><gtr:name>Xilinx Corp</gtr:name><gtr:address><gtr:line1>2100 Logic Drive</gtr:line1><gtr:line4>San Jose</gtr:line4><gtr:line5>California 95124-3400</gtr:line5><gtr:region>Outside UK</gtr:region><gtr:country>United States</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>COLLABORATOR</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/8E812EA4-FF91-4260-8932-2DCD94134B3E"><gtr:id>8E812EA4-FF91-4260-8932-2DCD94134B3E</gtr:id><gtr:firstName>George</gtr:firstName><gtr:otherNames>Anthony</gtr:otherNames><gtr:surname>Constantinides</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FK015168%2F1"><gtr:id>75E95849-A08B-44CD-8DF4-4249BB36826D</gtr:id><gtr:title>Codesign: A higher-order approach</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Research Grant</gtr:grantCategory><gtr:grantReference>EP/K015168/1</gtr:grantReference><gtr:abstractText>Current computing architectures are moving increasingly towards
heterogeneity, as physical limitations of scale demand a
bifurcation of optimisation techniques between reducing latency and
increasing throughput. In the past, the amount of heterogeneity in
devices tended to be limited, therefore RTL were largely suitable for for
hardware design. However, recently there has been a surge
of industrial interest in hybrid programmable hardware-software systems.
For example, Xilinx has recently launched the
Zynq platform which combines a multicore ARM processor with programmable
logic. This development thrusts the question
of design for such hybrid systems, requiring different programming
methodologies, into the foreground.

In general, as architectures move away from the conventional CPU and RAM
(von Neumann) model, the task of devising
programming models for them falls mostly with their designers, who are
usually engineers rather than programming
language experts. As a result we are witnessing a flurry of
architecture-specific languages (ASL), reminiscent of the early
days of computation when each computer came with its own operating system,
programming language, etc. Whereas ASLs
are unavoidable, good programming methodology recommends that they should
be used primarily for the development of
system-level infrastructure. The application-level, algorithmic
programming should happen as much as possible in portable,
machine-independent languages. These lessons are very well known in the
programming community and this knowledge
can be profitably used in electronic design. We aim to address this
problem.

The challenge of heterogeneous codesign is both quantitative and
qualitative. A program has components that must be
compiled into the FPGA fabric and others to be compiled for the CPU. The
reasons are either efficiency (certain
architectures are better at running certain types or code) or physical
constraints (interactions with other components in a
complex design, availability of IP cores, drivers or libraries). But a
program may also have components which can be
compiled to either architecture or both. A choice must be made and it is
reasonable for this choice to be also motivated by
efficiency.

In this proposal we will combine and unify the way type systems in
higher-level languages specify and solve qualitative
(hard) constraints with quantitative optimisation techniques.
Specifically, we will investigate the optimization of memory
subsystems to support parallel access, by combining knowledge of memory
access patterns from the code, resulting in
highly efficient programmable memory controllers. In addition, we will
optimize the allocation of precision within a combined
hardware/software system in order to achieve an accuracy specification
while taking into account the capability and cost
implications of the programmable hardware and native data types supported
in the software. This combined approach can
work both at the source code level (program transformations motivated by
underlying cost models) and at the synthesisedmachine code and HDL level
(pipelined optimisations, etc). We will use a &amp;quot;game semantic&amp;quot; model,
already successfully
applied to hardware synthesis from higher order languages, to establish
the correctness properties of the type system and
to drive the compilation process.</gtr:abstractText><gtr:fund><gtr:end>2016-12-28</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2013-06-29</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>297109</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs><gtr:collaborationOutput><gtr:collaboratingOrganisation>Xilinx Corp</gtr:collaboratingOrganisation><gtr:country>United States of America</gtr:country><gtr:description>Xilinx Inc (Corporate HQ)</gtr:description><gtr:id>D64FEC64-412E-49BB-8D40-A7F58E2E240C</gtr:id><gtr:outcomeId>b9b1b03eb9b1b05c-1</gtr:outcomeId><gtr:sector>Private</gtr:sector><gtr:start>2005-01-01</gtr:start></gtr:collaborationOutput></gtr:collaborationOutputs><gtr:disseminationOutputs/><gtr:exploitationOutputs/><gtr:furtherFundingOutputs/><gtr:impactSummaryOutputs><gtr:impactSummaryOutput><gtr:description>To explore alternative methods of design capture bridging hardware and software</gtr:description><gtr:firstYearOfImpact>2014</gtr:firstYearOfImpact><gtr:id>C8B315B4-6C79-4680-A4FF-591229CFA8A9</gtr:id><gtr:impactTypes><gtr:impactType>Economic</gtr:impactType></gtr:impactTypes><gtr:outcomeId>56b48406d19278.68675992</gtr:outcomeId><gtr:sector>Digital/Communication/Information Technologies (including Software),Electronics</gtr:sector></gtr:impactSummaryOutput></gtr:impactSummaryOutputs><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>That linking / late binding is a feasible approach in codesign, if underpinned by an appropriate type system.</gtr:description><gtr:exploitationPathways>To improve the synthesis of hardware / software systems</gtr:exploitationPathways><gtr:id>EB76523E-2276-4033-A393-8F9F192C73C4</gtr:id><gtr:outcomeId>56b484683c7b10.90379132</gtr:outcomeId><gtr:sectors><gtr:sector>Digital/Communication/Information Technologies (including Software),Electronics</gtr:sector></gtr:sectors></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs/><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>54D8F50D-1CA3-40DE-8F60-8AFD51E72EB9</gtr:id><gtr:title>PushPush: Seamless integration of hardware and software objects via function calls over AXI</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/d2a90f244a13c3decd48858c859a84ea"><gtr:id>d2a90f244a13c3decd48858c859a84ea</gtr:id><gtr:otherNames>Fleming S</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2015-01-01</gtr:date><gtr:outcomeId>56b4820b252d42.43176366</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/K015168/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>50</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic><gtr:researchTopic><gtr:id>1E31C833-3A35-4F54-A499-31D0C245B5D5</gtr:id><gtr:percentage>50</gtr:percentage><gtr:text>System on Chip</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>