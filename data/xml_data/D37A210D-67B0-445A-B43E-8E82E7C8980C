<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations/><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/3EAE04CA-9D62-4483-B9C4-F91AD9F4C5A9"><gtr:id>3EAE04CA-9D62-4483-B9C4-F91AD9F4C5A9</gtr:id><gtr:name>University of Oxford</gtr:name><gtr:department>Computer Science</gtr:department><gtr:address><gtr:line1>University Chest</gtr:line1><gtr:line2>Wellington Square</gtr:line2><gtr:line4>Oxford</gtr:line4><gtr:postCode>OX1 2JD</gtr:postCode><gtr:region>South East</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/3EAE04CA-9D62-4483-B9C4-F91AD9F4C5A9"><gtr:id>3EAE04CA-9D62-4483-B9C4-F91AD9F4C5A9</gtr:id><gtr:name>University of Oxford</gtr:name><gtr:address><gtr:line1>University Chest</gtr:line1><gtr:line2>Wellington Square</gtr:line2><gtr:line4>Oxford</gtr:line4><gtr:postCode>OX1 2JD</gtr:postCode><gtr:region>South East</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/638AB5BB-E166-492A-8470-04650A3271EF"><gtr:id>638AB5BB-E166-492A-8470-04650A3271EF</gtr:id><gtr:name>Codeplay Software Ltd</gtr:name><gtr:address><gtr:line1>2nd Floor</gtr:line1><gtr:line2>45 York Place</gtr:line2><gtr:line4>Edinburgh</gtr:line4><gtr:postCode>EH1 3HP</gtr:postCode><gtr:region>Scotland</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/46387D84-F71E-4B7D-8C7D-9C288F113510"><gtr:id>46387D84-F71E-4B7D-8C7D-9C288F113510</gtr:id><gtr:name>Imperial College London</gtr:name><gtr:address><gtr:line1>South Kensington Campus</gtr:line1><gtr:line2>Exhibition Road</gtr:line2><gtr:line4>London</gtr:line4><gtr:postCode>SW7 2AZ</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/749528A8-4F65-41C4-8474-BBAA74D2ED37"><gtr:id>749528A8-4F65-41C4-8474-BBAA74D2ED37</gtr:id><gtr:firstName>Alastair</gtr:firstName><gtr:otherNames>Francis</gtr:otherNames><gtr:surname>Donaldson</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FG051100%2F1"><gtr:id>D37A210D-67B0-445A-B43E-8E82E7C8980C</gtr:id><gtr:title>Advanced Formal Verification Techniques for Heterogeneous Multi-core Programming</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Fellowship</gtr:grantCategory><gtr:grantReference>EP/G051100/1</gtr:grantReference><gtr:abstractText>Heterogeneous multi-core processors are key to complex computational problems such as real-time medical imaging, financial analysis and high-definition video, because of the increased processing power they make available. The reliability and probity of such applications is of critical importance, yet heterogeneous multi-core processors are notoriously difficult to program correctly. There is a need for analysis and verification techniques to help detect and fix errors early in the design of multi-core software. The development of such techniques is the aim of the proposed Fellowship research.The research will involve extending the capabilities of existing theoretical computer science techniques based on typechecking and model checking. Typechecking is a commonly used lightweight method for eliminating errors in computer programs: a basic typechecker will reject an invalid expression such as Hello + 1. More complex typechecking, based on session types , can allow a protocol between two parties in a system to be automatically checked. One part of the Fellowship research will involve extending the notion of session types to be applicable to heterogeneous multi-core processors. New typechecking methods will also be developed to help programmers deal with complex issues arising from the management of separate memory spaces in multi-core systems.Model checking is a technique for verifying hardware and software systems which attempts to find system bugs by checking an abstract model of the system. Model checking is less widely used than typechecking, but model checking techniques have recently been incorporated in software products from major vendors such as Microsoft. A major part of the fellowship research will involve developing advanced model checking techniques to help find errors associated with the dynamic behaviour of software for heterogeneous multi-core processors.Part of the research will involve developing a set of open-source tools based on the novel formal analysis techniques. Experience has shown that developers interested in multi-core programming are reluctant to adopt new languages and formalisms, and will only consider new techniques if they are easy and intuitive to use, and can be integrated into an existing development tool-chain. To increase the potential for eventual adoption by industry, the new techniques developed during the Fellowship research will involve regular input and advice from Codeplay Software Ltd., a UK based company specialising in development tools for multi-core processors.</gtr:abstractText><gtr:fund><gtr:end>2011-09-01</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2009-05-26</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>235502</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs/><gtr:disseminationOutputs/><gtr:exploitationOutputs/><gtr:furtherFundingOutputs><gtr:furtherFundingOutput><gtr:amountPounds>271400</gtr:amountPounds><gtr:country>United States of America</gtr:country><gtr:currCode>USD</gtr:currCode><gtr:currCountryCode>Ecuador</gtr:currCountryCode><gtr:currLang>es_EC</gtr:currLang><gtr:description>Intel Research Office</gtr:description><gtr:end>2016-04-02</gtr:end><gtr:fundingOrg>Intel Corporation</gtr:fundingOrg><gtr:id>ACEC9F94-4249-43BD-9848-9C0183B6B12F</gtr:id><gtr:outcomeId>5465db49350954.01006016</gtr:outcomeId><gtr:sector>Private</gtr:sector><gtr:start>2013-05-01</gtr:start></gtr:furtherFundingOutput><gtr:furtherFundingOutput><gtr:amountPounds>600000</gtr:amountPounds><gtr:country>European Union (EU)</gtr:country><gtr:currCode>EUR</gtr:currCode><gtr:currCountryCode>Austria</gtr:currCountryCode><gtr:currLang>de_AT</gtr:currLang><gtr:description>FP7</gtr:description><gtr:end>2015-02-02</gtr:end><gtr:fundingOrg>European Commission</gtr:fundingOrg><gtr:fundingRef>287767</gtr:fundingRef><gtr:id>E8A913A3-225B-490D-AE1C-F3956C03735F</gtr:id><gtr:outcomeId>5465daaa5ac9f0.67522841</gtr:outcomeId><gtr:sector>Public</gtr:sector><gtr:start>2011-11-01</gtr:start></gtr:furtherFundingOutput></gtr:furtherFundingOutputs><gtr:impactSummaryOutputs/><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>During the Fellowship I developed:
- Automatic methods for analysing software that uses &amp;quot;scratchpad&amp;quot; memory (for instance, software for the Cell Broadband Engine processor)
- An extension of &amp;quot;k-induction&amp;quot;, a popular method for hardware verification, to the software realm
- A method for applying &amp;quot;predicate abstraction&amp;quot; to concurrent programs
All these techniques were implemented in software tools that can be used by the research community.</gtr:description><gtr:exploitationPathways>All of the techniques developed during the Fellowship are avaialble as open source software tools, which can be used by industry and by other researchers.

The publications arising fom the Fellowship, at high profile conferences, also allow the work to be taken forward by the research community.</gtr:exploitationPathways><gtr:id>99A396B9-8776-4FD5-AC10-B3A6820A6D5F</gtr:id><gtr:outcomeId>545cd70d8c3f98.43648732</gtr:outcomeId><gtr:sectors><gtr:sector>Digital/Communication/Information Technologies (including Software),Education</gtr:sector></gtr:sectors></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs/><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>68A7DF04-70D9-46B7-93E3-B51679348DE0</gtr:id><gtr:title>Automatic Verification of Message-Based Device Drivers</gtr:title><gtr:parentPublicationTitle>Electronic Proceedings in Theoretical Computer Science</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/8150ff11231bfab59af8ede606021dfe"><gtr:id>8150ff11231bfab59af8ede606021dfe</gtr:id><gtr:otherNames>Amani S</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2012-01-01</gtr:date><gtr:outcomeId>54363b550656f2.37608634</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>FDCC1729-11A8-40C0-B648-7565B48A0459</gtr:id><gtr:title>Automatic analysis of DMA races using model checking and k-induction</gtr:title><gtr:parentPublicationTitle>Formal Methods in System Design</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/4d31bd5c118828012549edcb29f8a90c"><gtr:id>4d31bd5c118828012549edcb29f8a90c</gtr:id><gtr:otherNames>Donaldson A</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2011-01-01</gtr:date><gtr:outcomeId>54363b553e7626.71813992</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>8A8E35F5-1589-4C8C-BE1B-081193DB7E75</gtr:id><gtr:title>Automatic Offloading of C++ for the Cell BE Processor: A Case Study Using Offload</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/4d31bd5c118828012549edcb29f8a90c"><gtr:id>4d31bd5c118828012549edcb29f8a90c</gtr:id><gtr:otherNames>Donaldson A</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2010-01-01</gtr:date><gtr:isbn>978-1-4244-5917-9</gtr:isbn><gtr:outcomeId>54363ca74b1246.15127266</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>225335F0-7D4C-4416-A0B1-67439DFC93E8</gtr:id><gtr:title>Safe asynchronous multicore memory operations</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/db22836603f52f63e04f0bc4094f7766"><gtr:id>db22836603f52f63e04f0bc4094f7766</gtr:id><gtr:otherNames>Botincan M</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2011-01-01</gtr:date><gtr:isbn>978-1-4577-1638-6</gtr:isbn><gtr:outcomeId>54363ca58a99a7.78260851</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>903DD076-0EDA-43F5-A9B6-5077436A5526</gtr:id><gtr:title>Replication and Abstraction: Symmetry in Automated Formal Verification</gtr:title><gtr:parentPublicationTitle>Symmetry</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/ecb5f81843a97db79133b4b3edd90f35"><gtr:id>ecb5f81843a97db79133b4b3edd90f35</gtr:id><gtr:otherNames>Wahl T</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2010-01-01</gtr:date><gtr:outcomeId>54363ca71415c7.95060988</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>33834877-DA4B-40C9-A1AC-BC33060D8633</gtr:id><gtr:title>Type inference and strong static type checking for Promela</gtr:title><gtr:parentPublicationTitle>Science of Computer Programming</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/4d31bd5c118828012549edcb29f8a90c"><gtr:id>4d31bd5c118828012549edcb29f8a90c</gtr:id><gtr:otherNames>Donaldson A</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2010-01-01</gtr:date><gtr:outcomeId>54363ca6d4f108.62366787</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>B1CE1F62-9125-43F2-BB4F-D76226B20A3D</gtr:id><gtr:title>Counterexample-guided abstraction refinement for symmetric concurrent programs</gtr:title><gtr:parentPublicationTitle>Formal Methods in System Design</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/4d31bd5c118828012549edcb29f8a90c"><gtr:id>4d31bd5c118828012549edcb29f8a90c</gtr:id><gtr:otherNames>Donaldson A</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2012-01-01</gtr:date><gtr:outcomeId>54363b545260e1.53806505</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/G051100/1</gtr:identifier></gtr:identifiers><gtr:projectHierarchy><gtr:parents><gtr:parent><gtr:id>D37A210D-67B0-445A-B43E-8E82E7C8980C</gtr:id><gtr:grantRef>EP/G051100/1</gtr:grantRef><gtr:amount>235502.19</gtr:amount><gtr:start>2009-05-26</gtr:start><gtr:end>2011-09-01</gtr:end><gtr:children><gtr:child rel="Transfer"><gtr:id>588D7186-1869-458A-AC0D-A23A93E4790F</gtr:id><gtr:grantRef>EP/G051100/2</gtr:grantRef><gtr:amount>64241.63</gtr:amount><gtr:start>2011-11-01</gtr:start><gtr:end>2012-07-31</gtr:end><gtr:children/></gtr:child></gtr:children></gtr:parent></gtr:parents></gtr:projectHierarchy><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>70</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic><gtr:researchTopic><gtr:id>E05CFE0B-163D-412D-A3C2-28E89B2CA336</gtr:id><gtr:percentage>30</gtr:percentage><gtr:text>Software Engineering</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>