<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations/><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/46387D84-F71E-4B7D-8C7D-9C288F113510"><gtr:id>46387D84-F71E-4B7D-8C7D-9C288F113510</gtr:id><gtr:name>Imperial College London</gtr:name><gtr:department>Dept of Computing</gtr:department><gtr:address><gtr:line1>South Kensington Campus</gtr:line1><gtr:line2>Exhibition Road</gtr:line2><gtr:line4>London</gtr:line4><gtr:postCode>SW7 2AZ</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/46387D84-F71E-4B7D-8C7D-9C288F113510"><gtr:id>46387D84-F71E-4B7D-8C7D-9C288F113510</gtr:id><gtr:name>Imperial College London</gtr:name><gtr:address><gtr:line1>South Kensington Campus</gtr:line1><gtr:line2>Exhibition Road</gtr:line2><gtr:line4>London</gtr:line4><gtr:postCode>SW7 2AZ</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/5AE2FAD2-208D-4909-9F09-F2D642F32A75"><gtr:id>5AE2FAD2-208D-4909-9F09-F2D642F32A75</gtr:id><gtr:firstName>Cristian</gtr:firstName><gtr:surname>Cadar</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FN007166%2F1"><gtr:id>7C837575-718D-4018-B0BF-E34492A234EA</gtr:id><gtr:title>Improving Symbolic Execution via Targeted Program Transformations</gtr:title><gtr:status>Active</gtr:status><gtr:grantCategory>Research Grant</gtr:grantCategory><gtr:grantReference>EP/N007166/1</gtr:grantReference><gtr:abstractText>Dynamic symbolic execution (DSE) has gained tremendous popularity in the last decade, becoming part of the standard toolbox of techniques in many computer science fields including software engineering, programming languages, software testing, verification, security, and computer systems. The technique has enabled a wide range of applications, including the automatic detection of bugs and security vulnerabilities, recovery of corrupt documents, patch generation, and automatic debugging, among many others.

The effectiveness and scalability of DSE is highly dependent on the structure of the program. That is, semantically-equivalent programs can differ substantially with respect to the effectiveness of DSE to explore the program state space. As a result, this project aims to discover and design automatic semantics-preserving program transformations that improve the scalability of DSE.</gtr:abstractText><gtr:potentialImpactText>The primary non-academic beneficiaries of the proposed research are software companies and the open-source software community. It is well known that software bugs have a large negative impact on the global economy. For example, a report published by the US National Institute of Standards and Technology (NIST) in 2002 found that software bugs cost annually the US economy an estimated $60 billion dollars or 0.6 percent of the gross domestic product, and a recent study from the University of Cambridge estimated the worldwide cost of debugging at $312 billion dollars per year.

As a result, we are witnessing a sustained effort directed toward developing automatic techniques for finding software errors. The current generation of commercial tools use static analysis technology, i.e. they try to find bugs by inspecting the program source code, without actually running the program. While helpful, static analysis is limited in the types of bugs that it can find (e.g., none of the static analysis products on the market today could find the recent Heartbleed vulnerability) and produces false reports, which limits its usefulness. For an additional overhead many times acceptable in practice, dynamic symbolic execution (DSE) can often overcome these limitations, and has already shown promise in industry, with many corporations such as IBM, Fujitsu and Microsoft using it internally. However, DSE still presents significant scalability challenges, which prevent its widespread adoption. This research project could bring significant scalability improvements to DSE, potentially leading to large reductions in the costs associated with software errors and debugging.

Our goal is to disseminate the results of this research from an early stage onwards through a variety of mechanisms: (1) by open-sourcing most of our code to be used directly by software developers on their code; (2) by applying these prototypes to open-source applications to demonstrate the effectiveness of our approach; (3) by communicating the results of our research to the non-academic user community via meetings, extended visits and an engagement workshop; (4) by considering commercialisation opportunities and (5) by teaching and training.</gtr:potentialImpactText><gtr:fund><gtr:end>2019-01-10</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2016-01-11</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>286469</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs/><gtr:disseminationOutputs><gtr:disseminationOutput><gtr:description>INVEST workshop</gtr:description><gtr:form>Participation in an activity, workshop or similar</gtr:form><gtr:geographicReach>Regional</gtr:geographicReach><gtr:id>A3FD45AA-92DE-472B-9950-54702C3A7DA9</gtr:id><gtr:impact>The Introduction to Verification and Testing (INVEST) workshop takes place in the Department of Computing, Imperial College London on an annual basis, jointly organised by Cadar, Donaldson and Gardner. The aim of the workshop is to introduce young researchers, and students potentially interested in research careers, to the fields of software verification and testing.</gtr:impact><gtr:outcomeId>58b850ba5ab720.21099887</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Undergraduate students</gtr:primaryAudience><gtr:url>http://invest.doc.ic.ac.uk</gtr:url><gtr:year>2014,2015,2017</gtr:year></gtr:disseminationOutput></gtr:disseminationOutputs><gtr:exploitationOutputs/><gtr:furtherFundingOutputs/><gtr:impactSummaryOutputs/><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>Our initial work supported by this grant has resulted in an effective technique for accelerating symbolic execution for programs that use large arrays. In turn, this enables faster testing of complex programs and allows the testing of program paths that would have been otherwise unreachable during symbolic execution.</gtr:description><gtr:exploitationPathways>Symbolic execution has gathered significant attention from both academia and industry as an effective way to test and verify software. A major bottleneck in symbolic execution has been constraint solving, which is slow, particularly when large arrays are involved. This technique partially addresses this bottleneck and could allow researchers and developers to use symbolic execution for larger and more complex programs.</gtr:exploitationPathways><gtr:id>A166D2DB-57AE-443C-A8B9-B1320C803DE5</gtr:id><gtr:outcomeId>58c12b5dd3a608.36911147</gtr:outcomeId><gtr:sectors><gtr:sector>Digital/Communication/Information Technologies (including Software)</gtr:sector></gtr:sectors></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs/><gtr:spinOutOutputs/></gtr:output><gtr:publications/><gtr:identifiers><gtr:identifier type="RCUK">EP/N007166/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>50</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic><gtr:researchTopic><gtr:id>E05CFE0B-163D-412D-A3C2-28E89B2CA336</gtr:id><gtr:percentage>50</gtr:percentage><gtr:text>Software Engineering</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>