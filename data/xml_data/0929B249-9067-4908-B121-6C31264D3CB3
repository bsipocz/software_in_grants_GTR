<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations/><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/3A5E126D-C175-4730-9B7B-E6D8CF447F83"><gtr:id>3A5E126D-C175-4730-9B7B-E6D8CF447F83</gtr:id><gtr:name>University College London</gtr:name><gtr:department>Computer Science</gtr:department><gtr:address><gtr:line1>Gower Street</gtr:line1><gtr:line4>London</gtr:line4><gtr:postCode>WC1E 6BT</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/3A5E126D-C175-4730-9B7B-E6D8CF447F83"><gtr:id>3A5E126D-C175-4730-9B7B-E6D8CF447F83</gtr:id><gtr:name>University College London</gtr:name><gtr:address><gtr:line1>Gower Street</gtr:line1><gtr:line4>London</gtr:line4><gtr:postCode>WC1E 6BT</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/A1FA5E2C-705B-4A74-9596-1A1CAC2A8375"><gtr:id>A1FA5E2C-705B-4A74-9596-1A1CAC2A8375</gtr:id><gtr:name>IBM</gtr:name><gtr:address><gtr:line1>IBM Corporation</gtr:line1><gtr:line2>1 New Orchard Road</gtr:line2><gtr:line4>Armonk</gtr:line4><gtr:line5>NY 10504-1722</gtr:line5><gtr:region>Outside UK</gtr:region><gtr:country>United States</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/343A4263-378A-4C2E-8DE3-01C0A10FB07A"><gtr:id>343A4263-378A-4C2E-8DE3-01C0A10FB07A</gtr:id><gtr:name>Monoidics Ltd</gtr:name><gtr:address><gtr:line1>Unit 121, Rosden House</gtr:line1><gtr:line2>372 Old Street</gtr:line2><gtr:postCode>EC1V 9AU</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/0D364A63-C6B9-4316-8B8F-0F3248323102"><gtr:id>0D364A63-C6B9-4316-8B8F-0F3248323102</gtr:id><gtr:firstName>Jade</gtr:firstName><gtr:surname>Alglave</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FK039431%2F1"><gtr:id>0929B249-9067-4908-B121-6C31264D3CB3</gtr:id><gtr:title>Partial order semantics for concurrent program verification</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Research Grant</gtr:grantCategory><gtr:grantReference>EP/K039431/1</gtr:grantReference><gtr:abstractText>Multiprocessor machines are now predominant, as most laptops, desktops,
servers, mobile phones and aircrafts routinely have multiple to many cores.
Unfortunately, concurrent programming is error-prone, which now affects
everyone given this trend towards more and more concurrency.

Let us mention for example a recent concurrency bug found in the PostgreSQL
database (see
http://archives.postgresql.org/pgsql-hackers/2011-08/msg00330.php). PostgreSQL
is one of the most popular database nowadays, and many websites rely on its
correct functioning. This bug was particularly difficult to observe (and
indeed is not fixed yet) because it only occurred on a multicore machine, and a
particular hardware platform, IBM Power.

Reproducing such bugs is as hard as observing them; thus testing can hardly
discover them. To prove a program free of errors, we would like to devise
automated techniques that analyse the code without executing it. Thus,
we can relieve programmers from the burden of writing the proofs of their
programs.

Yet, automatic verification of concurrent programs represents a challenge,
whether it aims at proving the full correctness of a program (e.g. a
program sorting a list actually sorts the list), or at checking specific
properties (e.g. the program is free of data races) short of full
correctness. We focus here on the latter: we would like to enhance
the scalability of tools checking that a concurrent program does not violate
certain safety-critical properties of interest.

We would like to show that scalable automatic verification can be achieved by
exploiting the rich history of partial orders for modeling concurrency.</gtr:abstractText><gtr:potentialImpactText>Verification of concurrent software is crucial to prevent safety-critical or
embedded devices to crash. Indeed, since these now routinely include multiple
cores, they rely on concurrent software for functioning.

This project will have impact on several communities: i) professional
programmers of concurrent software and ii) multiprocessors designers. Our
connections into the following companies constitute a way for the ideas to
impact industrial verification tools even in the short term.

IBM Austin is concerned with the design of multiprocessors. Jade has 
collaborative links with Derek Williams, a lead engineer in Austin. As the
letter of support from Derek indicates, this proposal is of great relevance to
industries like IBM, which strongly suggests potential impact, should the
project be successful. Meeting regularly with Derek's team will allow us to
discuss our design choices, in particular on the models and semantics sides,
with them.

Microsoft has significant verification presence, through its
Cambridge, Redmond and Bangalore labs, which could possibly be impacted by the
project. As an example, Jade's PhD student was invited by Akash Lal (MSR
Bangalore) to do an internship this summer, following a pre-publication of Jade
with her Oxford colleagues on verifying concurrent software running on weak
memory.

We plan on interacting regularly with MSR researchers, through visits and phone
conference. This will be facilitated by the fact that Jade is a member of the
Programming Principles, Logic and Verification group at UCL, which has strong
connections to the Cambridge lab: Byron Cook is both professor in the same
group at UCL, and a researcher at MSR Cambridge.

Monoidics is a London-based SME that markets a program analysis
tool. As the letter of support from Cristiano Calcagno indicates, Monoidics is
very interested in verification in general, and an effective treatment of
concurrency in particular. The ability to meet with Cristiano's team will
allow us to discuss our design choices, in particular on the tool side.

The UK Government has made clear that they view cybersecurity as important,
from the Cabinet Office Cybersecurity Strategy document in 2009, through a
parliamentary briefing note ``Cybersecurity in the UK'' in 2011, to the
Cybersecurity Challenge launched in 2012.

Our engagement within the public sector will be facilitated by the presence of
the CyberSecurity institute as UCL, recognised by EPSRC and GCHQ at UCL. See
also the Host Organisation Statement.

We believe that this proposal is of particular relevance to the EPSRC thematic
area of ``Global Uncertainties'', in the core area ``Cyber
Security''. Within EPSRC's ICT theme, this proposal fits naturally within
three of the areas highlighted as growing in the portfolio, namely
``Programming Languages and Compilers'', ``Software
Engineering'', and ``Verification and Correctness''. Citing the
portfolio, ``the involvement of researchers working in this area in the
cross-ICT priorities, particularly the Many-core Architectures and Concurrency
in Distributed and Embedded Systems, is essential.''. Within this priority, we
believe our proposal to follow the line spelled in EPSRC's portfolio, of
``form[ing] the bridge between the abstraction layers of computing
systems.''

We highlight the practicality of our proposal, which we believe is crucial to
leading high-impact research in the area. This meets the following excerpt of
the portfolio: ``a lack of these implementation activities as part of
research proposals is holding back the development of the area, slowing
industrial uptake and impact, and threatening the continued strength of the
UK's position. [...] Growth in this area will be targeted towards research
that goes beyond early-stage proof-of-concept developments to include more
rigorous evaluations and validations, with the implementation work they
require.''</gtr:potentialImpactText><gtr:fund><gtr:end>2016-02-25</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2014-02-26</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>97999</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs/><gtr:disseminationOutputs/><gtr:exploitationOutputs/><gtr:furtherFundingOutputs/><gtr:impactSummaryOutputs><gtr:impactSummaryOutput><gtr:description>Since my PhD (awarded 2010) my research and tools have applied to products by IBM, and ARM amongst others. 

More recently, I spent the summer of 2014 at Nvidia Redmond and Santa Clara, directly applying the results of my research to their products. Together with colleagues, we developed a model for a future Nvidia chip. I since then wrote their documentation, which demonstrates an incredible impact:
this whole line of work precisely started because the documentations for these chips were severely flawed. This shows that my line of research has reached the
point where we are able to repair the flaws that initiated it.

Similarly since end of 2015, I collaborate with the HSA consortium to model the GPU standard defined by them. Their official documentation features a core model written in my language, as well as an accompanying prose document written by me. We are since then working on extending the model to more advance features, in tandem with HSA.</gtr:description><gtr:firstYearOfImpact>2010</gtr:firstYearOfImpact><gtr:id>5EEC99AC-3BCE-42A0-833B-80BF6211B9F4</gtr:id><gtr:impactTypes><gtr:impactType>Economic</gtr:impactType></gtr:impactTypes><gtr:outcomeId>545cead2a9d492.91933978</gtr:outcomeId><gtr:sector>Digital/Communication/Information Technologies (including Software),Electronics</gtr:sector></gtr:impactSummaryOutput></gtr:impactSummaryOutputs><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>I have developed extensions of my work on CPU chips that now apply to GPU chips and programming languages. These extensions have been instrumental during my visit to Nvidia during the summer of 2014 (see Secondments).

Since 2015, I also have used my language (described in the paper Herding cats) to describe the standard defined by the HSA foundation (which comprises vendors such as AMD, ARM, Qualcomm, Samsung).</gtr:description><gtr:exploitationPathways>Our findings are embodied in tools which are available on the web. Moreover we have already applied them successfully at Nvidia and with HSA.</gtr:exploitationPathways><gtr:id>306D48A8-7F62-41EC-9587-2FF4787EAAB6</gtr:id><gtr:outcomeId>545cea1f197383.32353092</gtr:outcomeId><gtr:sectors><gtr:sector>Digital/Communication/Information Technologies (including Software),Education,Electronics,Energy,Environment,Manufacturing, including Industrial Biotechology</gtr:sector></gtr:sectors><gtr:url>http://www0.cs.ucl.ac.uk/staff/J.Alglave/</gtr:url></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs/><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>7ABAFDBC-D1B6-4B64-A38B-96F52F3ECD3C</gtr:id><gtr:title>GPU concurrency: weak behaviours and programming assumptions.</gtr:title><gtr:parentPublicationTitle>n/a</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/77e1e2555533d7ce6524af5da29accd6"><gtr:id>77e1e2555533d7ce6524af5da29accd6</gtr:id><gtr:otherNames>Alglave, J.</gtr:otherNames></gtr:author></gtr:authors><gtr:outcomeId>54649d738a41e1.04664580</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>621ECBCB-B398-4F6D-BBFC-8CC9CC186136</gtr:id><gtr:title>Don't sit on the fence: a static analysis approach to fence insertion</gtr:title><gtr:parentPublicationTitle>n/a</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/77e1e2555533d7ce6524af5da29accd6"><gtr:id>77e1e2555533d7ce6524af5da29accd6</gtr:id><gtr:otherNames>Alglave, J.</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2014-01-01</gtr:date><gtr:outcomeId>5464aae7bd5071.26871967</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>EEA61E9A-464A-4DC3-94E0-E4FB63D5629F</gtr:id><gtr:title>Herding Cats</gtr:title><gtr:parentPublicationTitle>ACM Transactions on Programming Languages and Systems</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/ea74d38041eb38981c3c69c1d5ce0723"><gtr:id>ea74d38041eb38981c3c69c1d5ce0723</gtr:id><gtr:otherNames>Alglave J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2014-01-01</gtr:date><gtr:outcomeId>54649a545763b0.64891410</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/K039431/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>