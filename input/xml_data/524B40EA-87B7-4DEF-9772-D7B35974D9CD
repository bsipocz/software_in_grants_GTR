<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations/><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/D1774113-D5D2-4B7C-A412-66A90FE4B96F"><gtr:id>D1774113-D5D2-4B7C-A412-66A90FE4B96F</gtr:id><gtr:name>University of Cambridge</gtr:name><gtr:department>School of Biological Sciences</gtr:department><gtr:address><gtr:line1>Lensfield Road</gtr:line1><gtr:line4>Cambridge</gtr:line4><gtr:postCode>CB2 1EW</gtr:postCode><gtr:region>East of England</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/D1774113-D5D2-4B7C-A412-66A90FE4B96F"><gtr:id>D1774113-D5D2-4B7C-A412-66A90FE4B96F</gtr:id><gtr:name>University of Cambridge</gtr:name><gtr:address><gtr:line1>Lensfield Road</gtr:line1><gtr:line4>Cambridge</gtr:line4><gtr:postCode>CB2 1EW</gtr:postCode><gtr:region>East of England</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/BEC504F7-738C-40D3-B666-88BED1216CB6"><gtr:id>BEC504F7-738C-40D3-B666-88BED1216CB6</gtr:id><gtr:firstName>Michael</gtr:firstName><gtr:otherNames>David</gtr:otherNames><gtr:surname>Pedersen</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FH027955%2F1"><gtr:id>524B40EA-87B7-4DEF-9772-D7B35974D9CD</gtr:id><gtr:title>Towards Industrial Applications of Modular Languages for Biology</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Fellowship</gtr:grantCategory><gtr:grantReference>EP/H027955/1</gtr:grantReference><gtr:abstractText>Systems biology is a relatively new field which seeks a systems level understanding of organisms: rather than studying individual entities such as proteins and genes in isolation, we ask how these interact in order to form the complex emerging behaviour that living systems exhibit. Such an understanding is for example important for the development of new drugs and to predict how these impact on an organism. Synthetic biology is a related and emerging field which seeks to engineer new organisms for practical purposes. Examples include bacteria that produce energy from sunlight; cells which organise to form e.g. artificial human tissue; and crops which are resistant to bugs. Both systems and synthetic biology rely on mathematical models. In systems biology, models are used to formalise our knowledge about an existing biological system and to allow computer simulations which predict its behaviour. In synthetic biology a model similarly allows us to test the behaviour of a new system before it is implemented in the lab. As we gain more biological knowledge and models become larger, more structured modelling methods are also needed. Computer science has a rich history in inventing and applying formal languages which support modelling in engineering, and over the last decade, substantial research efforts have gone into creating such formal languages for biology. However, these languages have so far been applied mainly to small-scale, proof-of-concept examples that yield little or no biological insight. In particular, formal languages have not yet gained traction in industry. The vision of the proposed project is to change this situation. I propose to do so by taking two existing languages that have been the subject of my PhD, one for systems biology and one for synthetic biology, and targeting the development of these languages towards industrial applications. The languages are good starting points for this purpose because they have already been designed with three key features in mind: 1) they are modular, so large systems can be described systematically in terms of their components; 2) they are intuitive to use and can be understood by non-specialists; and 3) they are defined mathematically and can hence be read by computers. The synthetic biology language furthermore allows the translation of a model to DNA sequences that can be put to work in living cells.To achieve the aim of industrial applicability in systems biology, I propose to work closely with industry. In particular, I will work with Novo Nordisk/HRI on the development of a model of insulin signalling used in their diabetes research, and through this I will obtain valuable insight into the requirements for a modelling language. I will also work and exchange ideas with Plectix BioSystems, which is developing another formal language that complements the languages in this proposal. For synthetic biology, an attempt to bring a dedicated formal language to industry would be premature given that the field is currently in its infancy. Instead, my aim is here to develop a language which can be of practical use in the annual international Genetically Engineered Machines (iGEM) competition projects. The projects are carried out by undergraduate teams from over 20 different countries and lie at the cutting edge of synthetic biology. This proposed work will involve the design of a new database of genetic parts that is necessary for the translation to DNA, and on the biological side this database will be developed at Cambridge University. The work will also focus on efficient methods of translation to DNA since the existing methods do not scale to real applications; and finally the work will study new ways of describing cell-cell communication and the impact of a synthetic circuit on host cells. This will be done in collaboration with Microsoft Research.</gtr:abstractText><gtr:potentialImpactText>The impact of the proposed work is divided into the following three categories. 1) The biotechnology tool sector. The proposed research will uncover a set of language features required for practical and industrial-scale modelling. These features can be adopted by developers of other modelling languages in both the public and private biotechnology tool sectors. Examples in the latter category include Plectix, which develops and markets technology based on the Kappa language; and Microsoft which has a large business in programming productivity tools for traditional software development that may plausibly be adopted to biology as the field matures. This potential impact will be realised through collaborations with Plectix and Microsoft Research. 2) The pharmaceutical and genetic engineering sectors. The proposed work will enable the use of formal languages in practical biological modelling. This is expected to lead to larger and more comprehensive models than were previously possible, and will also support a more efficient and reliable modeling methodology. In the pharmaceutical setting, the ability to develop larger models will allow more accurate analysis of new drugs before they go into clinical trials, potentially leading to massive financial savings when drugs fail at the modelling stage either by being ineffective or unsafe. The proposed research will furthermore engage directly in the modelling of insulin signalling. This is hoped to lead to new insights into diabetes pathology and treatments, and is a small step towards the ultimate aim of a cure for diabetes. Such advances would have profound humanitarian benefits in the face of the rapidly increasing population of diabetes sufferers, and will also lead to economic growth in the pharmaceutical industry. This impact will be realised through a collaboration with Novo Nordisk/HRI. In the genetic engineering setting, the ability to develop large synthetic systems in a systematic fashion will lead to new organisms that realise some of the grand dreams of synthetic biology. Examples include bacteria that produce energy from sunlight, addressing the problem of global warming; cells which organise to form e.g. artificial human tissue, offering an alternative to organ transplants; and the engineering of crop resistance to pathogens, reducing the use of pesticides, leading to increased crop production and hence to wealth creation. I will take a small step towards realising this impact by getting GEC adopted in the iGEM regime. 3) The education sector. Both LBS and GEC are designed with ease of use as a key criterion. This makes them suitable for use in teaching, e.g. in courses on formal languages for systems and synthetic biology. Such courses are often delivered at a high level of abstraction, and languages such as LBS and GEC can help make the concepts more accessible through practical modelling exercises. I will realise this impact by giving guest lectures at Edinburgh University and also by tutoring iGEM teams.</gtr:potentialImpactText><gtr:fund><gtr:end>2013-08-31</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2010-09-01</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>250339</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs/><gtr:disseminationOutputs/><gtr:exploitationOutputs/><gtr:furtherFundingOutputs/><gtr:impactSummaryOutputs/><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>This research has focused on the development of modelling languages and tools which allow intra-cellular processes to be described in a structured and modular fashion. 



Relating directly to languages are the following findings:



1) A syntactic extension of the rule-based language Kappa, allowing for a natural and human-readable representation of protein binding in rules which more closely resembles standard biochemical reactions.



A compiler for this extension has been implemented, translating to plain Kappa models.



2) A modular extension of the rule-based language Kappa which allows large systems to be described in terms of their components.



A compiler for this extension has been implemented, translating to plain Kappa models.



3) A novel language based on Coloured Petri nets, built on top of the OCaml general-purpose programming language. This language allows for the compact representation and efficient simulation of highly combinatorial systems.



A compiler for this language has been implemented, translating models to a lower-level OCaml representation which can be simulated.



Relating to the above languages are the following theoretical findings:



1) An efficient algorithm for checking if two protein complexes, represented by graphs, are essentially the same, or &amp;quot;isomorphic&amp;quot;. This is important for the efficient simulation of Kappa models.



2) An algorithm for automatically abstracting modular structure from flat Kappa models, alleviating the need for modelling practitioners to learn domain-specific modular modelling languages.



The modular abstraction algorithm has been implemented in a tool which takes as input a flat Kappa model and illustrates its modular structure by coloured overlays on the input text.



Further on the tool side is an initiative for a general, extensible web-based framework in which new languages and simulators can be seamlessly plugged in. An outcome in this respect is an initial plugin for the above mention modular Kappa language, and on-going work seeks to develop a plugin for the Coloured Petri net language.



Also on the tool side is further work on the language for Genetic Engineering of Cells (GEC) in collaboration with Microsoft Research Cambridge; this work has focused on integration with other software, e.g. with software for biophysical simulation developed at the Plant Sciences department at Cambridge University.



On the modelling side, one outcomes is a modular version of a standard Insulin signalling pathway written in the modular Kappa language. Work is in progress towards a second outcome on an immune system model written in the Coloured Petri net language.



Finally, in support of the interdisciplinary aspect of this research, a tool which facilitates efficient interdisciplinary learning has been developed. The tool, available at www.wikilinkify.com, takes a PDF file and annotates phrases which are considered jargon with links to Wikipedia articles.</gtr:description><gtr:exploitationPathways>The tools can be used for modelling; the languages and algorithms can be used for development of future tools and methods.</gtr:exploitationPathways><gtr:id>399D70D8-459F-44CF-AFCC-A5FCA5C4B728</gtr:id><gtr:outcomeId>r-2889099943.34829957772b796</gtr:outcomeId><gtr:sectors><gtr:sector>Digital/Communication/Information Technologies (including Software)</gtr:sector></gtr:sectors><gtr:url>http://mdpedersen.azurewebsites.net</gtr:url></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs><gtr:softwareAndTechnicalProductOutput><gtr:description>This tool implements a compiler for a syntactic extension to the rule-based modelling language Kappa with implicit bindings. The extended syntax resembles standard biochemical reactions closer than rules, thus facilitating use by biologists and modelling practitioners with little computer science background. This tool accompanies the published paper entitled &amp;quot;A syntactic abstraction for rule-based models with binding&amp;quot; in which the language extension is formally defined.</gtr:description><gtr:id>F65B74CC-8176-4F0A-BDEB-FA99566C11EE</gtr:id><gtr:outcomeId>r-8954383022.1094046fd52f52</gtr:outcomeId><gtr:title>A compiler for a rule-based languages with implicit bindings</gtr:title><gtr:type>Software</gtr:type><gtr:yearFirstProvided>2011</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput><gtr:softwareAndTechnicalProductOutput><gtr:description>This output is a web application that exploits the computational power and Internet connectivity of tablet computers to aid productivity in self-directed learning, with a focus on interdisciplinary subjects in higher education and in the biological sciences in particular. The application takes as input a PDF file, and automatically annotates words and phrases which are considered jargon with links to Wikipedia definitions.</gtr:description><gtr:id>BB3A40B1-9F25-468E-9A48-173058D414C0</gtr:id><gtr:outcomeId>r-5806887648.819846fd4dda4</gtr:outcomeId><gtr:title>Wikilinkify</gtr:title><gtr:type>Software</gtr:type><gtr:url>http://www.wikilinkify.com</gtr:url><gtr:yearFirstProvided>2010</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput><gtr:softwareAndTechnicalProductOutput><gtr:description>Rule-based languages facilitate the concise modelling of biochemical processes which are often characterised by a high level of combinatorial complexity. Modular extensions of rule-based languages allow for more structured models: a module can be defined once and subsequently used in multiple contexts. However, writing models in a modular language can be difficult, especially for modellers with no formal training in computer science. This software output allows for automated modular abstraction of flat rule-based models. The resulting modular abstractions are optimal with respect to a measure of modularity which reflects the decrease in model size resulting from the use of modules.</gtr:description><gtr:id>F4C9495A-C12E-4C56-A2AD-C6D459FC72F0</gtr:id><gtr:outcomeId>r-5893753874.9480196fd52bf6</gtr:outcomeId><gtr:title>Automatic modular abstraction of rule-based models</gtr:title><gtr:type>Software</gtr:type><gtr:yearFirstProvided>2012</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput><gtr:softwareAndTechnicalProductOutput><gtr:description>Rule-based languages such as Kappa excel in their support for handling the combinatorial complexities prevalent when modelling intra-cellular processes. But Kappa provides little structure for organising rules, and large models can therefore be hard to read and maintain. This software output implements an extension of Kappa called LBS-Kappa which allows large models to be written in a structured, modular fashion.</gtr:description><gtr:id>AEF11C95-2281-43D1-AA74-E4D03CFE0275</gtr:id><gtr:outcomeId>r-790528814.113266fd530ce</gtr:outcomeId><gtr:title>A compiler for a high-level, modular rule-based modelling language</gtr:title><gtr:type>Software</gtr:type><gtr:yearFirstProvided>2013</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput></gtr:softwareAndTechnicalProductOutputs><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>67806113-4885-4254-A816-CCD03D46A768</gtr:id><gtr:title>Canonical Labelling of Site Graphs</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/4c7a46baba86c8291ecf1e320fce6ce9"><gtr:id>4c7a46baba86c8291ecf1e320fce6ce9</gtr:id><gtr:otherNames>Nicolas Oury (Co-author)</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2013-01-01</gtr:date><gtr:outcomeId>m_419813754613f45944</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>1D65B46D-FD73-4E75-9091-8D05B62E4ABA</gtr:id><gtr:title>A high-level language for rule-based modelling.</gtr:title><gtr:parentPublicationTitle>PloS one</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/6f5bdcc72348d8baa7146561259db8ed"><gtr:id>6f5bdcc72348d8baa7146561259db8ed</gtr:id><gtr:otherNames>Pedersen M</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2015-01-01</gtr:date><gtr:issn>1932-6203</gtr:issn><gtr:outcomeId>5675e5dfd551c</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>96D3D4CB-E7B9-42BA-A152-DBE792ED143F</gtr:id><gtr:title>Bio Simulators: a web UI for biological simulation.</gtr:title><gtr:parentPublicationTitle>Bioinformatics (Oxford, England)</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/6f5bdcc72348d8baa7146561259db8ed"><gtr:id>6f5bdcc72348d8baa7146561259db8ed</gtr:id><gtr:otherNames>Pedersen M</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2014-01-01</gtr:date><gtr:issn>1367-4803</gtr:issn><gtr:outcomeId>545df3013c1eb9.69454372</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>10A41DAA-738E-4863-98D1-9DA52E65AE5A</gtr:id><gtr:title>A Syntactic Abstraction for Rule-Based Languages with Binding</gtr:title><gtr:parentPublicationTitle>Electronic Notes in Theoretical Computer Science</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/6f5bdcc72348d8baa7146561259db8ed"><gtr:id>6f5bdcc72348d8baa7146561259db8ed</gtr:id><gtr:otherNames>Pedersen M</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2011-01-01</gtr:date><gtr:outcomeId>doi_53cff1ff1024860c</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>2A06AC9A-4EE0-4679-8D47-13D5B3558817</gtr:id><gtr:title>Programming languages for circuit design.</gtr:title><gtr:parentPublicationTitle>Methods in molecular biology (Clifton, N.J.)</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/6f5bdcc72348d8baa7146561259db8ed"><gtr:id>6f5bdcc72348d8baa7146561259db8ed</gtr:id><gtr:otherNames>Pedersen M</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2015-01-01</gtr:date><gtr:issn>1064-3745</gtr:issn><gtr:outcomeId>545df61fb65c56.02868172</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>97E9FEA3-4713-4EEE-B320-8E5A502585DE</gtr:id><gtr:title>A computational method for automated characterization of genetic components.</gtr:title><gtr:parentPublicationTitle>ACS synthetic biology</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/ff8f56d117ee6adecaa2fff9d0a5c72b"><gtr:id>ff8f56d117ee6adecaa2fff9d0a5c72b</gtr:id><gtr:otherNames>Yordanov B</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2014-01-01</gtr:date><gtr:issn>2161-5063</gtr:issn><gtr:outcomeId>545df3483be322.81158678</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/H027955/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>60EBB420-734E-4DB5-B0F2-65A1115A27F8</gtr:id><gtr:percentage>25</gtr:percentage><gtr:text>Chemical synthesis</gtr:text></gtr:researchSubject><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>50</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject><gtr:researchSubject><gtr:id>FB535BD0-E265-4C0A-8532-32DCB83A3951</gtr:id><gtr:percentage>25</gtr:percentage><gtr:text>Tools, technologies &amp; methods</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>50</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic><gtr:researchTopic><gtr:id>DF4CD176-73D5-4039-BBC7-28D33DC364DD</gtr:id><gtr:percentage>25</gtr:percentage><gtr:text>Synthetic biology</gtr:text></gtr:researchTopic><gtr:researchTopic><gtr:id>4A6E5CEB-ACA3-4301-98AD-C7EC310948FD</gtr:id><gtr:percentage>25</gtr:percentage><gtr:text>Theoretical biology</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>