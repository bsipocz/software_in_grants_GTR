<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations/><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/46387D84-F71E-4B7D-8C7D-9C288F113510"><gtr:id>46387D84-F71E-4B7D-8C7D-9C288F113510</gtr:id><gtr:name>Imperial College London</gtr:name><gtr:department>Dept of Computing</gtr:department><gtr:address><gtr:line1>South Kensington Campus</gtr:line1><gtr:line2>Exhibition Road</gtr:line2><gtr:line4>London</gtr:line4><gtr:postCode>SW7 2AZ</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/46387D84-F71E-4B7D-8C7D-9C288F113510"><gtr:id>46387D84-F71E-4B7D-8C7D-9C288F113510</gtr:id><gtr:name>Imperial College London</gtr:name><gtr:address><gtr:line1>South Kensington Campus</gtr:line1><gtr:line2>Exhibition Road</gtr:line2><gtr:line4>London</gtr:line4><gtr:postCode>SW7 2AZ</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role><gtr:role><gtr:name>FELLOW</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/7D1FF4C7-DD25-4073-920E-B040B150B711"><gtr:id>7D1FF4C7-DD25-4073-920E-B040B150B711</gtr:id><gtr:name>Google Inc</gtr:name><gtr:address><gtr:line1>1600 Amphitheatre Parkway</gtr:line1><gtr:line2>Building 42</gtr:line2><gtr:postCode>94043</gtr:postCode><gtr:region>Outside UK</gtr:region><gtr:country>United States</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/5AE2FAD2-208D-4909-9F09-F2D642F32A75"><gtr:id>5AE2FAD2-208D-4909-9F09-F2D642F32A75</gtr:id><gtr:firstName>Cristian</gtr:firstName><gtr:surname>Cadar</gtr:surname><gtr:roles><gtr:role><gtr:name>FELLOW</gtr:name></gtr:role><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FL002795%2F1"><gtr:id>1224DC42-96B1-4CF6-95C2-EE7672494F66</gtr:id><gtr:title>Multi-version Execution Techniques for Increasing the Reliability and Security of Evolving Software</gtr:title><gtr:status>Active</gtr:status><gtr:grantCategory>Fellowship</gtr:grantCategory><gtr:grantReference>EP/L002795/1</gtr:grantReference><gtr:abstractText>One of the distinguishing characteristics of software systems is that they evolve: new patches are committed to software repositories and new versions are released to users on a continuous basis. Unfortunately, many of these changes bring unexpected failures that break the stability of the system or affect its security, and users face the uncomfortable choice between using an old stable version which misses recent features and bug fixes, and upgrading to a new version which improves the software in certain ways, only to introduce other bugs and security vulnerabilities.

In this fellowship, I plan to investigate novel techniques for improving the reliability and security of evolving software, based on the idea of combining the execution of multiple software versions in such a way as to increase the reliability and security of the &amp;quot;multi-version&amp;quot; application and eliminate a large number of common bugs introduced by software updates.

This is an ambitious proposal, which presents several challenges spanning the areas of software engineering, computer systems, and security: understanding how software evolves, and particularly the effects of incorrect updates on software evolution; addressing the technical challenges of multi-version execution such as creating an application-level sandboxing environment and devising lightweight record and replay techniques; designing error recovery strategies that effectively combine different software versions; and determining the applicability of multi-version execution to the different types of applications and code changes encountered in practice.</gtr:abstractText><gtr:potentialImpactText>The correct operation of today's software systems relies on the reliability and security of the software update process. As a result, this research could have a direct impact in practice, improving the productivity of the large number of computer users and system administrators that need to incorporate software updates on a regular basis. Furthermore, our approach could improve the security of software by preventing denial-of-service attacks exploiting security vulnerabilities in applications with high-availability requirements such as network servers, as well as by encouraging users to incorporate more quickly the latest security fixes. 

While the immediate societal benefits will be centred around improving the quality and security of software updates, many of the techniques developed in this work could lead to significant benefits in other areas related to software quality. For example, our lightweight replay-and-record techniques could be used to send easily reproducible error reports to developers, while our research on parallel multi-version execution could be used to deploy high-interaction honeypots offering a fine-grained understanding of the anatomy of an attack.

Our goal is to disseminate the results of this research from an early stage onwards through a variety of mechanisms: (1) by open-sourcing most of our initial prototypes to be used directly by software developers on their code; (2) by applying it to open-source and commercial code to demonstrate the effectiveness of our approach; and (3) by communicating the results of our research to the non-academic user community.</gtr:potentialImpactText><gtr:fund><gtr:end>2019-03-30</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2014-03-31</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>978493</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs/><gtr:disseminationOutputs><gtr:disseminationOutput><gtr:description>INVEST workshop</gtr:description><gtr:form>Participation in an activity, workshop or similar</gtr:form><gtr:geographicReach>Regional</gtr:geographicReach><gtr:id>95613170-EE53-431A-9D01-B0E8D62E26BF</gtr:id><gtr:impact>The Introduction to Verification and Testing (INVEST) workshop takes place in the Department of Computing, Imperial College London on an annual basis, jointly organised by Cadar, Donaldson and Gardner. The aim of the workshop is to introduce young researchers, and students potentially interested in research careers, to the fields of software verification and testing.</gtr:impact><gtr:outcomeId>58b850ba5ab720.21099887</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Undergraduate students</gtr:primaryAudience><gtr:url>http://invest.doc.ic.ac.uk</gtr:url><gtr:year>2014,2015,2017</gtr:year></gtr:disseminationOutput><gtr:disseminationOutput><gtr:description>IEEE Software Blog</gtr:description><gtr:form>Engagement focused website, blog or social media channel</gtr:form><gtr:geographicReach>International</gtr:geographicReach><gtr:id>72C307A6-9CDF-4536-A14A-91C29C4F9D3D</gtr:id><gtr:impact>IEEE Software blog post on our research on comprehensively testing software patches with symbolic execution.</gtr:impact><gtr:outcomeId>58b851d7384e67.32454185</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Professional Practitioners</gtr:primaryAudience><gtr:url>http://blog.ieeesoftware.org/2016/09/comprehensively-testing-software.html</gtr:url><gtr:year>2016</gtr:year></gtr:disseminationOutput></gtr:disseminationOutputs><gtr:exploitationOutputs/><gtr:furtherFundingOutputs><gtr:furtherFundingOutput><gtr:amountPounds>286470</gtr:amountPounds><gtr:country>United Kingdom of Great Britain &amp; Northern Ireland (UK)</gtr:country><gtr:currCode>GBP</gtr:currCode><gtr:currCountryCode>United Kingdom</gtr:currCountryCode><gtr:currLang>en_GB</gtr:currLang><gtr:description>EPSRC responsive mode grant</gtr:description><gtr:end>2019-01-02</gtr:end><gtr:fundingOrg>Engineering and Physical Sciences Research Council (EPSRC)</gtr:fundingOrg><gtr:fundingRef>EP/N007166/1</gtr:fundingRef><gtr:id>2F2F42D4-5A82-4FAF-80CA-42AC35C9D07B</gtr:id><gtr:outcomeId>58b841c8159a40.40035744</gtr:outcomeId><gtr:sector>Academic/University</gtr:sector><gtr:start>2016-01-01</gtr:start></gtr:furtherFundingOutput></gtr:furtherFundingOutputs><gtr:impactSummaryOutputs/><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>This grant has enabled the design of novel techniques for increasing the reliability and security of evolving software. We have created a novel multi-version execution system that allows multiple versions or variants of a software application to run side-by-side with a low performance overhead. We have built several new techniques on top of this system, including:
- running several versions of the same application in order to survive bugs introduced by software updates
- running different variants of the same application created by different compilers, in order to detect compiler-bug-based backdoors
- running sanitized versions of an application in parallel with the native version in order to detect software bugs

In addition, the grant has supported research into using dynamic symbolic execution to find bugs in software applications, an empirical study for understanding how large software projects evolve over time, and the design of taint tracking and symbolic execution techniques for recovering broken documents.</gtr:description><gtr:exploitationPathways>The techniques we designed could be used to improve the software update process, by enabling transparent fail-over in the case of update errors. They could also be used to find bugs in deployed applications, and detect compiler-bug-based backdoors. 

The multi-version execution framework that we designed as part of this project is now a reference for work in this area, and its architecture was incorporated in the frameworks of other groups.</gtr:exploitationPathways><gtr:id>D0186DA2-7124-425A-97A3-0D82D76571A0</gtr:id><gtr:outcomeId>56dd69cf57b929.16661859</gtr:outcomeId><gtr:sectors><gtr:sector>Digital/Communication/Information Technologies (including Software)</gtr:sector></gtr:sectors><gtr:url>http://srg.doc.ic.ac.uk/projects/</gtr:url></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs><gtr:researchDatabaseAndModelOutput><gtr:description>Data associated with an empirical study examining how code and tests co-evolve in 6 popular open-source systems. We report the main characteristics of software patches, analyse the evolution of program and patch coverage, assess the impact of nondeterminism on the execution of the test suite, and investigate whether the coverage of code containing bugs and bug fixes is higher than average.</gtr:description><gtr:id>BD8C0470-8441-4375-B463-3AF3F8D9C280</gtr:id><gtr:impact>The associated paper was published in the International Symposium on Software Testing and Analysis (ISSTA 2014). The associated artifact has won the Best Artifact Award at the conference.</gtr:impact><gtr:outcomeId>56dd5c3a658673.73046249</gtr:outcomeId><gtr:providedToOthers>true</gtr:providedToOthers><gtr:title>Covrig data set</gtr:title><gtr:type>Database/Collection of data</gtr:type><gtr:url>http://srg.doc.ic.ac.uk/projects/covrig/</gtr:url><gtr:yearFirstProvided>2014</gtr:yearFirstProvided></gtr:researchDatabaseAndModelOutput></gtr:researchDatabaseAndModelOutputs><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs><gtr:softwareAndTechnicalProductOutput><gtr:description>A symbolic execution engine for the Boogie intermediate verification language which provides modular components that can be reused in other Boogie projects.</gtr:description><gtr:id>8837FB72-5249-4536-BE6F-4648D4CC1687</gtr:id><gtr:impact>Associated paper accepted at the IEEE International Conference on Software Testing, Verification, and Validation (ICST 2016) and received a Best Paper Award.</gtr:impact><gtr:outcomeId>56df1a130d0431.72826139</gtr:outcomeId><gtr:title>Symbooglix</gtr:title><gtr:type>Software</gtr:type><gtr:url>http://srg.doc.ic.ac.uk/projects/symbooglix/</gtr:url><gtr:yearFirstProvided>2016</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput><gtr:softwareAndTechnicalProductOutput><gtr:description>A multi-version execution framework that combines selective binary rewriting with a novel event-streaming architecture to significantly reduce performance overhead and scale well with the number of versions, without relying on intrusive kernel modifications.</gtr:description><gtr:id>388CF861-A05E-4954-87F7-1DC72370D371</gtr:id><gtr:impact>The framework is now a reference for work in this area, and its architecture was incorporated in the frameworks of other groups.</gtr:impact><gtr:outcomeId>58b8439ba85a18.74331345</gtr:outcomeId><gtr:title>Varan</gtr:title><gtr:type>Software</gtr:type><gtr:url>https://srg.doc.ic.ac.uk/projects/varan/</gtr:url><gtr:yearFirstProvided>2015</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput><gtr:softwareAndTechnicalProductOutput><gtr:description>A symbolic execution tool that is designed to generate test inputs that cover the new program behaviours introduced by a patch. The technique works by executing both the old and the new version in the same symbolic execution instance, with the old version shadowing the new one. During this combined shadow execution, whenever a branch point is reached where the old and the new versions diverge, we generate a test case exercising the divergence and comprehensively test the new behaviours of the new version.</gtr:description><gtr:id>71BEDC00-0541-4236-91AD-C3A143C5CC3C</gtr:id><gtr:impact>The associated paper was accepted to the International Conference on Software Engineering (ICSE 2016). IEEE has invited us to write a blog post which discusses this work.</gtr:impact><gtr:outcomeId>56dd5afbec1bb1.13977584</gtr:outcomeId><gtr:title>Shadow</gtr:title><gtr:type>Software</gtr:type><gtr:url>http://srg.doc.ic.ac.uk/projects/shadow/</gtr:url><gtr:yearFirstProvided>2016</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput></gtr:softwareAndTechnicalProductOutputs><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>41A4E14C-051A-410C-A258-D44598E4B253</gtr:id><gtr:title>Automatic testing of symbolic execution engines via program generation and differential testing</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/bbbdb5366fd1669aaeca16cc17c2682f"><gtr:id>bbbdb5366fd1669aaeca16cc17c2682f</gtr:id><gtr:otherNames>Kapus T</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2017-01-01</gtr:date><gtr:outcomeId>5a9d2de501f462.29666178</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>76FDA783-F6CB-4492-AA7F-2242AC33DBDB</gtr:id><gtr:title>Symbooglix: A Symbolic Execution Engine for Boogie Programs</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/e4978195fea1c32640049e19f2787f86"><gtr:id>e4978195fea1c32640049e19f2787f86</gtr:id><gtr:otherNames>Liew D</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2016-01-01</gtr:date><gtr:outcomeId>585d6b8f640082.25664002</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>BB893292-4CE9-4DED-B755-80D7BBD7320B</gtr:id><gtr:title>Analysing the Program Analyser</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/2a433f43a4ecf2a55a3b6df1f9d38e7b"><gtr:id>2a433f43a4ecf2a55a3b6df1f9d38e7b</gtr:id><gtr:otherNames>Cadar, C</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2016-01-01</gtr:date><gtr:outcomeId>56d70a6a67f659.39820760</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>16CE9F23-B830-47F5-9DB1-66A9FDAF5D7A</gtr:id><gtr:title>Floating-point symbolic execution: A case study in N-version programming</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/e4978195fea1c32640049e19f2787f86"><gtr:id>e4978195fea1c32640049e19f2787f86</gtr:id><gtr:otherNames>Liew D</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2017-01-01</gtr:date><gtr:outcomeId>5a9d2d928f8479.03164653</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>CD25463B-B779-4568-AD62-AC398A633E51</gtr:id><gtr:title>Shadow of a Doubt: Testing for Divergences</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/ffa136cd2ff7c85876f1cb661ee208e7"><gtr:id>ffa136cd2ff7c85876f1cb661ee208e7</gtr:id><gtr:otherNames>Palikareva, H</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2016-01-01</gtr:date><gtr:outcomeId>56d70e9d84cbe7.38980132</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>FBF1EF24-4B19-4583-A2A6-4FBBF6774CF4</gtr:id><gtr:title>Symbooglix: A Symbolic Execution Engine for</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/1b1d707cdb9012cf4d6ef38dfee469ea"><gtr:id>1b1d707cdb9012cf4d6ef38dfee469ea</gtr:id><gtr:otherNames>Liew, D</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2016-01-01</gtr:date><gtr:outcomeId>56d70f2ce22713.27705173</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/L002795/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>D7BA1404-E001-4782-929E-E96E28B01201</gtr:id><gtr:percentage>25</gtr:percentage><gtr:text>Computer Sys. &amp; Architecture</gtr:text></gtr:researchTopic><gtr:researchTopic><gtr:id>E05CFE0B-163D-412D-A3C2-28E89B2CA336</gtr:id><gtr:percentage>75</gtr:percentage><gtr:text>Software Engineering</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>