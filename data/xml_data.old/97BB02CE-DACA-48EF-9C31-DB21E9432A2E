<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations><gtr:collaborator url="http://gtr.ukri.org:80/organisation/5E769404-E526-4084-8919-DF42F0BFF388"><gtr:id>5E769404-E526-4084-8919-DF42F0BFF388</gtr:id><gtr:name>Simula Research Laboratory</gtr:name><gtr:address><gtr:line1>Simula Research Laboratory</gtr:line1><gtr:line2>Martin Linges v 17 Fornebu</gtr:line2><gtr:line3>1325 Lysaker</gtr:line3><gtr:line4>Lysaker</gtr:line4><gtr:region>Outside UK</gtr:region><gtr:country>Norway</gtr:country></gtr:address></gtr:collaborator></gtr:collaborations><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/03D8AFBB-3EA5-4885-B036-BD4F9F4F9849"><gtr:id>03D8AFBB-3EA5-4885-B036-BD4F9F4F9849</gtr:id><gtr:name>University of Sheffield</gtr:name><gtr:department>Computer Science</gtr:department><gtr:address><gtr:line1>Firth Court</gtr:line1><gtr:line2>Western Bank</gtr:line2><gtr:line4>Sheffield</gtr:line4><gtr:line5>South Yorkshire</gtr:line5><gtr:postCode>S10 2TN</gtr:postCode><gtr:region>Yorkshire and The Humber</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/03D8AFBB-3EA5-4885-B036-BD4F9F4F9849"><gtr:id>03D8AFBB-3EA5-4885-B036-BD4F9F4F9849</gtr:id><gtr:name>University of Sheffield</gtr:name><gtr:address><gtr:line1>Firth Court</gtr:line1><gtr:line2>Western Bank</gtr:line2><gtr:line4>Sheffield</gtr:line4><gtr:line5>South Yorkshire</gtr:line5><gtr:postCode>S10 2TN</gtr:postCode><gtr:region>Yorkshire and The Humber</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/5E769404-E526-4084-8919-DF42F0BFF388"><gtr:id>5E769404-E526-4084-8919-DF42F0BFF388</gtr:id><gtr:name>Simula Research Laboratory</gtr:name><gtr:address><gtr:line1>Simula Research Laboratory</gtr:line1><gtr:line2>Martin Linges v 17 Fornebu</gtr:line2><gtr:line3>1325 Lysaker</gtr:line3><gtr:line4>Lysaker</gtr:line4><gtr:region>Outside UK</gtr:region><gtr:country>Norway</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>COLLABORATOR</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/7D1FF4C7-DD25-4073-920E-B040B150B711"><gtr:id>7D1FF4C7-DD25-4073-920E-B040B150B711</gtr:id><gtr:name>Google Inc</gtr:name><gtr:address><gtr:line1>1600 Amphitheatre Parkway</gtr:line1><gtr:line2>Building 42</gtr:line2><gtr:postCode>94043</gtr:postCode><gtr:region>Outside UK</gtr:region><gtr:country>United States</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/1D505C5F-05FA-41F7-843E-223C799CCF2F"><gtr:id>1D505C5F-05FA-41F7-843E-223C799CCF2F</gtr:id><gtr:name>Microsoft Corporation (USA)</gtr:name><gtr:address><gtr:line1>One Microsoft Way</gtr:line1><gtr:postCode>98052-6399</gtr:postCode><gtr:region>Outside UK</gtr:region><gtr:country>United States</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/1F05CA13-A5F5-4793-AF4A-1836DA8EC181"><gtr:id>1F05CA13-A5F5-4793-AF4A-1836DA8EC181</gtr:id><gtr:firstName>Gordon</gtr:firstName><gtr:surname>Fraser</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FK030353%2F1"><gtr:id>97BB02CE-DACA-48EF-9C31-DB21E9432A2E</gtr:id><gtr:title>Explorative Test Oracle Generation</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Research Grant</gtr:grantCategory><gtr:grantReference>EP/K030353/1</gtr:grantReference><gtr:abstractText>Testing is a crucial part of any software development process. Testing is also very expensive: Common estimations list the effort of software testing at 50% of the average budget. Our society increasingly depends on a working information infrastructure for more and more aspects of civic, commercial, and social life, while software at the same time becomes ever more complex. For example, a modern car has up to 100 million lines of software code, and software errors can easily lead to fatal consequences. Improving techniques to identify errors in software is therefore of utmost importance.

Manual testing is common practice in software development. As manually testing a program is a laborious and error prone task, automation is desirable. However, automation requires the user to specify the correct behaviour up-front in terms of a specification, or later by adding test oracles to automatically generated tests - both alternatives are difficult. This problem is obliterated as test quality is usually measured with oracle-agnostic code coverage metrics. In truth, however, a test without a good oracle cannot find software bugs. This is the oracle problem, one of the longest standing and greatest remaining challenges in software testing.

As both writing specifications and writing test oracles is difficult and needs to be done manually, this proposal aims to push automation further by exploring the middle ground: The novel concept of an oracle template allows to specify what should be tested and checked, but crucially, it does not require specifying the expected behaviour. Instead, automated test generation instantiates user-specified oracle templates to concrete tests with oracles, and the developer decides case by case about correctness. Thus, programs can be tested without the developer needing to write a specification or having to suffer through seemingly purposeless generated tests. Because test generation is driven by oracles, all tests have a purpose and the essential oracles required to be effective at finding software bugs.

The novel concept of oracle templates requires extension of the current state of the art in test generation, as current techniques either assume the existence of an automated oracle (e.g. a specification) or focus exclusively on the code. This creates three challenges, which will be addressed in this project:

-- Existing code-based testing techniques focus on reaching points in the code. This project will define the concept of oracle templates, and will explore test generation based on oracle templates as a search problem. Given an oracle template, search-based testing techniques will automatically create instances, which are test cases with oracles.

-- Systematic testing is traditionally driven by the idea that a good test set covers all the code, which completely ignores the test oracle problem. This project will define systematic criteria and corresponding search-based test generation techniques to thoroughly test programs based on oracle templates. These criteria will ensure coverage of oracle templates, but will also ensure that the code is executed and checked by oracles (e.g. by applying mutation and data-flow analysis).

-- It is impossible to take the human out of the software testing loop completely. Oracle templates are an attempt at minimizing the human effort, but the task of writing oracle templates still requires manual effort. Therefore, this project will explore strategies to automatically synthesise oracle templates based on standard testing patterns and usage examples. Ultimately, a developer would have all tests and oracles generated automatically on the click of a button, leaving only the task of confirming correctness of the produced examples.

The success in addressing these challenges will be measured using automated experiments, controlled studies with student subjects, and industrial case studies at Google and Microsoft.</gtr:abstractText><gtr:potentialImpactText>This project has major potential impact in software testing research and practice, as it proposes a significant change in how the human is included in the testing process. The impact of this project spans four main areas:

-- Economy

Software testing is one of the major cost factors in software engineering, commonly estimated at around 50% of the average budget. However, missing a software bug can have an even higher economic impact, as regularly demonstrated by bugs resulting in product recalls (e.g. Toyota), system downtimes (e.g. NatWest), or even accidents (e.g. Therac 25, Ariane 5). With increasing software complexity and increasing pervasiveness of software systems, this economic influence is likely to grow even further in the future.

Improving software testing methods therefore promises significant economic impact. Maintaining software quality is also essential to maintain the UK's strong position on the software market: In 2006, the UK software industry had a turnover of more than 50 billion GBP and employed around 430,000. Yet recent trends show that the UK's share of European venture capital investment has been in decline in recent years. Improving software testing, as the EXOGEN project aims to do, is thus also a key factor to a healthy economy in the UK.


-- Society

Software is getting ever more important and pervasive, as our society increasingly depends on a working information infrastructure for more and more aspects of civic, commercial, and social life. However, at the same time software becomes ever more complex, and there is no reason to expect this trend to stop in the near future. Yet, techniques to ensure software quality are struggling to keep up with this pace of growth. Improving such techniques, as is the objective of the EXOGEN project, is therefore of utmost societal importance.


-- Knowledge

This proposal will advance the state of the art in software testing as follows:

1) It will allow a higher degree of test automation than previously possible.

2) It will make it easier to apply automated testing techniques in scenarios where there are no formal specifications.

3) It provides a viable solution to the test oracle problem, one of the longest standing problems in the field of software testing.

4) It will lead to better test cases, as current test automation techniques are often driven by oracle-agnostic coverage metrics that can lead to tests that are not good at finding software bugs.

These advances are of immediate practical value, as automated test generation in practice is almost only applied if there are specifications. These advances will also attract attention of software testing researchers; the research community is currently actively seeking for solutions to the oracle problem, as for example witnessed by the recent gathering of the leading software testing researchers at a CREST Open Workshop at UCL, London, dedicated to the oracle problem.


-- People

The project will have a positive impact on the careers of the PI and RA, who will both gain additional experience in test generation and specification elicitation. In addition, the PI will gain additional experience in empirical software engineering in the context of performing controlled experiments to evaluate the project outcome, and the RA will benefit by improving his knowledge by collaborating on important publications. It will also provide greater exposure for the team members, thereby allowing the PI to consolidate his position as a new lecturer and raise his profile nationally and internationally in software engineering and testing circles. This EPSRC first grant would be the first UK based project and first UK funded project for the PI, thus representing an essential step in the PI's academic career and objective of establishing himself as one of the leading software testing researchers in the UK and worldwide.</gtr:potentialImpactText><gtr:fund><gtr:end>2015-08-09</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2014-02-10</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>92718</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs><gtr:collaborationOutput><gtr:collaboratingOrganisation>Simula Research Laboratory</gtr:collaboratingOrganisation><gtr:country>Norway, Kingdom of</gtr:country><gtr:description>Research collaboration on unit test generation</gtr:description><gtr:id>D103D375-5CFB-42F3-9240-ED0E0E3ACF2B</gtr:id><gtr:impact>Publications at ASE 2014, SSBSE 2014, JSS, and TOSEM</gtr:impact><gtr:outcomeId>5464a19c5d1aa9.26691277-1</gtr:outcomeId><gtr:partnerContribution>Andrea Arcuri at Simula Research Labs provided his expertise in evolutionary algorithms and statistical analysis.</gtr:partnerContribution><gtr:piContribution>The main contributions towards this collaboration are related to the development of efficient techniques for automated unit test generation.</gtr:piContribution><gtr:sector>Academic/University</gtr:sector><gtr:start>2010-01-01</gtr:start></gtr:collaborationOutput></gtr:collaborationOutputs><gtr:disseminationOutputs><gtr:disseminationOutput><gtr:description>Speaker at the 12th International Summer School on Software Engineering</gtr:description><gtr:form>A talk or presentation</gtr:form><gtr:geographicReach>International</gtr:geographicReach><gtr:id>9B91CBC5-3DC3-4A03-B9A1-5E6B48397A7D</gtr:id><gtr:impact>A presentation of search-based test generation and the EvoSuite tool sparked discussions and triggered new collaborations.</gtr:impact><gtr:outcomeId>58bedf9b0186d7.10405962</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Postgraduate students</gtr:primaryAudience><gtr:url>http://www.sesa.unisa.it/seschool/previousEditions/2016/</gtr:url><gtr:year>2016</gtr:year></gtr:disseminationOutput><gtr:disseminationOutput><gtr:description>Keynote speaker at the First International Summer School on Search-Based Software Engineering</gtr:description><gtr:form>A talk or presentation</gtr:form><gtr:geographicReach>International</gtr:geographicReach><gtr:id>C5E87CAA-BAB5-4232-8E3F-CD42BC21833A</gtr:id><gtr:impact>Talk sparked questions and discussion afterwards</gtr:impact><gtr:outcomeId>58bedeabebf085.08660073</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Postgraduate students</gtr:primaryAudience><gtr:url>https://sbse2016.uca.es/sbse/</gtr:url><gtr:year>2016</gtr:year></gtr:disseminationOutput><gtr:disseminationOutput><gtr:description>Speaker at the 10th International Summer School on Training And Research On Testing</gtr:description><gtr:form>A talk or presentation</gtr:form><gtr:geographicReach>International</gtr:geographicReach><gtr:id>F089785C-DB30-4779-A9EB-8C80284A87BA</gtr:id><gtr:impact>Talk sparked questions and discussion afterwards

-</gtr:impact><gtr:outcomeId>5464a3518e7b64.20976140</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Postgraduate students</gtr:primaryAudience><gtr:url>http://tarot2014.fe.up.pt/</gtr:url><gtr:year>2014</gtr:year></gtr:disseminationOutput><gtr:disseminationOutput><gtr:description>Invited tutorial at the 9th International Workshop on Search-Based Software Testing</gtr:description><gtr:form>A talk or presentation</gtr:form><gtr:geographicReach>International</gtr:geographicReach><gtr:id>A1CC24D3-0952-4D3C-A122-A0EF186D04BF</gtr:id><gtr:impact>An invited tutorial in which other researchers learned how to use the EvoSuite tool in their own research.</gtr:impact><gtr:outcomeId>58bee09bca0437.40652632</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Other audiences</gtr:primaryAudience><gtr:url>https://cse.sc.edu/~ggay/sbst2016/</gtr:url><gtr:year>2016</gtr:year></gtr:disseminationOutput><gtr:disseminationOutput><gtr:description>Speaker at the ISSTA Summer School</gtr:description><gtr:form>A talk or presentation</gtr:form><gtr:geographicReach>International</gtr:geographicReach><gtr:id>7F54FEFB-0DF1-4348-A924-1F55099A66AE</gtr:id><gtr:impact>A tutorial about the EvoSuite tool was given to a crowd of researchers in co-location with the International Symposium on Software Testing and Analysis.</gtr:impact><gtr:outcomeId>58bee0022a3d27.99398863</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Postgraduate students</gtr:primaryAudience><gtr:url>https://issta2016.cispa.saarland/summer-school-confirmed-speakers/</gtr:url><gtr:year>2016</gtr:year></gtr:disseminationOutput></gtr:disseminationOutputs><gtr:exploitationOutputs/><gtr:furtherFundingOutputs/><gtr:impactSummaryOutputs><gtr:impactSummaryOutput><gtr:description>The project has resulted in the open source unit test generation tool &amp;quot;EvoSuite&amp;quot; and several extensions, which have users in academia and industry. In particular, EvoSuite has been used for experimentation by other researchers, the published papers have produced follow-up work by other researchers. The prototypes have also been tested by users in industry, who provided useful feedback for the further course of the project.</gtr:description><gtr:firstYearOfImpact>2014</gtr:firstYearOfImpact><gtr:id>75285DEF-4758-4E0D-B497-22F07AF4B6AD</gtr:id><gtr:impactTypes/><gtr:outcomeId>5464a7d1083087.99777824</gtr:outcomeId><gtr:sector>Digital/Communication/Information Technologies (including Software)</gtr:sector></gtr:impactSummaryOutput></gtr:impactSummaryOutputs><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>Software developers write automated tests while coding (so called unit tests). To support developers in this activity and to improve the quality of the tests and software, automated test generation is often promoted by the research community. However, we have shown through experiments with research prototypes that developers cannot immediately make use of the output produced by these tools. This poses new challenges on how the tools need to interact with developers in order to achieve the overall goal of better tests and software.</gtr:description><gtr:exploitationPathways>The findings may lead to further experimentation in the area of automated test generation, and development of new techniques to interact with developers and address the test oracle problem.</gtr:exploitationPathways><gtr:id>546E2D21-6147-402B-B78F-F78431713EA7</gtr:id><gtr:outcomeId>5464a4a61ffe14.56643325</gtr:outcomeId><gtr:sectors><gtr:sector>Digital/Communication/Information Technologies (including Software)</gtr:sector></gtr:sectors></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs><gtr:softwareAndTechnicalProductOutput><gtr:description>EvoSuite is an automated unit test generation tool for Java. It takes as input a Java class, and produces a JUnit test suite optimised for branch coverage.</gtr:description><gtr:id>3D77D6F6-1631-4886-AA35-573ABB4D1A95</gtr:id><gtr:impact>EvoSuite is used by several research groups and practitioners.</gtr:impact><gtr:outcomeId>546496e599b2c9.21928135</gtr:outcomeId><gtr:title>EvoSuite</gtr:title><gtr:type>Software</gtr:type><gtr:url>http://www.evosuite.org</gtr:url><gtr:yearFirstProvided>2014</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput></gtr:softwareAndTechnicalProductOutputs><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>F37696A6-5B52-4FC3-8D4F-91CCFFBD663D</gtr:id><gtr:title>Does Automated Unit Test Generation Really Help Software Testers? A Controlled Empirical Study</gtr:title><gtr:parentPublicationTitle>ACM Transactions on Software Engineering and Methodology</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/1894cc771b54a5ae77345ec736fe1d3f"><gtr:id>1894cc771b54a5ae77345ec736fe1d3f</gtr:id><gtr:otherNames>Fraser G</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2015-01-01</gtr:date><gtr:outcomeId>5675fcab6ee7b</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>F653FBA5-3E9D-47D0-9DDF-7300F2F186C2</gtr:id><gtr:title>Seeding strategies in search-based unit test generation</gtr:title><gtr:parentPublicationTitle>Software Testing, Verification and Reliability</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/749dca1a6713f3fd1d8e28d7afa80bf1"><gtr:id>749dca1a6713f3fd1d8e28d7afa80bf1</gtr:id><gtr:otherNames>Rojas J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2016-01-01</gtr:date><gtr:outcomeId>56dde37b64b0c4.22119954</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>682939B5-9824-4EBB-ADD4-4711CE4B9325</gtr:id><gtr:title>Do Automatically Generated Unit Tests Find Real Faults? An Empirical Study of Effectiveness and Challenges (T)</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/f24a70a61424d6a25a72176e2f75e86c"><gtr:id>f24a70a61424d6a25a72176e2f75e86c</gtr:id><gtr:otherNames>Shamshiri S</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2015-01-01</gtr:date><gtr:outcomeId>56dde37adaab98.49838604</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>5FA690D6-2E78-427B-9828-D5BA72FF8BAE</gtr:id><gtr:title>A Large-Scale Evaluation of Automated Unit Test Generation Using EvoSuite</gtr:title><gtr:parentPublicationTitle>ACM Transactions on Software Engineering and Methodology</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/1894cc771b54a5ae77345ec736fe1d3f"><gtr:id>1894cc771b54a5ae77345ec736fe1d3f</gtr:id><gtr:otherNames>Fraser G</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2014-01-01</gtr:date><gtr:outcomeId>doi_55f9839830e6be6d</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>FA9E8153-5C3F-4AE3-A592-E5093453F2AA</gtr:id><gtr:title>A Memetic Algorithm for whole test suite generation</gtr:title><gtr:parentPublicationTitle>Journal of Systems and Software</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/1894cc771b54a5ae77345ec736fe1d3f"><gtr:id>1894cc771b54a5ae77345ec736fe1d3f</gtr:id><gtr:otherNames>Fraser G</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2015-01-01</gtr:date><gtr:outcomeId>54649fba1ae531.82840023</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>FD7CF358-30BA-41FB-A116-F1CDFABEE913</gtr:id><gtr:title>Assessing and generating test sets in terms of behavioural adequacy</gtr:title><gtr:parentPublicationTitle>Software Testing, Verification and Reliability</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/1894cc771b54a5ae77345ec736fe1d3f"><gtr:id>1894cc771b54a5ae77345ec736fe1d3f</gtr:id><gtr:otherNames>Fraser G</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2015-01-01</gtr:date><gtr:outcomeId>585d5e0b2346f9.38085504</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>A36E7DC5-2CAA-4F96-B509-93D6AA6CE41A</gtr:id><gtr:title>A detailed investigation of the effectiveness of whole test suite generation</gtr:title><gtr:parentPublicationTitle>Empirical Software Engineering</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/749dca1a6713f3fd1d8e28d7afa80bf1"><gtr:id>749dca1a6713f3fd1d8e28d7afa80bf1</gtr:id><gtr:otherNames>Rojas J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2016-01-01</gtr:date><gtr:outcomeId>58c27bee1dbd39.86802809</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/K030353/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>E05CFE0B-163D-412D-A3C2-28E89B2CA336</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Software Engineering</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>