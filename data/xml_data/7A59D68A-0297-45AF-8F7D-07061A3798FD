<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations/><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/46387D84-F71E-4B7D-8C7D-9C288F113510"><gtr:id>46387D84-F71E-4B7D-8C7D-9C288F113510</gtr:id><gtr:name>Imperial College London</gtr:name><gtr:department>Dept of Computing</gtr:department><gtr:address><gtr:line1>South Kensington Campus</gtr:line1><gtr:line2>Exhibition Road</gtr:line2><gtr:line4>London</gtr:line4><gtr:postCode>SW7 2AZ</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/46387D84-F71E-4B7D-8C7D-9C288F113510"><gtr:id>46387D84-F71E-4B7D-8C7D-9C288F113510</gtr:id><gtr:name>Imperial College London</gtr:name><gtr:address><gtr:line1>South Kensington Campus</gtr:line1><gtr:line2>Exhibition Road</gtr:line2><gtr:line4>London</gtr:line4><gtr:postCode>SW7 2AZ</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/78705635-40B1-4C4E-9E7D-9AE59DC55CB1"><gtr:id>78705635-40B1-4C4E-9E7D-9AE59DC55CB1</gtr:id><gtr:firstName>John</gtr:firstName><gtr:surname>Darlington</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole><gtr:personRole url="http://gtr.ukri.org:80/person/CCA35CBF-B6BC-4E98-84A5-404BF8304B1B"><gtr:id>CCA35CBF-B6BC-4E98-84A5-404BF8304B1B</gtr:id><gtr:firstName>Spencer</gtr:firstName><gtr:otherNames>John</gtr:otherNames><gtr:surname>Sherwin</gtr:surname><gtr:orcidId>0000-0001-7681-2820</gtr:orcidId><gtr:roles><gtr:role><gtr:name>CO_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FI030239%2F1"><gtr:id>7A59D68A-0297-45AF-8F7D-07061A3798FD</gtr:id><gtr:title>libhpc: Intelligent Component-based Development of HPC Applications</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Research Grant</gtr:grantCategory><gtr:grantReference>EP/I030239/1</gtr:grantReference><gtr:abstractText>Libhpc aims build and demonstrate an environment for the component-based construction of HPC applications. This environment will enable method implementers to publish and share their contributions as multi-implementation adaptable components, shareable across domains and architectures, making them inherently more re-usable. End users will then be able to compose applications without reference to underlying machine or processor architectures. The aim of libhpc is to initiate a software development pattern for HPC that has knowledge capture and re-use at its core.Libhpc will be based on the combination of two long lines of research: that of Professor Sherwin in the development and application of spectral/hp element codes and that of Professor Darlington in the development of innovative application development methodologies. The project will take as its starting point the Nektar++ methods library and its application to the modelling of blood flow through an aortic arch. This application and the library will be re-factored to identify the necessary re-usable components and co-ordination forms required. These components will be designed and implemented, targeted at a variety of architectures, including, distributed memory clusters, shared memory clusters and GPU processors. A software methods repository with supporting meta-data will be constructed along with application-construction and mapping tools. This environment will then be used to re-express the aortic modelling application and map it systematically to a number of different architectures and machine configurations. These applications will be benchmarked to assess their performance and the improvement in human productivity and reusability gained.</gtr:abstractText><gtr:potentialImpactText>If successfully carried out we firmly believe that this project could have considerable long-lasting impact addressing, as it does, fundamental issues concerning the way HPC applications are developed and deployed. As we have discussed earlier we consider that there is a great amount of knowledge concerning HPC methods and their implementations that is currently not captured in a manner that allows it to be effectively re-used or re-deployed. Our framework allows the expertise and knowledge of experts in HPC methods and their implementations to be captured explicitly in a manner that allows it to be systematically re-used. Our method is a classic example of the machine-tool paradigm - invest effort early in the development cycle to develop methods that are generic and re-usable and, thus, save much more effort downstream when these methods are used. The development framework would provide a much more efficient way of building and using HPC applications, supporting re-use and re-application of methods across a variety of applications and application types. The framework would also provide a pedagogical vehicle to help teach, in structured way, numerical methods, solvers, their relationships and implementation techniques, a key technology or discipline - numerical methods or computational engineering - that is currently lacking such a vehicle. The principal beneficiaries are: 1. Domain scientists who use computational tools. Today this includes almost every scientist. They will benefit by being able to design and use extremely flexible applications which can be run on diverse computing utilities with improved performance. 2. Numerical methods implementers. They will have access to a method for publishing and sharing their work, which is otherwise typically buried in machine-bound implementation code. 3. Utility computing operators. This includes both research grid operators and commercial operators such as Amazon Cloud. libhpc's flexible format will allow researchers to deploy to on-demand grid configurations, thus increasing uptake of grid resources and increasing ROI, especially in institutional settings. 4. Machine vendors. By exposing metadata about their products, vendors will encourage purchase and use. 5. Scientific research as whole. This will benefit by having access to improved methods. With a more systematic building block approach, it is likely that methods development will accelerate.</gtr:potentialImpactText><gtr:fund><gtr:end>2013-06-30</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2011-07-01</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>483098</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs/><gtr:disseminationOutputs/><gtr:exploitationOutputs/><gtr:furtherFundingOutputs><gtr:furtherFundingOutput><gtr:amountPounds>726567</gtr:amountPounds><gtr:country>United Kingdom of Great Britain &amp; Northern Ireland (UK)</gtr:country><gtr:currCode>GBP</gtr:currCode><gtr:currCountryCode>United Kingdom</gtr:currCountryCode><gtr:currLang>en_GB</gtr:currLang><gtr:description>libhpc Stage II: A Long-term Solution for the Usability, Maintainability and Sustainability of HPC Software</gtr:description><gtr:end>2015-06-02</gtr:end><gtr:fundingOrg>Engineering and Physical Sciences Research Council (EPSRC)</gtr:fundingOrg><gtr:fundingRef>EP/K038788/1</gtr:fundingRef><gtr:id>950D8926-6103-4CAC-875C-AC01C5BC31C0</gtr:id><gtr:outcomeId>5edc7d205edc7d34</gtr:outcomeId><gtr:sector>Academic/University</gtr:sector><gtr:start>2013-07-01</gtr:start></gtr:furtherFundingOutput></gtr:furtherFundingOutputs><gtr:impactSummaryOutputs><gtr:impactSummaryOutput><gtr:description>Software, in one form or another, now underlies much activity in science, industry, commerce and public affairs. The difficulties in producing, using and maintaining software are well rehearsed. The technology built and demonstrated in libhpc has the potential to provide fundamental advances in the way complex software systems can be constructed, used and maintained, thus it has the potential to have a very considerable impact in the productivity, efficiency and reliability of software development and use in all these areas.

Advances in the productivity and reliability with which complex software systems can be constructed and maintained.

Beneficiaries: Society

Contribution Method: Advances in fundamental technologies.</gtr:description><gtr:id>704FA511-695F-48BB-B3F4-D68547F3D2FB</gtr:id><gtr:impactTypes><gtr:impactType>Cultural,Economic</gtr:impactType></gtr:impactTypes><gtr:outcomeId>m-1532158536.4007936de25e74a</gtr:outcomeId><gtr:sector>Chemicals,Construction,Creative Economy,Digital/Communication/Information Technologies (including Software),Education,Energy,Environment,Healthcare,Pharmaceuticals and Medical Biotechnology,Transport</gtr:sector></gtr:impactSummaryOutput></gtr:impactSummaryOutputs><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>Developing, using and maintaining software is still notoriously difficult, especially for complex HPC numerical modeling applications. The libhpc project tackled these problems based on an approach that combined several innovations: functional abstractions for both control (co-ordination forms) and data processing (functional components), alternative realisations or implementations for these abstractions and meta-data to record each component's capabilities and requirements. Method developers and implementers produce new components, annotate them with appropriate meta-data and place them in a software repository (which we now call a software Cloud). End-users build applications by composing abstract components. At application deployment/run-time an intelligent mapper examines the alternatives available, both component implementations and machine resources and produces an execution plan that optimises user-given criteria in terms of performance, cost or energy usage. The execution plant is then loaded and executed.</gtr:description><gtr:exploitationPathways>The technology is generic, applicable to all types of applications and end-users, thus it is eminently usable in non-academic contexts. The developed libhpc methodology enables the development of software repositories (Software Clouds) comprising components, implementations and meta-data. Method developers and implementers could contribute new methods and implementations with appropriate meta-data to the repository and end-users would use these components to build an execute applications aided by the intelligent mapper. Thus libhpc extends the well-accepted model of code libraries but with much greater abstraction, generality and adaptability for the components. 



These repositories would be built as Internet-available shared community resources. These could be provided as shared open-source resources or curated via some facility operator such as sourceforge or the Research Councils for their academic users. As such they would coordinate activities between method developers, end-users and facility operators, providing a modern, flexible HPC e-Infrastructure.



The libhpc project has successfully developed and applied such an infrastructure. A prototype framework has been built in both Python and Groovy that enables software repositories to be constructed and applications built and intelligently mapped as described above. A distributed environment, for both implementations hosting and execution, has been developed. This infrastructure has been demonstrated across a range of applications, particularly in bioinformatics and numerical modelling. A technology has been identified that would allow menu-driven user environments to be constructed for domain-specific application domains where the full scripting technology is not required but intelligent resource mapping is still desirable. 



Application of these ideas to the Nektar++ spectral finite element code has made progress and a menu-driven framework (NekCloud) has been developed that allows Nektar++ to be used easily on Cloud IaaS environments.</gtr:exploitationPathways><gtr:id>C40EF504-37C9-4980-921F-0BEEAB86D1B8</gtr:id><gtr:outcomeId>r-8043160194.5712877463b9e</gtr:outcomeId><gtr:sectors><gtr:sector>Chemicals,Creative Economy,Digital/Communication/Information Technologies (including Software),Energy,Environment,Healthcare,Pharmaceuticals and Medical Biotechnology,Transport</gtr:sector></gtr:sectors><gtr:url>http://www3.imperial.ac.uk/lesc/projects/libhpc</gtr:url></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs><gtr:softwareAndTechnicalProductOutput><gtr:description>The libhpc deployer is a Python software library for running batch-style HPC applications on different underlying computing platforms. At present the library supports running jobs on PBS-based HPC clusters, OpenStack private clouds and the Amazon EC2 public cloud service. The library uses YAML metadata for describing target platforms, applications and jobs.

The library has a plugin-style design that allows support for additional target platforms to be added.</gtr:description><gtr:id>CE24366F-FB48-4449-8ED2-E4E2997D33F8</gtr:id><gtr:impact>The declarative style of the YAML metadata used to configure the library provides a simplified means for developers and end-user scientists and researchers to specify their jobs and switch much more easily between cluster and cloud platforms. For example, where users wish to undertake some jobs on a local cluster platform and take advantage of cloud infrastructure for other aspects of their workload, the libhpc deployer provides support for straightforwardly selecting a different target platform on a per-job basis.</gtr:impact><gtr:outcomeId>56cb9b31bdad55.62431988</gtr:outcomeId><gtr:title>Libhpc Deployer Library</gtr:title><gtr:type>Software</gtr:type><gtr:url>https://github.com/london-escience/libhpc-deployer</gtr:url><gtr:yearFirstProvided>2015</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput><gtr:softwareAndTechnicalProductOutput><gtr:description>The libhpc-cf coordination forms library is a Python software library that allows creation of software component metadata and offers a set of &amp;quot;coordination forms&amp;quot; - functional style operators for coordinating the flow of control and data between the software components represented by component metadata.

In practice, this means that developers can take existing software tools or libraries and wrap them as software components using the features provided by the libhpc-cf library. These components can then be linked to form more advanced processes by applying coordination forms to them. Coordination forms allow the specification of richer orchestration than traditional workflow languages and the library is extensible to allow the addition of further coordination forms. Coordination forms can vary from basic structures, such as specifying that a set of dependent components are processed sequentially or that a set of independent components may be processed in parallel, to advanced domain specific languages. A further key benefit of both components and coordination forms specified within the libhpc-cf library is that both can have multiple implementations allowing different approaches to be used to undertake a given task depending on the type of target computing platform to be used or the problem being addressed.</gtr:description><gtr:id>CFEFAF6E-4AD8-4683-9CE4-B8AAF51ABD32</gtr:id><gtr:impact>The libhpc-cf library provides a modern Python implementation of a general approach pioneered by Darlington, Guo et al. in their 1995 paper &amp;quot;Functional Skeletons for Parallel Coordination&amp;quot;. The library offers a demonstration of the differences and power of coordination forms when compared to existing workflow languages or systems. The ability to handle multiple implementations of software components and the orchestration processes used to control them is of particular use in modern heterogeneous computing environments.</gtr:impact><gtr:outcomeId>56cf7febd7c5d6.01783290</gtr:outcomeId><gtr:title>libhpc-cf: Libhpc Coordination Forms Library</gtr:title><gtr:type>Software</gtr:type><gtr:url>https://github.com/london-escience/libhpc-cf</gtr:url><gtr:yearFirstProvided>2015</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput></gtr:softwareAndTechnicalProductOutputs><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>C8453DDC-BBF4-419F-9F59-1CF71F492860</gtr:id><gtr:title>Nekkloud: A software environment for high-order finite element analysis on clusters and clouds</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/e6aac7bc46873b903248d1963ed61f66"><gtr:id>e6aac7bc46873b903248d1963ed61f66</gtr:id><gtr:otherNames>Cohen J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2013-01-01</gtr:date><gtr:outcomeId>56cb8938173834.59327593</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>C09A7CF7-D07D-48B4-9EF6-ADFE03ABEB0D</gtr:id><gtr:title>Nektar++: An open-source spectral/
 
 element framework</gtr:title><gtr:parentPublicationTitle>Computer Physics Communications</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/1c9b556d8dd7b8d9e060b98ec56cf7d9"><gtr:id>1c9b556d8dd7b8d9e060b98ec56cf7d9</gtr:id><gtr:otherNames>Cantwell C</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2015-01-01</gtr:date><gtr:outcomeId>5675f293b8613</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>2F2C3930-AECB-41D3-9565-E335D913FE7E</gtr:id><gtr:title>Simplifying the Development, Use and Sustainability of HPC Software</gtr:title><gtr:parentPublicationTitle>ArXiv e-prints</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/2e0f5922b5e48142dd690f49f59d349b"><gtr:id>2e0f5922b5e48142dd690f49f59d349b</gtr:id><gtr:otherNames>Cohen Jeremy</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2013-01-01</gtr:date><gtr:outcomeId>56cb8cfbbdf2f4.77724757</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>22E2B7E9-CA0B-4E65-A926-164B62070772</gtr:id><gtr:title>TemPSS: A Service Providing Software Parameter Templates and Profiles for Scientific HPC</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/e6aac7bc46873b903248d1963ed61f66"><gtr:id>e6aac7bc46873b903248d1963ed61f66</gtr:id><gtr:otherNames>Cohen J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2015-01-01</gtr:date><gtr:outcomeId>56cb8938ab44d1.83205709</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>980458BF-891A-40CF-80FF-89B30E379A04</gtr:id><gtr:title>libHPC: Software sustainability and reuse through metadata preservation</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/e6aac7bc46873b903248d1963ed61f66"><gtr:id>e6aac7bc46873b903248d1963ed61f66</gtr:id><gtr:otherNames>Cohen J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2012-01-01</gtr:date><gtr:outcomeId>56cb8e163b2c79.91913555</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/I030239/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>30</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject><gtr:researchSubject><gtr:id>772CD758-53CD-407F-9B2C-F2B861E86155</gtr:id><gtr:percentage>20</gtr:percentage><gtr:text>Mechanical Engineering</gtr:text></gtr:researchSubject><gtr:researchSubject><gtr:id>FB535BD0-E265-4C0A-8532-32DCB83A3951</gtr:id><gtr:percentage>50</gtr:percentage><gtr:text>Tools, technologies &amp; methods</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>ED6338AE-3457-45D6-90CA-B994C3CF422B</gtr:id><gtr:percentage>20</gtr:percentage><gtr:text>Aerodynamics</gtr:text></gtr:researchTopic><gtr:researchTopic><gtr:id>9EAAD5EA-2E54-4986-942F-2E204958FE29</gtr:id><gtr:percentage>50</gtr:percentage><gtr:text>High Performance Computing</gtr:text></gtr:researchTopic><gtr:researchTopic><gtr:id>E05CFE0B-163D-412D-A3C2-28E89B2CA336</gtr:id><gtr:percentage>30</gtr:percentage><gtr:text>Software Engineering</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>