<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations/><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/8319F78A-DCBD-49F6-BE00-78E1CD75CDA9"><gtr:id>8319F78A-DCBD-49F6-BE00-78E1CD75CDA9</gtr:id><gtr:name>University of York</gtr:name><gtr:department>Computer Science</gtr:department><gtr:address><gtr:line1>Heslington</gtr:line1><gtr:line4>York</gtr:line4><gtr:line5>North Yorkshire</gtr:line5><gtr:postCode>YO10 5DD</gtr:postCode><gtr:region>Yorkshire and The Humber</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/8319F78A-DCBD-49F6-BE00-78E1CD75CDA9"><gtr:id>8319F78A-DCBD-49F6-BE00-78E1CD75CDA9</gtr:id><gtr:name>University of York</gtr:name><gtr:address><gtr:line1>Heslington</gtr:line1><gtr:line4>York</gtr:line4><gtr:line5>North Yorkshire</gtr:line5><gtr:postCode>YO10 5DD</gtr:postCode><gtr:region>Yorkshire and The Humber</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/16340B63-32C3-4275-8E57-EF1522E54FB2"><gtr:id>16340B63-32C3-4275-8E57-EF1522E54FB2</gtr:id><gtr:firstName>Robert</gtr:firstName><gtr:otherNames>David</gtr:otherNames><gtr:surname>Alexander</gtr:surname><gtr:orcidId>0000-0003-3818-0310</gtr:orcidId><gtr:roles><gtr:role><gtr:name>CO_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole><gtr:personRole url="http://gtr.ukri.org:80/person/80D404A2-2CA9-489B-8635-3EF23666EFB5"><gtr:id>80D404A2-2CA9-489B-8635-3EF23666EFB5</gtr:id><gtr:firstName>John</gtr:firstName><gtr:otherNames>Andrew</gtr:otherNames><gtr:surname>Clark</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole><gtr:personRole url="http://gtr.ukri.org:80/person/F3179C58-21C8-4C4E-89BD-AFAB7C0CE388"><gtr:id>F3179C58-21C8-4C4E-89BD-AFAB7C0CE388</gtr:id><gtr:firstName>Manuel</gtr:firstName><gtr:otherNames>Yves</gtr:otherNames><gtr:surname>Oriol</gtr:surname><gtr:roles><gtr:role><gtr:name>CO_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FG043604%2F1"><gtr:id>3F11A446-846B-444F-A591-691D936958D9</gtr:id><gtr:title>The Birth, Life and Death of Semantic Mutants</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Research Grant</gtr:grantCategory><gtr:grantReference>EP/G043604/1</gtr:grantReference><gtr:abstractText>Traditional Mutation Testing produces test cases that distinguish between some description N and variants of it. Each variant is produced by applying a mutation operator to N. A test set that is good at distinguishing N from variants of N is likely to be good at finding faults that are similar to applications of the mutation operators. Mutation testing was originally applied to programs but more recently it has been applied to other forms of descriptions such as specifications. Mutants are produced through the application of mutation operators, each of which may be applied to a relevant point in a program in order to produce a mutant. The mutation operators carry out small syntactic changes. For example, + might be replaced by -, &amp;gt; might be replaced by &amp;gt;=, a variable in an expression may be replaced by a constant, or part of an expression may be deleted. The mutation operators are designed to represent syntactically small errors. Typically, mutants are used to either judge the adequacy of a test set (does it distinguish between N and its mutants?) and also to drive test generation (we want a test set that distinguishes between N and its mutants).Traditional mutation testing produces mutants that represent small slips or mistakes in programming and thus represent a class of faults. A mutant program differs from the program under test by a small syntactic change (e.g. a / replaces a * ). However, real developers will also suffer from misunderstandings, especially when moving between description notations. They misapprehend the semantics of the description before them. They may, for example, import their understanding from a previously used programming language, or else from an understanding of how a particular tool interprets the notation. We believe that a semantically oriented mutation testing approach may assist in the discovery of such problems. We seek to show that a semantically oriented mutation testing approach is feasible and can find faults not found by traditional syntactic mutation (and likely, by other popular testing strategies).Misunderstanding the semantics of descriptive notations is a common source of problems in software development. We believe that these misunderstandings can be represented as semantic mutants over descriptions and that test data produced to kill semantic mutants is effective at finding faults caused by such misunderstandings: It will often find faults that are typically missed by test sets produced by extant testing strategies (and in particular, by test sets that are produced to kill traditional syntactic mutants). We also believe that he production of semantic mutants and the generation of test data to kill them can be automated.</gtr:abstractText><gtr:fund><gtr:end>2013-09-30</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2009-10-01</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>136251</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs/><gtr:disseminationOutputs/><gtr:exploitationOutputs/><gtr:furtherFundingOutputs/><gtr:impactSummaryOutputs><gtr:impactSummaryOutput><gtr:description>They are beginning to be used. We have used our research on mutation testing and presented to MoD and also as part of a proposal to DSTL. The application is multi-core. We were allowed by the EPSRC to charge to the grant for an extra 6 months (up to March 2014) to allow development of a mutation tool for multicore. 

We have also carried out a research study this year (2016) to CNIF that sought to apply mutation analyses to a real-world control system, This is likely to yield further sponsorship (with PI Ibrahim Habli).</gtr:description><gtr:firstYearOfImpact>2016</gtr:firstYearOfImpact><gtr:id>78004B5D-72AF-43BE-8FDF-9FBE4AC0B1D3</gtr:id><gtr:impactTypes><gtr:impactType>Economic</gtr:impactType></gtr:impactTypes><gtr:outcomeId>54564d652f0632.26118107</gtr:outcomeId><gtr:sector>Aerospace, Defence and Marine</gtr:sector></gtr:impactSummaryOutput></gtr:impactSummaryOutputs><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>Our work has concerned mutation testing. Suppose someone asked you to test a software system with the aim of discovering errors. You would supply it with inputs and judge whether the system behaved as expected, i.e. gave the 'right' outputs. But how would they know you had made a good fist of testing it - that the testing was sufficiently thorough? One way is to inject (one at a time) different faults into a system (i.e. make small syntactic code changes) and see whether the system with a fault injected into it behaves differently to the original system when subjected to your suite of tests. 

If your test suite has at least one test that gives different behaviours then it has 'killed' the mutant. If an injected fault goes undetected by all tests, then it is said to be'live'. Live mutants either indicate that the injected fault is actually semantically the same as the original, or else your test suite just isn't thorough enough to discover it. If the latter you might usefully consider generating an additional test that can distinguish the original and mutant systems.

However, all mutant fault injection to date is syntactic - it aims by and large to discover programmer 'slips'. However, faults may be more subtle. In particular faults in a system may arise when two users simply have different interpretations of what the code or design actually represents. This may arise simply because the underpinning programmign languages are semantically ambiguous. 

We have developed a prototype fault injection engine that aims to target those parts of a program or design that might prove problematic. Test can be generated to target those. 

We have also developed test data generation technqiues based ion operations research based optimisation texchnqiues, that allows efficient mutant killing test data generation startegies to be discovered. Using a form of evolutionary computation we can 'home in' on highly effective test data generations strategies. 

Thus, in collaboration with our project partner at Brunel, we are able to generate new forms of mutant to give a radically different yardstick for test thoroughness and we have potentially very strong methods of generatign test data to kill mutants (whether syntactic or semantic).</gtr:description><gtr:exploitationPathways>Yes. The principles of our underpinning work leading to the journal paper Semantic Mutation Testing; can be extended to other systems and other notations. Although published in 2013, the paper has already attracted a fair amount of academic interest and citations. It represents both a novel contribution to mutation testing itself, but also clearly has practical applications. (In fact, the grant proposal was actually motivated by significantly practical concerns.) 

We would hope that the ideas of mutation testing, semantic mutation testing and automated test data generation for mutation testign in teh context of multi-core systems will prove a promising route to impact. Multi-core systems will find application everywhere but we believe there are significant issues faced by the defence sector that makes that sector in real need of assistance. However, any modern software is likely to have to run on a multi-core chip (and so we identify IT as an exploitation sector too).</gtr:exploitationPathways><gtr:id>B96EC9EB-9453-492E-9CF8-550F9313D410</gtr:id><gtr:outcomeId>54565ad8e55e76.10730795</gtr:outcomeId><gtr:sectors><gtr:sector>Aerospace, Defence and Marine,Digital/Communication/Information Technologies (including Software)</gtr:sector></gtr:sectors></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs/><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>D4A534B2-7D32-4CB6-AF84-0B580416877A</gtr:id><gtr:title>Probability-Based Semantic Interpretation of Mutants</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/491d252544827719142550fb78c87d0a"><gtr:id>491d252544827719142550fb78c87d0a</gtr:id><gtr:otherNames>Patrick M</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2014-01-01</gtr:date><gtr:outcomeId>545652e3399be3.46751209</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>82BCA650-0A0D-4D27-9596-3057FDBACCC6</gtr:id><gtr:title>Semantic mutation testing</gtr:title><gtr:parentPublicationTitle>Science of Computer Programming</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/edc5f7c0e58dfe61e7f81d9f8d2b7544"><gtr:id>edc5f7c0e58dfe61e7f81d9f8d2b7544</gtr:id><gtr:otherNames>Clark J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2013-01-01</gtr:date><gtr:outcomeId>doi_53d0090094a74721</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>AA18D9C0-6A45-4E73-AECE-D5EDFF98CB9B</gtr:id><gtr:title>Using Mutation Analysis to Evolve Subdomains for Random Testing</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/491d252544827719142550fb78c87d0a"><gtr:id>491d252544827719142550fb78c87d0a</gtr:id><gtr:otherNames>Patrick M</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2013-01-01</gtr:date><gtr:isbn>978-1-4799-1324-4</gtr:isbn><gtr:outcomeId>doi_53d059059173ae9e</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>B7A3F40D-3EE8-4176-91DC-E3A78819963F</gtr:id><gtr:title>Mutation-optimised subdomains for test data generation and program analysis</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/346eb56f370b05e9017241c7495c955b"><gtr:id>346eb56f370b05e9017241c7495c955b</gtr:id><gtr:otherNames>Patrick Matthew Timothy</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2013-01-01</gtr:date><gtr:outcomeId>54565560da5e60.12822971</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>DCB32C21-4DB3-440D-97D2-D86FD457D77E</gtr:id><gtr:title>MESSI: Mutant Evaluation by Static Semantic Interpretation</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/491d252544827719142550fb78c87d0a"><gtr:id>491d252544827719142550fb78c87d0a</gtr:id><gtr:otherNames>Patrick M</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2012-01-01</gtr:date><gtr:isbn>978-1-4577-1906-6</gtr:isbn><gtr:outcomeId>5456511172e5f1.68672470</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>347EEF5A-2DA4-4D7B-8F8F-06DFE1AA9210</gtr:id><gtr:title>Subdomain-based test data generation</gtr:title><gtr:parentPublicationTitle>Journal of Systems and Software</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/491d252544827719142550fb78c87d0a"><gtr:id>491d252544827719142550fb78c87d0a</gtr:id><gtr:otherNames>Patrick M</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2015-01-01</gtr:date><gtr:issn>01641212</gtr:issn><gtr:outcomeId>56dd7d9d50eac1.63411764</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/G043604/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>E05CFE0B-163D-412D-A3C2-28E89B2CA336</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Software Engineering</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>