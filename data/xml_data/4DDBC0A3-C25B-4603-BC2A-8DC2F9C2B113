<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations><gtr:collaborator url="http://gtr.ukri.org:80/organisation/FA143EC1-E637-4E0C-80ED-0EA8ED214038"><gtr:id>FA143EC1-E637-4E0C-80ED-0EA8ED214038</gtr:id><gtr:name>University of Leuven</gtr:name><gtr:address><gtr:line1>Oude Markt 13</gtr:line1><gtr:line2>Box 5005</gtr:line2><gtr:region>outside UK</gtr:region></gtr:address></gtr:collaborator><gtr:collaborator url="http://gtr.ukri.org:80/organisation/FE8EF780-983C-4E93-BBAD-A06CCAA42EC0"><gtr:id>FE8EF780-983C-4E93-BBAD-A06CCAA42EC0</gtr:id><gtr:name>University of Genoa</gtr:name><gtr:address><gtr:line1>5 Via Balbi</gtr:line1><gtr:line4>I-16126 Genoa</gtr:line4><gtr:region>Outside UK</gtr:region><gtr:country>Italy</gtr:country></gtr:address></gtr:collaborator><gtr:collaborator url="http://gtr.ukri.org:80/organisation/83ECDB78-E716-4AF5-A830-BA3EA3EE7FFC"><gtr:id>83ECDB78-E716-4AF5-A830-BA3EA3EE7FFC</gtr:id><gtr:name>Bangladesh Uni of Engineering and Tech</gtr:name><gtr:address><gtr:line1>Palashi</gtr:line1><gtr:region>Outside UK</gtr:region><gtr:country>Bangladesh</gtr:country></gtr:address></gtr:collaborator><gtr:collaborator url="http://gtr.ukri.org:80/organisation/1D3C9ADE-5860-4017-88E9-BCDCD95A7CBA"><gtr:id>1D3C9ADE-5860-4017-88E9-BCDCD95A7CBA</gtr:id><gtr:name>University of Bath</gtr:name><gtr:address><gtr:line1>Claverton Down</gtr:line1><gtr:city>Bath</gtr:city><gtr:postCode>BA2 7AY</gtr:postCode><gtr:region>South West</gtr:region></gtr:address></gtr:collaborator><gtr:collaborator url="http://gtr.ukri.org:80/organisation/7C20C745-E3BE-4C6F-8063-296811138525"><gtr:id>7C20C745-E3BE-4C6F-8063-296811138525</gtr:id><gtr:name>Appalachian State University</gtr:name><gtr:address><gtr:line1>Appalachian State University</gtr:line1><gtr:line2>Boone</gtr:line2><gtr:postCode>NC-28608</gtr:postCode><gtr:region>Outside UK</gtr:region></gtr:address></gtr:collaborator></gtr:collaborations><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/E5A82D2C-5AD4-488A-ACFF-566345A5D6DA"><gtr:id>E5A82D2C-5AD4-488A-ACFF-566345A5D6DA</gtr:id><gtr:name>Heriot-Watt University</gtr:name><gtr:department>S of Mathematical and Computer Sciences</gtr:department><gtr:address><gtr:line1>Administration Building</gtr:line1><gtr:line2>Riccarton</gtr:line2><gtr:line3>Ricarton</gtr:line3><gtr:line4>Currie</gtr:line4><gtr:postCode>EH14 4AS</gtr:postCode><gtr:region>Scotland</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/E5A82D2C-5AD4-488A-ACFF-566345A5D6DA"><gtr:id>E5A82D2C-5AD4-488A-ACFF-566345A5D6DA</gtr:id><gtr:name>Heriot-Watt University</gtr:name><gtr:address><gtr:line1>Administration Building</gtr:line1><gtr:line2>Riccarton</gtr:line2><gtr:line3>Ricarton</gtr:line3><gtr:line4>Currie</gtr:line4><gtr:postCode>EH14 4AS</gtr:postCode><gtr:region>Scotland</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/FA143EC1-E637-4E0C-80ED-0EA8ED214038"><gtr:id>FA143EC1-E637-4E0C-80ED-0EA8ED214038</gtr:id><gtr:name>University of Leuven</gtr:name><gtr:address><gtr:line1>Oude Markt 13</gtr:line1><gtr:line2>Box 5005</gtr:line2><gtr:region>outside UK</gtr:region></gtr:address><gtr:roles><gtr:role><gtr:name>COLLABORATOR</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/FE8EF780-983C-4E93-BBAD-A06CCAA42EC0"><gtr:id>FE8EF780-983C-4E93-BBAD-A06CCAA42EC0</gtr:id><gtr:name>University of Genoa</gtr:name><gtr:address><gtr:line1>5 Via Balbi</gtr:line1><gtr:line4>I-16126 Genoa</gtr:line4><gtr:region>Outside UK</gtr:region><gtr:country>Italy</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role><gtr:role><gtr:name>COLLABORATOR</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/83ECDB78-E716-4AF5-A830-BA3EA3EE7FFC"><gtr:id>83ECDB78-E716-4AF5-A830-BA3EA3EE7FFC</gtr:id><gtr:name>Bangladesh Uni of Engineering and Tech</gtr:name><gtr:address><gtr:line1>Palashi</gtr:line1><gtr:region>Outside UK</gtr:region><gtr:country>Bangladesh</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>COLLABORATOR</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/1D3C9ADE-5860-4017-88E9-BCDCD95A7CBA"><gtr:id>1D3C9ADE-5860-4017-88E9-BCDCD95A7CBA</gtr:id><gtr:name>University of Bath</gtr:name><gtr:address><gtr:line1>Claverton Down</gtr:line1><gtr:city>Bath</gtr:city><gtr:postCode>BA2 7AY</gtr:postCode><gtr:region>South West</gtr:region></gtr:address><gtr:roles><gtr:role><gtr:name>COLLABORATOR</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/7C20C745-E3BE-4C6F-8063-296811138525"><gtr:id>7C20C745-E3BE-4C6F-8063-296811138525</gtr:id><gtr:name>Appalachian State University</gtr:name><gtr:address><gtr:line1>Appalachian State University</gtr:line1><gtr:line2>Boone</gtr:line2><gtr:postCode>NC-28608</gtr:postCode><gtr:region>Outside UK</gtr:region></gtr:address><gtr:roles><gtr:role><gtr:name>COLLABORATOR</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/C0E4FAD2-3C8B-410A-B6DF-3B9B9E433060"><gtr:id>C0E4FAD2-3C8B-410A-B6DF-3B9B9E433060</gtr:id><gtr:name>University of St Andrews</gtr:name><gtr:address><gtr:line1>College Gate</gtr:line1><gtr:line4>St. Andrews</gtr:line4><gtr:line5>Fife</gtr:line5><gtr:postCode>KY16 9AJ</gtr:postCode><gtr:region>Scotland</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/0C129969-7A35-4EB5-B76E-D95D0B8039B9"><gtr:id>0C129969-7A35-4EB5-B76E-D95D0B8039B9</gtr:id><gtr:name>Tallinn University of Technology</gtr:name><gtr:address><gtr:line1>Ehitajate tee 5</gtr:line1><gtr:line4>19086 Tallinn</gtr:line4><gtr:region>Outside UK</gtr:region><gtr:country>Estonia</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/1E8F5619-B0CB-4CDB-9982-3A811D1C0F42"><gtr:id>1E8F5619-B0CB-4CDB-9982-3A811D1C0F42</gtr:id><gtr:name>University of Texas at Dallas</gtr:name><gtr:address><gtr:line1>PO Box 830688</gtr:line1><gtr:line2>Richardson</gtr:line2><gtr:line3>Texas</gtr:line3><gtr:line4>TX 75083-0688</gtr:line4><gtr:region>Outside UK</gtr:region><gtr:country>United States</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/5BB4F8BF-B4E0-4EAF-9AF5-885E19D64850"><gtr:id>5BB4F8BF-B4E0-4EAF-9AF5-885E19D64850</gtr:id><gtr:name>University of Strathclyde</gtr:name><gtr:address><gtr:line1>16 Richmond Street</gtr:line1><gtr:line4>Glasgow</gtr:line4><gtr:postCode>G1 1XQ</gtr:postCode><gtr:region>Scotland</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/F35632B0-D4C0-4FAD-8179-A899790F1895"><gtr:id>F35632B0-D4C0-4FAD-8179-A899790F1895</gtr:id><gtr:firstName>Ekaterina</gtr:firstName><gtr:surname>Komendantskaya</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FK031864%2F2"><gtr:id>4DDBC0A3-C25B-4603-BC2A-8DC2F9C2B113</gtr:id><gtr:title>COALGEBRAIC LOGIC PROGRAMMING FOR TYPE INFERENCE: Parallelism and Corecursion for New Generation of Programming Languages</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Research Grant</gtr:grantCategory><gtr:grantReference>EP/K031864/2</gtr:grantReference><gtr:abstractText>The main goal of typing is to prevent the occurrence of execution errors during the running of a program. 
Milner formalised the idea, showing that ``well-typed programs cannot go wrong''. In practice, type structures provide a fundamental technique of reducing programmer errors. At their strongest, they cover most of the properties of interest to the verification community.

A major trend in the development of functional languages is improvement in expressiveness of the underlying type system, e.g., in terms of Dependent Types, Type Classes, Generalised Algebraic Types (GADTs), Dependent Type Classes and Canonical Structures. Milner-style decidable type inference does not always suffice for such extensions (e.g. the principal type may no longer exist), and deciding well-typedness sometimes requires computation additional to compile-time type inference.

Implementations of new type inference algorithms include a variety of first-order decision procedures, notably Unification and Logic Programming (LP), Constraint LP, LP embedded into interactive tactics (Coq's eauto), and LP supplemented by rewriting.

Recently, a strong claim has been made by Gonthier et al that, for richer type systems, LP-style type inference is more efficient and natural than traditional tactic-driven proof development.

A second major trend is parallelism: the absence of side-effects makes it easy to evaluate sub-expressions in parallel. Powerful abstraction mechanisms of function composition and higher-order functions play important roles in parallelisation. Three major parallel languages are Eden (explicit parallelism) Parallel ML (implicit parallelism) and Glasgow parallel Haskell (semi-explicit parallelism). Control parallelism in particular distinguishes functional languages.

Type inference and parallelism are rarely considered together in the literature. As type inference becomes more sophisticated and takes a bigger role in the overall program development, sequential type inference is bound to become a bottle-neck for language parallelisation.

Our new Coalgebraic Logic Programming (CoALP) offers both extra expressiveness (corecursion) and parallelism in one algorithm. We propose to use CoALP in place of LP tools currently used in type inference.

With the mentioned major developments in Corecursion, Parallelism, and Typeful (functional) programming it has become vital for these disjoint communities to combine their efforts: enriched type theories rely more and more on the new generation of LP languages; coalgebraic semantics has become influential in language design; and parallel dialects of languages have huge potential in applying common techniques across the FP/LP programming paradigm. This project is unique in bringing together local and international collaborators working in the three communities. The number of
supporters the project has speaks better than words about the timeliness of our agenda.


The project will impact on two streams of EPSRC's strategic plan: &amp;quot;Programming Languages and Compilers&amp;quot; and &amp;quot;Verification and Correctness&amp;quot;. The project is novel in aspects of Theory (coalgebraic study of (co)recursive computations arising in automated proof-search); Practice (implementation of the new language CoALP and its embedding in type-inference tools); and Methodology (Mixed corecursion and parallelism).</gtr:abstractText><gtr:potentialImpactText>The proposed research lies in the intersection of the research fields Programming Languages and Compilers (via Parallel and Corecursive Programming) and Verification and Correctness (via Type Inference).
Both fields are identified by EPSRC for strategic growth (www.epsrc.ac.uk/ourportfolio/themes/ict/). 

 As CoALP is applied to type inference, this will have direct impact on both research and industrial applications of functional languages and theorem provers, and ultimately, wider areas of Software Security, Verification and Design. As our collaborator from Object-oriented programming community D. Ancona says, ``It is a general methodology that can be, at least in principle, fruitfully applied not only to type inference, but to several kinds of static analysis. ... it can be smoothly integrated with static analysis techniques developed for compiler technology&amp;quot;.

Our proposed method will affect four areas beyond the academic community: Knowledge, Economy, Society and People. The project will have a long-term effect on Economy and Society, as it enhances technologies that ensure dependability and security of software. With demand for embedded computing in cars, smart phones, and other electronics, there has been increased interest in formal verification for software correctness. Alongside that, companies like Microsoft, Intel, Altran Praxis, QinetiQ, Siemens, BOSCH, Airbus, the Stanford Research Institute are keen players in a software verification Grand Challenge: an international effort for software correctness in industry. The pervasive nature of software means that software dependability plays a crucial role within the world economy and in security - from maintaining national security through to protecting personal data.

Our work aims to advance programming languages design, including logic programming, typed functional programming languages, and theorem provers. The proposed project will develop a pilot implementation of CoALP and will, within three years, provide a new interpreter (for logic programs) and a new compiler (for a functional language) ready to be taken by industries that currently use these languages, e.g. ABSInt, Erlang Solutions, Galois Inc., Parallel Scientific, Vector Fabrics, Alcatel-Lucent, Bank of America Merril Lynch, Barclays Capital Quantitative Analysis Group, Facebook, Google, Microsoft.

 Already during its course, the project will have immediate effect on Knowledge and People. Recently, CS has seen major developments in Corecursion, Parallelism, and Typeful (functional) programming. It has become vital for these (disjoint) communities to combine their efforts: enriched type theories rely more and more on the new generation of LP languages; coalgebraic semantics has become influential in language design; and parallel dialects of languages have huge potential in applying common techniques across the FP/LP programming paradigm. This project is unique in bringing together local and international collaborators working in the three communities. The number of supporters the project has speaks better than words about the timeliness of our agenda. We will link the project outcomes with the listed Academic beneficiaries. Engagement with academics will form a critical part of the pathway towards economic and societal impact.</gtr:potentialImpactText><gtr:fund><gtr:end>2017-01-31</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2016-03-01</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>65323</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs><gtr:collaborationOutput><gtr:collaboratingOrganisation>University of Leuven</gtr:collaboratingOrganisation><gtr:country>Belgium, Kingdom of</gtr:country><gtr:department>Department of Computer Science</gtr:department><gtr:description>Coalgebraic Logic Programming for Type Classes in Haskell</gtr:description><gtr:id>ECADC360-D1EB-429E-8233-3B6120D69292</gtr:id><gtr:impact>Peng Fu, Ekaterina Komendantskaya, Tom Schrijvers, Andrew Pond:
Proof Relevant Corecursive Resolution. FLOPS 2016: 126-143</gtr:impact><gtr:outcomeId>56cddc83eaab36.96863186-1</gtr:outcomeId><gtr:partnerContribution>Research Discussion, paper and grant writing</gtr:partnerContribution><gtr:piContribution>Research Discussion, paper and grant writing with Tom Schrijvers</gtr:piContribution><gtr:sector>Academic/University</gtr:sector><gtr:start>2014-01-01</gtr:start></gtr:collaborationOutput><gtr:collaborationOutput><gtr:collaboratingOrganisation>University of Bath</gtr:collaboratingOrganisation><gtr:country>United Kingdom of Great Britain &amp; Northern Ireland (UK)</gtr:country><gtr:department>Department of Computer Science</gtr:department><gtr:description>Coalgebraic Logic Programming</gtr:description><gtr:id>3FCC4D19-E598-4F01-9451-EFF45574C85D</gtr:id><gtr:impact>CMCS'16 research paper, journal paper in Journal of Logic and Computation</gtr:impact><gtr:outcomeId>56cdd93ca73587.76230515-1</gtr:outcomeId><gtr:partnerContribution>Paper and grant writing.</gtr:partnerContribution><gtr:piContribution>Paper and grant writing, with John Power.</gtr:piContribution><gtr:sector>Academic/University</gtr:sector><gtr:start>2013-01-01</gtr:start></gtr:collaborationOutput><gtr:collaborationOutput><gtr:collaboratingOrganisation>Bangladesh University of Engineering and Technology (BUET)</gtr:collaboratingOrganisation><gtr:country>India, Republic of</gtr:country><gtr:department>Department of Computer Science and Engineering</gtr:department><gtr:description>Machine-Learning for theorem Proving in Haskell</gtr:description><gtr:id>A08BF655-369E-43A0-B9E6-C5D933F66249</gtr:id><gtr:impact>J&amp;oacute;nathan Heras, Ekaterina Komendantskaya, Moa Johansson, Ewen Maclean:
Proof-Pattern Recognition and Lemma Discovery in ACL2. LPAR 2013: 389-406</gtr:impact><gtr:outcomeId>56cddb4d8a11c0.19347882-1</gtr:outcomeId><gtr:partnerContribution>Research discussions, paper and grant writing</gtr:partnerContribution><gtr:piContribution>Research discussions, paper and grant writing with Moa Johansson</gtr:piContribution><gtr:sector>Academic/University</gtr:sector><gtr:start>2013-01-01</gtr:start></gtr:collaborationOutput><gtr:collaborationOutput><gtr:collaboratingOrganisation>University of Genoa</gtr:collaboratingOrganisation><gtr:country>Italy, Italian Republic</gtr:country><gtr:department>Department of Computer and Information Sciences</gtr:department><gtr:description>Coalgebraic Logic Programming for Object-Oriented programming languages</gtr:description><gtr:id>BDEA773C-4223-4402-8E84-25B3DEAD583C</gtr:id><gtr:impact>We won an Erasmus grant to co-supervise an MSc student</gtr:impact><gtr:outcomeId>56cddab9661d79.69737773-1</gtr:outcomeId><gtr:partnerContribution>Research Collaboration, paper writing</gtr:partnerContribution><gtr:piContribution>Research Collaboration, paper writing with Davide Ancona</gtr:piContribution><gtr:sector>Academic/University</gtr:sector><gtr:start>2014-01-01</gtr:start></gtr:collaborationOutput><gtr:collaborationOutput><gtr:collaboratingOrganisation>Appalachian State University</gtr:collaboratingOrganisation><gtr:country>United States of America</gtr:country><gtr:department>Department of Computer Science</gtr:department><gtr:description>Structural Resolution</gtr:description><gtr:id>41327CB4-3B0A-4AA3-BB0A-D5DA969F7355</gtr:id><gtr:impact>One conference paper with P.Johann in ICLP'15, a journal paper with P.Johann (submitted), and a grant pro-proposal in preparation.</gtr:impact><gtr:outcomeId>56cdd859509727.76222223-1</gtr:outcomeId><gtr:partnerContribution>ollaboration on the topic of Structural Resolution for Logic Programming: research, paper writing, grant writing</gtr:partnerContribution><gtr:piContribution>Collaboration on the topic of Structural Resolution for Logic Programming: research, paper writing, grant writing</gtr:piContribution><gtr:sector>Academic/University</gtr:sector><gtr:start>2014-01-01</gtr:start></gtr:collaborationOutput></gtr:collaborationOutputs><gtr:disseminationOutputs><gtr:disseminationOutput><gtr:description>Workshop on Coalgebra, Horn Clause Logic Programming and Types, 28-29 November 2016, Edinburgh, UK.</gtr:description><gtr:form>Participation in an activity, workshop or similar</gtr:form><gtr:geographicReach>International</gtr:geographicReach><gtr:id>801F20B5-0100-415C-A799-E5676CADB8F4</gtr:id><gtr:impact>International workshop disseminating the grant findings. Attracted participants from major UK universities, industries (Microsoft, Google); as well as research students.</gtr:impact><gtr:outcomeId>58c4317cdf4c52.33547459</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Postgraduate students</gtr:primaryAudience><gtr:url>https://ff32.host.cs.st-andrews.ac.uk/coalpty16/</gtr:url><gtr:year>2017</gtr:year></gtr:disseminationOutput></gtr:disseminationOutputs><gtr:exploitationOutputs/><gtr:furtherFundingOutputs><gtr:furtherFundingOutput><gtr:amountPounds>2500</gtr:amountPounds><gtr:country>United Kingdom of Great Britain &amp; Northern Ireland (UK)</gtr:country><gtr:currCode>GBP</gtr:currCode><gtr:currCountryCode>United Kingdom</gtr:currCountryCode><gtr:currLang>en_GB</gtr:currLang><gtr:description>SICSA PEER grant</gtr:description><gtr:end>2016-12-02</gtr:end><gtr:fundingOrg>SICSA Scottish Informatics and Computer Science Alliance</gtr:fundingOrg><gtr:id>B9546E0F-8013-4BED-BE3C-28BCE4C31111</gtr:id><gtr:outcomeId>58c42c288bada1.57422738</gtr:outcomeId><gtr:sector>Academic/University</gtr:sector><gtr:start>2016-09-01</gtr:start></gtr:furtherFundingOutput></gtr:furtherFundingOutputs><gtr:impactSummaryOutputs><gtr:impactSummaryOutput><gtr:description>The research discussions are on the way of how to embed our algorithms in Software produced by Claudio Russo, Microsoft Research.
We applied our algorithms in Type class inference in Haskell, and we investigate how his work on type class inference in C# and F# can benefit from this.
Research visit by C.Russo was hosted in November 2016.</gtr:description><gtr:firstYearOfImpact>2016</gtr:firstYearOfImpact><gtr:id>B1AD943C-3FCC-4D96-8E5C-AD6890D15295</gtr:id><gtr:impactTypes><gtr:impactType>Economic</gtr:impactType></gtr:impactTypes><gtr:outcomeId>58c43711223a98.03515499</gtr:outcomeId><gtr:sector>Digital/Communication/Information Technologies (including Software)</gtr:sector></gtr:impactSummaryOutput></gtr:impactSummaryOutputs><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>The grant investigated new algorithms allowing to automatically prove and/or check certain properties of software, such as safety and security.
These algorithms are used in programming languages via types or via static analysis.

We developed a range of algorithms, ranging from Coalgebraic logic programming to Proof relevant corecursive resolution and non-termination checkers that introduced novel solutions to a range of existing problems in programming language design.
In particular, we embedded these algorithms into type class inference in a programming language Haskell and vi abstract compilation -- into a programming language Java.</gtr:description><gtr:exploitationPathways>The finding may be integrtaed in a range of programming languages. This project proved the concept by using them in Haskell and Java.</gtr:exploitationPathways><gtr:id>57ADD179-EA4F-4E26-9F10-305240D1D82E</gtr:id><gtr:outcomeId>58c4350b54d925.05287235</gtr:outcomeId><gtr:sectors><gtr:sector>Digital/Communication/Information Technologies (including Software)</gtr:sector></gtr:sectors><gtr:url>http://www.macs.hw.ac.uk/~ek19/CoALP/</gtr:url></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs><gtr:softwareAndTechnicalProductOutput><gtr:description>New, advanced, implementation of CoALP interpreter, By E.Komendantskaya and M.Schmidt</gtr:description><gtr:id>C32677D8-7AEE-4A13-9145-F133BAA05A75</gtr:id><gtr:impact>The tool is applied in abstract compilation in Java, bu collaborators D.Ancona and L.Franceschini, Genova University, Italy</gtr:impact><gtr:outcomeId>58c432985dbca6.89485391</gtr:outcomeId><gtr:title>New Coalgebraic Logic Programming implementation</gtr:title><gtr:type>Software</gtr:type><gtr:url>http://www.macs.hw.ac.uk/~ek19/CoALP/</gtr:url><gtr:yearFirstProvided>2017</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput><gtr:softwareAndTechnicalProductOutput><gtr:description>Non-termination checker for term rewriting written in Haskell by project's RA Peng Fu.</gtr:description><gtr:id>479EAD34-4266-42FC-8232-E831812C0F37</gtr:id><gtr:impact>Research paper has been produced and is currently under review.</gtr:impact><gtr:outcomeId>58c433479ef481.77753368</gtr:outcomeId><gtr:title>Nontermination checker in Haskell</gtr:title><gtr:type>Software</gtr:type><gtr:url>https://github.com/Fermat/FCR</gtr:url><gtr:yearFirstProvided>2016</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput></gtr:softwareAndTechnicalProductOutputs><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>A8DDDC27-E86C-4653-B1B8-946715F0E229</gtr:id><gtr:title>Structural Resolution with Co-inductive Loop Detection</gtr:title><gtr:parentPublicationTitle>Electronic Proceedings in Theoretical Computer Science</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/bd75dbe105014309cbdded985198a393"><gtr:id>bd75dbe105014309cbdded985198a393</gtr:id><gtr:otherNames>Li Y</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2017-01-01</gtr:date><gtr:outcomeId>5a9d3777286f59.95470355</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>84A1AA41-D53E-473C-8EF6-2E6FE7786CD0</gtr:id><gtr:title>Coalgebraic logic programming: from Semantics to Implementation</gtr:title><gtr:parentPublicationTitle>Journal of Logic and Computation</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/8a1f751684eea59daa41e9b748a08fae"><gtr:id>8a1f751684eea59daa41e9b748a08fae</gtr:id><gtr:otherNames>Komendantskaya E</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2016-01-01</gtr:date><gtr:outcomeId>54539b083b2d88.12876360</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>83469E16-A4A4-4A4A-BDF5-E13215F8938D</gtr:id><gtr:title>Operational semantics of resolution and productivity in Horn clause logic</gtr:title><gtr:parentPublicationTitle>Formal Aspects of Computing</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/6d1ce75395ca4686c4fc1c03ff8e7675"><gtr:id>6d1ce75395ca4686c4fc1c03ff8e7675</gtr:id><gtr:otherNames>Fu P</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2016-01-01</gtr:date><gtr:outcomeId>58c428bce19890.59550463</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>17F20EA4-DC8D-4586-9C73-60BDA05CBD21</gtr:id><gtr:title>Productive corecursion in logic programming</gtr:title><gtr:parentPublicationTitle>Theory and Practice of Logic Programming</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/fb325bd9c58f590f1d8e631de974cd3d"><gtr:id>fb325bd9c58f590f1d8e631de974cd3d</gtr:id><gtr:otherNames>KOMENDANTSKAYA E</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2017-01-01</gtr:date><gtr:outcomeId>5a9d33a76388c4.54568871</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>C7BA2470-3157-4FDA-80BB-B72F60237854</gtr:id><gtr:title>Structural Resolution for Abstract Compilation of Object-Oriented Languages</gtr:title><gtr:parentPublicationTitle>Electronic Proceedings in Theoretical Computer Science</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/fe0c2254e0ec7dacdd4de001600a80bb"><gtr:id>fe0c2254e0ec7dacdd4de001600a80bb</gtr:id><gtr:otherNames>Franceschini L</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2017-01-01</gtr:date><gtr:outcomeId>5a9d37fbe7a753.51458762</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/K031864/2</gtr:identifier></gtr:identifiers><gtr:projectHierarchy><gtr:parents><gtr:parent><gtr:id>1BFD709D-3DFF-4C1B-9AB8-F606B585D731</gtr:id><gtr:grantRef>EP/K031864/1</gtr:grantRef><gtr:amount>280589.55</gtr:amount><gtr:start>2013-09-01</gtr:start><gtr:end>2016-02-29</gtr:end><gtr:children><gtr:child rel="Transfer"><gtr:id>4DDBC0A3-C25B-4603-BC2A-8DC2F9C2B113</gtr:id><gtr:grantRef>EP/K031864/2</gtr:grantRef><gtr:amount>65323.46</gtr:amount><gtr:start>2016-03-01</gtr:start><gtr:end>2017-01-31</gtr:end><gtr:children/></gtr:child></gtr:children></gtr:parent></gtr:parents></gtr:projectHierarchy><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>