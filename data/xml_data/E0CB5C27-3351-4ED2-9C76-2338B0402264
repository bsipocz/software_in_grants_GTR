<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations/><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/EC23DA53-CA73-4104-A3F6-2A9523484E69"><gtr:id>EC23DA53-CA73-4104-A3F6-2A9523484E69</gtr:id><gtr:name>Queen's University of Belfast</gtr:name><gtr:department>Electronics Electrical Eng and Comp Sci</gtr:department><gtr:address><gtr:line1>University Road</gtr:line1><gtr:line4>Belfast</gtr:line4><gtr:line5>County Antrim</gtr:line5><gtr:postCode>BT7 1NN</gtr:postCode><gtr:region>Northern Ireland</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/EC23DA53-CA73-4104-A3F6-2A9523484E69"><gtr:id>EC23DA53-CA73-4104-A3F6-2A9523484E69</gtr:id><gtr:name>Queen's University of Belfast</gtr:name><gtr:address><gtr:line1>University Road</gtr:line1><gtr:line4>Belfast</gtr:line4><gtr:line5>County Antrim</gtr:line5><gtr:postCode>BT7 1NN</gtr:postCode><gtr:region>Northern Ireland</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/D1E1B058-5D74-4D66-A6B4-252462C15E99"><gtr:id>D1E1B058-5D74-4D66-A6B4-252462C15E99</gtr:id><gtr:firstName>Hans</gtr:firstName><gtr:otherNames>Tim</gtr:otherNames><gtr:surname>Vandierendonck</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FL027402%2F1"><gtr:id>E0CB5C27-3351-4ED2-9C76-2338B0402264</gtr:id><gtr:title>Hybrid Static/Dynamic Scheduling for Task Dataflow Parallel Programs</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Research Grant</gtr:grantCategory><gtr:grantReference>EP/L027402/1</gtr:grantReference><gtr:abstractText>Traditionally, software development has benefit tremendously from the exponential performance increase that processors, the central computing units in computers, have witnessed. Up until about 2004, processor performance doubled about every 18 to 24 months. This trend could however not be sustained due to physical limitations, most importantly constraints on energy consumption. For this reason, processor manufacturars have switched to integrating multiple processor cores on a chip. These processors still allow an overall performance growth at similar rates as before 2004. However, software must be rewritten to utilize all processing cores in order to benefit from this performance potential. The pressure is now on software development as software must have several independent threads of execution, i.e., software must be parallel (or concurrent). The development of high-performance parallel software is non-trivial and is a specialisation of its own. The key problem with parallelism is that it must be taken into account throughout the design of software. Moreover, optimising the performance of parallel software requires many code changes that often increase performance only on specific computers. Parallelism in software imposes a dual expertise on software developers: expertise in the problem domain and expertise in parallel programming. Such a dual expertise is counterproductive in many respects and potentially leads to more costly, less effective and less functional software.

This project aims to alleviate the dual expertise problem by advancing knowledge and technology on parallel programming models based on task dataflow. These programming models separate the specification of the program from the detection of parallelism, thus shifting the focus towards correctness of software and ease of development. Task dataflow models however depend on dynamic analysis of parallelism, which adds to the execution time overhead and restricts the model to programs with coarse-grain parallelism. In contrast, it is known that statically scheduled programs (where parallelism has been decided and mapped out before the program executes) allow considerably finer-grain parallelism.

This project will investigate techniques to reconcile the benefits of dynamically scheduled task dataflow programs with the benefits of static scheduling. To this end, we will investigate compilation techniques and extensions to dynamic schedulers that allow embedding statically scheduled fine-grain parallel components inside coarse-grain dynamically scheduled programs.

If successful, this project will generate both scientific knowledge and long-term practical value for the ICT industry. This research programme will also make initial steps in the philosophically important issue of recompiling parallel programs, an issue that has been largely ignored in the past due to its sheer complexity. This research programme furthermore aligns with the EPSRC ICT capability priority on Many-core architectures and concurrency in distributed and embedded systems&amp;quot;.</gtr:abstractText><gtr:potentialImpactText>The main long-term goal of this project is to improve the programmability of many-core processors, which means that better parallel software may be written with less programming effort. The term 'better' is very wide and may include higher performance, better energy-efficiency, more or better functionality, less bugs especially those related to concurrency, etc. In order to arrive at such better parallel software, tools will need to be developed based on the results of the proposed research to support software developers.

Thus, contributing to improving programmability impacts the United Kingdom's ICT industry and society in several ways, using EPSRC nomenclature:
1. Enhancing the effectiveness and sustainability of organisations including public services and businesses:
Computing is a means to enhancing services and increasing revenue: it is not computing itself but the adoption of new processes and techniques enabled by computing that creates productivity growth of businesses. Often, but not always, computing requirements strain the capabilities of current computing systems and the adoption of high-performance and parallel computing techniques becomes a requirement. In the current state of affairs, business that develop software of rmany-core processors will need to invest in people that specialise in parallelizing and optimizing software for these processors. As a result, programmers need to develop a dual expertise: expertise in the products that they develop and expertise in parallel programming. This will reflect negatively on the cost of software development and may pose problems to attract or train the required staff. Moreover, the quality of the software may also be reduced because parallel software is susceptible to a whole range of subtle concurrency bugs that do not exist in single-threaded software.

The goal of this project is to reduce the expertise in parallel programming required. This will improve the effectiveness and concurrential position of companies that adopt programming languages with improved programmability.

2. Commercialisation and exploitation:
The proposed research may be commercialised in the form of tools (compilers) and execution environment (runtime system). These will be used by the industry described above to construct better software. Many tool companies already exist in the UK that have carved out a particular problem domain and market tools that aid to solve problems related to programmability. Such companies include ARM Ltd., CriticalBlue, Maxeler and Codeplay, to name just a few. Such tool companies can benefit from the proposed research by commercialising and exploiting research results of this project.

3. Wealth creation, economic prosperity and regeneration:
Better tools lead to better software products with more functionality, better performance, better energy-efficiency and better quality (fewer bugs). Better software again supports industry to perform better in whatever use they have of software, be it in manufacturing and design, science, financial markets, communications, digital rendering or media and entertainment. Moreover, the results of this project will help the IT sector as a whole to keep up with the growth rate of IT functionality and pervasiveness that we have grown accustomed to, which has been put at threat by the many-core revolution. As such, wealth creation and economic prosperity will follow from improved software for a range of companies.

Following the analysis above, the direct industrial beneficiaries of this project are tool companies. These tool companies will be addressed through publishing and showcasing our research results and through making the project's scheduler and compiler available as open source software. This way, evidence of the effectiveness of the developed techniques as well as present potential ways to implement them are presented.</gtr:potentialImpactText><gtr:fund><gtr:end>2017-03-02</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2014-12-03</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>96235</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs/><gtr:disseminationOutputs><gtr:disseminationOutput><gtr:description>W5 STEM Outreach Event (career talks, speed networking)</gtr:description><gtr:form>Participation in an open day or visit at my research institution</gtr:form><gtr:geographicReach>Regional</gtr:geographicReach><gtr:id>A3A48CCA-493A-4EEF-909B-4C47B9E72A96</gtr:id><gtr:impact>Pupils from various schools in Northern Ireland visited W5 for a STEM speed networking event. Main audience is pre-A levels. Discussions sparked interest in the subject area and clarified appropriate subjects for A levels to prepare for studies in this area.</gtr:impact><gtr:outcomeId>58b98f33dbe551.96157582</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Schools</gtr:primaryAudience><gtr:year>2016</gtr:year></gtr:disseminationOutput><gtr:disseminationOutput><gtr:description>Research Impact Showcase - DNA of Innovation</gtr:description><gtr:form>Participation in an activity, workshop or similar</gtr:form><gtr:geographicReach>Regional</gtr:geographicReach><gtr:id>0D66F66E-BE11-46D9-929B-284456B5B2DC</gtr:id><gtr:impact>The DNA of Innovation is a publication targeting the general public and media to showcase innovative research performed at Queen's. It is accompanied with a showcase event where researchers featured in the booklet man stands and explain their research to the general public.</gtr:impact><gtr:outcomeId>58b99030352c78.66388324</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Public/other audiences</gtr:primaryAudience><gtr:year>2015</gtr:year></gtr:disseminationOutput></gtr:disseminationOutputs><gtr:exploitationOutputs/><gtr:furtherFundingOutputs><gtr:furtherFundingOutput><gtr:amountPounds>694909</gtr:amountPounds><gtr:country>United Kingdom of Great Britain &amp; Northern Ireland (UK)</gtr:country><gtr:currCode>GBP</gtr:currCode><gtr:currCountryCode>United Kingdom</gtr:currCountryCode><gtr:currLang>en_GB</gtr:currLang><gtr:description>Software for the Future Call II</gtr:description><gtr:end>2018-03-02</gtr:end><gtr:fundingOrg>Engineering and Physical Sciences Research Council (EPSRC)</gtr:fundingOrg><gtr:fundingRef>EP/M01147X/1</gtr:fundingRef><gtr:id>4A2CC527-49FF-46E1-ABC9-2BA64532EBA6</gtr:id><gtr:outcomeId>58b98ada70c1d6.73283663</gtr:outcomeId><gtr:sector>Academic/University</gtr:sector><gtr:start>2015-04-01</gtr:start></gtr:furtherFundingOutput></gtr:furtherFundingOutputs><gtr:impactSummaryOutputs/><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>The current state-of-the-practice is that programmers need to explicitly encode parallelism in software in order to exploit the increasing number of processing cores available on modern processors. This has a number of ramifications on software and the software development process, in particular, that software developers need to spent time and effort to decide what pieces of the software should be adapted for parallel execution and in what way the parallelism is best expressed.

This project has investigated new ways for programmers to express parallelism in software. This new approach does not explicitly require programmers to express parallelism. Instead, programmers record properties of code from which parallelism is deduced. Programmers need to encode the &amp;quot;footprint&amp;quot; of tasks, i.e., all variables or memory locations that may be accessed by a well-defined piece of code, typically a procedure in a program. These properties are known by programmers anyway as they form part of the functionality and the contract of the code. Expressing them explicitly is thus a minor overhead.

The project has made following discoveries:
1. Complex, long-running programs may contain a variety of coarse-grain parallel loops and fine-grain parallel loops. Coarse-grain parallel loops contain large tasks that take a relatively long time to execute while fine-grain parallel loops contain short-running tasks. While it is technically easy to schedule coarse-grain tasks on processing cores, there exist real applications contain fine-grain parallel loops where tasks take little time in comparison to the overhead of scheduling the execution of these tasks. This overhead is known as the burden of the scheduler. We have observed this overhead on a range of applications in graph analytics, data analytics and high-performance computing.

2. We propose static scheduling as a means to reduce the scheduling burden. This static scheduling is calculated quickly at execution time prior to starting a loop, yet cannot adapt to workload imbalance and performance variability as general (dynamic) schedulers do. We have demonstrated that (i) static scheduling consistently improves the performance of fine-grain parallel loops on a 48-core system (i.e., load imbalance is not an issue in these loops) and (ii) a hybrid scheduler combining static and dynamic scheduling can be built with negligible overhead to switch between the modes of execution.

3. We found that reducing scheduler burden improves performance portability. Performance portability means that a program that executes fast on one processor type or configuration will also execute fast on another. We have found that (i) migrating parallel software from a low-core count machine to a high-core count machine may degrade performance for fine-grain loops; (ii) static scheduling is more robust to retain a speedup when performing this migration; (iii) static scheduling scales to larger core counts compared to dynamic schedulers in the case of fine-grain paralle loops.

4. We have developed and implemented the Swan parallel programming language, an extension of the MIT/Intel Cilkplus language, to experiment with scheduling strategies. We have implemented hybrid scheduling and NUMA-aware scheduling in Swan and demonstrated the efficiency of Swan on a range of applications, including numerical analysis, text analytics and graph analytics.</gtr:description><gtr:exploitationPathways>Our findings have lead to new scheduling policies that have been implemented in the Swan language and runtime system. Compiler and runtime support is available. As such, anyone with programming skills can take the Swan software systems and enhance the speed of their software using the new scheduling policies. This is mostly relevant to software performance engineers working in high-performance computing, data analytics/big data and data-intensive embedded systems.

We will work on the pathways to impact in the coming years by engaging in first instance with the high-performance computing community and seeking collaborations to apply Swan in real high-performance computing projects. This will provide us with additional insight that we can use to enhance and extend Swan. We will furthermore use our links to the OpenMP language committee which drafts the OpenMP standard in search of adoption of research outcomes of this project.</gtr:exploitationPathways><gtr:id>F2A731AC-E63D-4C3B-810F-F8BDE9011F6E</gtr:id><gtr:outcomeId>56cda7d9296b44.02829224</gtr:outcomeId><gtr:sectors><gtr:sector>Digital/Communication/Information Technologies (including Software),Other</gtr:sector></gtr:sectors></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs><gtr:softwareAndTechnicalProductOutput><gtr:description>This project has developed the Swan programming language for parallel programs using the task dataflow model. Swan is an extension of the MIT Cilk/Intel Cilkplus language and adds dataflow annotations to tasks. The software recognises now special variables that signify dataflow dependences between tasks and generates code for checking and enforcing dependences at runtime. The runtime is intended to be used along with a compiler that generates appropriate calls to the runtime system.

The Intel Cilkplus runtime comes under multiple licenses; BSD-3 license is appropriate

URLs:
https://github.com/hvdieren/swan_runtime</gtr:description><gtr:id>3BD0AC96-814F-44AF-85D4-9132138BA9F9</gtr:id><gtr:impact>The software is still under development. We are using it in ongoing research on scheduling of parallel programs and in a PhD project on optimising graph analytics algorithms. Partners in the EU FP7 project ASAP have been using it in the context of multi-engine data analytics.</gtr:impact><gtr:outcomeId>58b9852fe172f7.66923599</gtr:outcomeId><gtr:title>Swan - Extension of Intel Cilkplus runtime for parallel programs</gtr:title><gtr:type>Software</gtr:type><gtr:url>https://github.com/hvdieren/swan_runtime</gtr:url><gtr:yearFirstProvided>2016</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput><gtr:softwareAndTechnicalProductOutput><gtr:description>The Clang/LLVM compiler is a generic and extensible compiler for a variety of C-like languages. It has been extended to compile the Swan language extensions. Swan is an extension of the MIT Cilk/Intel Cilkplus language and adds dataflow annotations to tasks. The software recognises now special variables that signify dataflow dependences between tasks and generates code for checking and enforcing dependences at runtime. The generated code interfaces with the Intel Cilkplus runtime, which has been also modified to schedule the task dataflow programs.

License info LLVM and Clang: https://opensource.org/licenses/UoI-NCSA.php

URLs:
https://github.com/hvdieren/swan_clang
https://github.com/hvdieren/swan_llvm</gtr:description><gtr:id>E5A57E62-06E9-430F-82D5-54E7B908F96A</gtr:id><gtr:impact>The software is still under development. We are using it in ongoing research on scheduling of parallel programs and in a PhD project on optimising graph analytics algorithms. Partners in the EU FP7 project ASAP have been using it in the context of multi-engine data analytics.</gtr:impact><gtr:outcomeId>56c50b6c6aa632.32374472</gtr:outcomeId><gtr:title>Extension of Clang (LLVM) compiler for task dataflow programs</gtr:title><gtr:type>Software</gtr:type><gtr:url>https://github.com/hvdieren/swan_clang</gtr:url><gtr:yearFirstProvided>2016</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput><gtr:softwareAndTechnicalProductOutput><gtr:description>The implementation of example operations in data analytics, in particular K-means clustering and term frequency - inverse document frequency (TF-IDF) analysis. These operations are commonly used in data analytics and are implemented here in the Swan programming language. The software furthermore contains a library of common operations and data structures used in text analytics.
The software demonstrates the application of the Swan language to efficiently parallelise data-intensive programs.</gtr:description><gtr:id>F9F4044E-8EF8-4DF8-BEC4-9CA72CB7DA65</gtr:id><gtr:impact>The software is still under development. We are using it in ongoing research on scheduling of parallel programs and in a PhD project on optimising graph analytics algorithms. Partners in the EU FP7 project ASAP have been using it in the context of multi-engine data analytics.</gtr:impact><gtr:outcomeId>58b98755081ed3.56204892</gtr:outcomeId><gtr:title>Software - data analytics operators implemented in the Swan language</gtr:title><gtr:type>Software</gtr:type><gtr:url>https://github.com/hvdieren/asap_operators</gtr:url><gtr:yearFirstProvided>2016</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput><gtr:softwareAndTechnicalProductOutput><gtr:description>A collection of examples to use the Swan language for parallel programs, using the task dataflow annotations, NUMA-aware scheduling hints or a fine-grain scheduling hint. These examples require the Swan compiler and runtime system.

URLs:
https://github.com/hvdieren/swan_tests</gtr:description><gtr:id>4D09C022-F4DF-44B3-A713-CF700D6AF03E</gtr:id><gtr:impact>The software is still under development. We are using it in ongoing research on scheduling of parallel programs and in a PhD project on optimising graph analytics algorithms. Partners in the EU FP7 project ASAP have been using it in the context of multi-engine data analytics.</gtr:impact><gtr:outcomeId>58b98676cbcc41.98243681</gtr:outcomeId><gtr:title>Software - Swan usage examples</gtr:title><gtr:type>Software</gtr:type><gtr:url>https://github.com/hvdieren/swan_tests</gtr:url><gtr:yearFirstProvided>2016</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput></gtr:softwareAndTechnicalProductOutputs><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>E7A15F36-798F-4046-BD75-F0ABA33B06C2</gtr:id><gtr:title>Accelerating Graph Analytics by Utilising the Memory Locality of Graph Partitioning</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/3fbee13de0f083ea68ae008d704b0ddd"><gtr:id>3fbee13de0f083ea68ae008d704b0ddd</gtr:id><gtr:otherNames>Sun J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2017-01-01</gtr:date><gtr:issn>01903918</gtr:issn><gtr:outcomeId>5a82e88c310c31.51817430</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>E32B82EB-A642-4A44-A5D3-3EAEAD2FB707</gtr:id><gtr:title>A scalable and composable map-reduce system</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/05bd3f2dde73b2c9c539a04beacd7656"><gtr:id>05bd3f2dde73b2c9c539a04beacd7656</gtr:id><gtr:otherNames>Arif M</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2016-01-01</gtr:date><gtr:outcomeId>58b982f341fed7.21531180</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>0D22B9BD-0D67-47EF-9EF7-A389AE8B0BDA</gtr:id><gtr:title>Compiler and Runtime Support for Hybrid Static/Dynamic Scheduling</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/9bffc155b8fd651ca75c95d93c14ed01"><gtr:id>9bffc155b8fd651ca75c95d93c14ed01</gtr:id><gtr:otherNames>Vandierendonck, H.</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2015-01-01</gtr:date><gtr:outcomeId>56c50905b999d7.07069398</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>35E395D0-B346-4921-B0D5-EF202B45FA65</gtr:id><gtr:title>HPTA: High-performance text analytics</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/1bbfaf3315e65c4371b9c5d629410a9e"><gtr:id>1bbfaf3315e65c4371b9c5d629410a9e</gtr:id><gtr:otherNames>Vandierendonck H</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2016-01-01</gtr:date><gtr:outcomeId>58b982f30aa9e6.31314908</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>FB0FD5D7-E700-492E-8C32-A6FABF55A504</gtr:id><gtr:title>Operator and Workflow Optimization for High-Performance Analytics</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/9bffc155b8fd651ca75c95d93c14ed01"><gtr:id>9bffc155b8fd651ca75c95d93c14ed01</gtr:id><gtr:otherNames>Vandierendonck, H.</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2016-01-01</gtr:date><gtr:outcomeId>56c5089f3dd1f1.74114857</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>E57F97A1-E233-49F2-9D54-4F09ACEB454C</gtr:id><gtr:title>Reducing the burden of parallel loop schedulers for many-core processors</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/05bd3f2dde73b2c9c539a04beacd7656"><gtr:id>05bd3f2dde73b2c9c539a04beacd7656</gtr:id><gtr:otherNames>Arif M</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2018-01-01</gtr:date><gtr:outcomeId>5a82ea90dd5e97.15443446</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/L027402/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>D7BA1404-E001-4782-929E-E96E28B01201</gtr:id><gtr:percentage>50</gtr:percentage><gtr:text>Computer Sys. &amp; Architecture</gtr:text></gtr:researchTopic><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>50</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>