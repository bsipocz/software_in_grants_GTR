<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations/><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/818CD6C9-61EE-41F2-9F37-0C7A8F43E25D"><gtr:id>818CD6C9-61EE-41F2-9F37-0C7A8F43E25D</gtr:id><gtr:name>University of Birmingham</gtr:name><gtr:department>School of Computer Science</gtr:department><gtr:address><gtr:line1>Edgbaston Park Road</gtr:line1><gtr:line2>Edgbaston</gtr:line2><gtr:postCode>B15 2TT</gtr:postCode><gtr:region>West Midlands</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/818CD6C9-61EE-41F2-9F37-0C7A8F43E25D"><gtr:id>818CD6C9-61EE-41F2-9F37-0C7A8F43E25D</gtr:id><gtr:name>University of Birmingham</gtr:name><gtr:address><gtr:line1>Edgbaston Park Road</gtr:line1><gtr:line2>Edgbaston</gtr:line2><gtr:postCode>B15 2TT</gtr:postCode><gtr:region>West Midlands</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/5F5AA040-40C1-4D09-A4CF-9D5410E1F8FD"><gtr:id>5F5AA040-40C1-4D09-A4CF-9D5410E1F8FD</gtr:id><gtr:firstName>Paul</gtr:firstName><gtr:otherNames>Blain</gtr:otherNames><gtr:surname>Levy</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FE056091%2F1"><gtr:id>FDF87ACE-1FE8-4867-8A55-47B4302C51CF</gtr:id><gtr:title>Semantics of Nondeterminism: Functions, Strategies and Bisimulation</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Fellowship</gtr:grantCategory><gtr:grantReference>EP/E056091/1</gtr:grantReference><gtr:abstractText>A key question in the theory of programming is: when are two programs equivalent? The answer will depend on what we think a program means. For example, we can think of a program as a function: the user gives all the required input, and then the computer behaves accordingly. Or we can think of it as a strategy for a game between the computer and the user: the computer gives some information, the user responds, the computer gives some more information, the user responds, and so on. These viewpoints have been extremely fruitful in recent years.To reason about a computer system, it is often necessary to idealize it as nondeterministic, i.e.\ possessing a range of possible behaviours. The factors that determine its actual behaviour are too low-level and complex to consider explicitly. But this apparently simple idea has ramifications for the theory of programming language semantics that are not well understood. They centre on the same questions: when are two programs equivalent, and what do programs mean? Previous research has used mathematical structures known from the theory of deterministic programs. But these have limited applicability to nondeterministic programs, and lead to somewhat awkward notions of equivalence. This research will proceed in the opposite direction: begin with certain computationally natural notions of equivalence, and investigate what structures they lead to. In some cases (thinking of programs as strategies), these are likely to be structures that we already know, but, by proceeding in this way, we aim to relate them more closely to the way programs actually behave.In other cases (thinking of programs as functions), completely new structures will be required. Some mysterious theorems have been proved that show that, in a sense, all programs (of a certain kind) share some behaviour---yet they do not tell us what this behaviour is. We will therefore undertake a careful examination of programs' behaviour to solve this mystery, and thereby obtain the required structures.</gtr:abstractText><gtr:fund><gtr:end>2012-12-31</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2008-01-01</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>416684</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs/><gtr:disseminationOutputs/><gtr:exploitationOutputs/><gtr:furtherFundingOutputs/><gtr:impactSummaryOutputs/><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>I brought together two powerful ways of reasoning about programs: game semantics, where a piece of program code is understood as if it were playing a game with the user, and a less abstract style of reasoning where program code is not understood as having any intrinsic meaning. 

We obtained several precise descriptions of universes of computational processes that make arbitrary choices at different points in time. Our results included determination of how many steps are required to construct such universes, analysis of the way that different sets of behaviours may be combined, characterization of universes that indicate when one program simulates another, and showing that some plausible reasoning principles are in fact legitimate.

By contrast (and showing the importance of such arguments), we gave numerous examples of plausible but fallacious reasoning about the behaviour of pieces of code involving a variety of programming language features.

There were several other accomplishments but these are the main ones.</gtr:description><gtr:exploitationPathways>The work on game semantics raises numerous questions about different language features and how one shows algebraically that different constructions on codes are in fact equal.

The characterizations of universes could lead to denotational semantics but more analysis is needed especially of the connection to modal logic formulas.</gtr:exploitationPathways><gtr:id>FC293562-2341-46E5-AF76-78288F9C1621</gtr:id><gtr:outcomeId>546243dceb5495.77449203</gtr:outcomeId><gtr:sectors><gtr:sector>Digital/Communication/Information Technologies (including Software)</gtr:sector></gtr:sectors><gtr:url>http://www.cs.bham.ac.uk/~pbl/papers/</gtr:url></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs/><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>B704AEF3-97F4-407D-B87C-65B7768AFB37</gtr:id><gtr:title>From Applicative to Environmental Bisimulation</gtr:title><gtr:parentPublicationTitle>Electronic Notes in Theoretical Computer Science</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/5074de5ffea3742d617edc94328f1bfa"><gtr:id>5074de5ffea3742d617edc94328f1bfa</gtr:id><gtr:otherNames>Koutavas V</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2011-01-01</gtr:date><gtr:outcomeId>546158a1993047.08090117</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>4C9AB576-12D1-4D89-8F69-A801BF92D247</gtr:id><gtr:title>On Final Coalgebras of Power-Set Functors and Saturated Trees</gtr:title><gtr:parentPublicationTitle>Applied Categorical Structures</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/35a713084680a08c2881a36798c0d095"><gtr:id>35a713084680a08c2881a36798c0d095</gtr:id><gtr:otherNames>Ad?mek J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2014-01-01</gtr:date><gtr:outcomeId>546158a26b06d9.64443048</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>12CDAA1B-516B-405D-9DF1-E17551010667</gtr:id><gtr:title>Exploring the Boundaries of Monad Tensorability on Set</gtr:title><gtr:parentPublicationTitle>Logical Methods in Computer Science</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/f58a7ce14f9b0241eefc04f0c2507b21"><gtr:id>f58a7ce14f9b0241eefc04f0c2507b21</gtr:id><gtr:otherNames>Bowler N</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2013-01-01</gtr:date><gtr:outcomeId>54615a506044f0.78669289</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>36C873D1-6D2D-4EAA-8D5C-5FCFB1C7E3C1</gtr:id><gtr:title>Normal form bisimulation for parametric polymorphism</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/d3c11d24548b49661b5a28fe348e2686"><gtr:id>d3c11d24548b49661b5a28fe348e2686</gtr:id><gtr:otherNames>P Levy</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2008-01-01</gtr:date><gtr:outcomeId>m_937831029413ffd1e8</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>4DB848E2-DE9D-4602-B3E5-1A1E9A55EB0E</gtr:id><gtr:title>Exploratory Functions on Nondeterministic Strategies, up to Lower Bisimilarity</gtr:title><gtr:parentPublicationTitle>Electronic Notes in Theoretical Computer Science</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/af635a4e4ba88788eaac9c075773908b"><gtr:id>af635a4e4ba88788eaac9c075773908b</gtr:id><gtr:otherNames>Levy P</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2009-01-01</gtr:date><gtr:outcomeId>546158a14c8789.42319810</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>A2E9B414-B20C-454A-9801-175750A41E1F</gtr:id><gtr:title>Global State Considered Helpful</gtr:title><gtr:parentPublicationTitle>Electronic Notes in Theoretical Computer Science</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/af635a4e4ba88788eaac9c075773908b"><gtr:id>af635a4e4ba88788eaac9c075773908b</gtr:id><gtr:otherNames>Levy P</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2008-01-01</gtr:date><gtr:outcomeId>5461572f298071.72651037</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/E056091/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>90</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic><gtr:researchTopic><gtr:id>E05CFE0B-163D-412D-A3C2-28E89B2CA336</gtr:id><gtr:percentage>10</gtr:percentage><gtr:text>Software Engineering</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>