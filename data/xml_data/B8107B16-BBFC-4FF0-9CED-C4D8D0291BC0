<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations/><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/3EAE04CA-9D62-4483-B9C4-F91AD9F4C5A9"><gtr:id>3EAE04CA-9D62-4483-B9C4-F91AD9F4C5A9</gtr:id><gtr:name>University of Oxford</gtr:name><gtr:department>Computer Science</gtr:department><gtr:address><gtr:line1>University Chest</gtr:line1><gtr:line2>Wellington Square</gtr:line2><gtr:line4>Oxford</gtr:line4><gtr:postCode>OX1 2JD</gtr:postCode><gtr:region>South East</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/3EAE04CA-9D62-4483-B9C4-F91AD9F4C5A9"><gtr:id>3EAE04CA-9D62-4483-B9C4-F91AD9F4C5A9</gtr:id><gtr:name>University of Oxford</gtr:name><gtr:address><gtr:line1>University Chest</gtr:line1><gtr:line2>Wellington Square</gtr:line2><gtr:line4>Oxford</gtr:line4><gtr:postCode>OX1 2JD</gtr:postCode><gtr:region>South East</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/850FE923-1BDF-40F4-BA8A-54E6B32E43B8"><gtr:id>850FE923-1BDF-40F4-BA8A-54E6B32E43B8</gtr:id><gtr:firstName>Daniel</gtr:firstName><gtr:surname>Kroening</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole><gtr:personRole url="http://gtr.ukri.org:80/person/F4416405-8832-4572-915C-CF26F5084D21"><gtr:id>F4416405-8832-4572-915C-CF26F5084D21</gtr:id><gtr:firstName>Joel</gtr:firstName><gtr:surname>Ouaknine</gtr:surname><gtr:roles><gtr:role><gtr:name>CO_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FH017585%2F1"><gtr:id>B8107B16-BBFC-4FF0-9CED-C4D8D0291BC0</gtr:id><gtr:title>Verification of Shared-Memory Concurrent Software</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Research Grant</gtr:grantCategory><gtr:grantReference>EP/H017585/1</gtr:grantReference><gtr:abstractText>Software products are becoming increasingly complex. One of the chiefreasons for this is the demand for concurrent software thatefficiently exploits multiple execution cores. Such systems, such asIntel's Core Duo, have become ubiquitous over the last two or threeyears. Unfortunately, developing reliable concurrent programs is adifficult and specialised task, requiring highly skilled engineers,most of whose efforts are spent on the testing and validationphases. As a result, there is a strong economic andstrategic incentive for software houses to automate parts of theverification process.Random simulation and testing, while automated, has severelimitations, particularly in the case of concurrent software, in whichthe plethora of possible thread interleavings often conspires toconceal design flaws. Formal verification, on the other hand, can alsobe automated, and tools that implement it check a concurrent programfor all its possible behaviours.Numerous tools to hunt down functional flaws in hardware designs have beenavailable commercially for a number of years. The use of such tools iswidespread, and there is a broad range of vendors. In contrast, the marketfor formal tools that address the need for quality software---and even moreso for concurrent software---is still in its infancy.The proposed research project focuses on shared-variableconcurrency, i.e., eliminating programming errors related tomulti-threaded programs in which the threads communicate via a sharedportion of the memory. This programming paradigm is frequently used,and is the predominant form of concurrency on commodity computingsystems. Furthermore, errors relating to concurrency often depend onthe process schedule, which is difficult to control. As a consequence,such errors are difficult to test for and to reproduce, yet can havewide-ranging and potentially devastating consequences.We propose to investigate (i) verification by means of automatedsummarisation of threads, (ii) identification of transactions,enabling partial-order reductions, and (iii) Craiginterpolation to derive thread invariants. Our primary target arelow-level applications written in C/C++, and we will supportboth the POSIX thread API and the WIN32 thread API to maximizethe applicability of our research. We will evaluate the benefit of ourmethods and tools in collaboration with industrial users.</gtr:abstractText><gtr:fund><gtr:end>2014-02-28</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2010-09-01</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>428481</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs/><gtr:disseminationOutputs/><gtr:exploitationOutputs/><gtr:furtherFundingOutputs/><gtr:impactSummaryOutputs><gtr:impactSummaryOutput><gtr:description>There exists an extensive range of applications for CBMC, the software tool further developed by this grant, for full details see http://www.cprover.org/cbmc/applications.shtml. 

CBMC has been used in the automotive industry for checking functionality of software, for verification of C code in pacemakers, for analysing driver interactions with semi-autonomous vehicles, and for run-time verification in ultra-critical systems used in aircraft.

Tools using our technology are being sold by BTC embedded systems, Tata Consulting Services and used in-house by Toyota Motor Corporation.</gtr:description><gtr:firstYearOfImpact>2011</gtr:firstYearOfImpact><gtr:id>509BB961-8E9C-4A8C-A48A-B31573476860</gtr:id><gtr:impactTypes><gtr:impactType>Economic</gtr:impactType></gtr:impactTypes><gtr:outcomeId>546392e3749df2.82260447</gtr:outcomeId><gtr:sector>Digital/Communication/Information Technologies (including Software),Electronics,Energy,Financial Services, and Management Consultancy,Healthcare,Manufacturing, including Industrial Biotechology,Transport</gtr:sector></gtr:impactSummaryOutput></gtr:impactSummaryOutputs><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>Software products are becoming increasingly complex, and one of the chief reasons for this is the demand for concurrent software that efficiently exploits multi-core hardware. Such systems are now commonplace in everything from mobile phones to medical devices. Unfortunately developing reliable concurrent programs is a difficult and specialised task, requiring highly skilled engineers, most of whose efforts are spent on the testing and validation phases. This project worked towards automating parts of the verification process, focusing on eliminating programming errors related to multi-threaded programs in which the threads communicate via a shared portion of the memory. 

We have further developed CBMC, a Bounded Model Checker for ANSI-C and C++ programs. This tool is in use at IBM and won the gold medal in the Competition on Software Verification in 2014.

Our research findings have been used to validate parts of the linux kernel, now used on mobile phones worldwide.</gtr:description><gtr:exploitationPathways>The main beneficiaries of our work will be (i) other researchers
in both academia and industry, who will be able to leverage our ideas and algorithms in the context of their own research, and (ii) industries for which software quality is of critical importance, such as those required to provide evidence of third-party safety certification (SIL3 or above) for their software. 

We have released binaries, source code and the papers proofs on our website.</gtr:exploitationPathways><gtr:id>4662BEF3-4736-4CC7-B080-D53F16FB0D51</gtr:id><gtr:outcomeId>546361f258cfb3.89187186</gtr:outcomeId><gtr:sectors><gtr:sector>Digital/Communication/Information Technologies (including Software),Electronics,Energy,Financial Services, and Management Consultancy,Healthcare,Manufacturing, including Industrial Biotechology,Security and Diplomacy,Transport</gtr:sector></gtr:sectors><gtr:url>http://www.cprover.org/wmm/</gtr:url></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs/><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>899E853F-A1A5-4E57-8E95-083F8D07FDEA</gtr:id><gtr:title>Counterexample-guided abstraction refinement for symmetric concurrent programs</gtr:title><gtr:parentPublicationTitle>Formal Methods in System Design</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/4d31bd5c118828012549edcb29f8a90c"><gtr:id>4d31bd5c118828012549edcb29f8a90c</gtr:id><gtr:otherNames>Donaldson A</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2012-01-01</gtr:date><gtr:outcomeId>doi_53cfdbfdb316aece</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>78BEA6EC-F55C-4C52-810A-E91F0F535873</gtr:id><gtr:title>Bit-Precise Procedure-Modular Termination Analysis</gtr:title><gtr:parentPublicationTitle>ACM Transactions on Programming Languages and Systems</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/36e6bd83dfd373c441dfe6211f736a6c"><gtr:id>36e6bd83dfd373c441dfe6211f736a6c</gtr:id><gtr:otherNames>Chen H</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2017-01-01</gtr:date><gtr:outcomeId>5a352c7584b202.06673759</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>015E7366-FFB5-4B70-8D9E-3FB136D484D2</gtr:id><gtr:title>Under-approximating loops in C programs for fast counterexample detection.</gtr:title><gtr:parentPublicationTitle>Formal methods in system design</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/0cdf277c528469f02313c7f73bc6399d"><gtr:id>0cdf277c528469f02313c7f73bc6399d</gtr:id><gtr:otherNames>Kroening D</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2015-01-01</gtr:date><gtr:issn>0925-9856</gtr:issn><gtr:outcomeId>5675fb72e3ed4</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>BE9AAD3D-267B-4334-A640-004C5F7C975F</gtr:id><gtr:title>Deciding floating-point logic with abstract conflict driven clause learning</gtr:title><gtr:parentPublicationTitle>Formal Methods in System Design</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/b97a9c671c4eff48626278b6d7458a9b"><gtr:id>b97a9c671c4eff48626278b6d7458a9b</gtr:id><gtr:otherNames>Brain M</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2013-01-01</gtr:date><gtr:outcomeId>544e6d6124c755.34373429</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>C770A606-F2BC-4C22-B7C2-2D960B40D8FA</gtr:id><gtr:title>Effective Verification for Low-Level Software with Competing Interrupts</gtr:title><gtr:parentPublicationTitle>ACM Transactions on Embedded Computing Systems</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/bee967429355d6530bab7845867d5a3f"><gtr:id>bee967429355d6530bab7845867d5a3f</gtr:id><gtr:otherNames>Liang L</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2017-01-01</gtr:date><gtr:outcomeId>5a352ca25abe41.56761234</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>80B8353C-09C0-4BEB-8BD7-6FC98F3DE7DF</gtr:id><gtr:title>A visual studio plug-in for CProver</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/23139a2b9b10b8a278f04f030c9fd7dc"><gtr:id>23139a2b9b10b8a278f04f030c9fd7dc</gtr:id><gtr:otherNames>Seghir M</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2013-01-01</gtr:date><gtr:outcomeId>544e6df1798415.42218210</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>DB4220BE-FB27-4C53-A155-5EEF8EAD3304</gtr:id><gtr:title>Formal co-validation of low-level hardware/software interfaces</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/60f22b550fef83ec5ada932231d12db9"><gtr:id>60f22b550fef83ec5ada932231d12db9</gtr:id><gtr:otherNames>Horn A</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2013-01-01</gtr:date><gtr:outcomeId>doi_53d057057bdde09d</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>BC657C5D-1604-4010-B7E1-630315005405</gtr:id><gtr:title>Verifying multi-threaded software with impact</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/e5e3fd7f691af8ccb15cce2dac3cd045"><gtr:id>e5e3fd7f691af8ccb15cce2dac3cd045</gtr:id><gtr:otherNames>Wachter B</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2013-01-01</gtr:date><gtr:outcomeId>doi_53d057057bf30176</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/H017585/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>50</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic><gtr:researchTopic><gtr:id>E05CFE0B-163D-412D-A3C2-28E89B2CA336</gtr:id><gtr:percentage>50</gtr:percentage><gtr:text>Software Engineering</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>