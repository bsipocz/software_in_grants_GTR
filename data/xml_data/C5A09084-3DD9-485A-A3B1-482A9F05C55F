<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations><gtr:collaborator url="http://gtr.ukri.org:80/organisation/BB12A8E2-9FD6-47D7-ACD3-CDD2D2C5A1BB"><gtr:id>BB12A8E2-9FD6-47D7-ACD3-CDD2D2C5A1BB</gtr:id><gtr:name>Aalborg University</gtr:name><gtr:address><gtr:line1>Fredrik Bajers Vej 5</gtr:line1><gtr:line2>PO Box 159</gtr:line2><gtr:region>Outside UK</gtr:region><gtr:country>Denmark</gtr:country></gtr:address></gtr:collaborator><gtr:collaborator url="http://gtr.ukri.org:80/organisation/76119A17-D4F8-4258-80F0-C8B307FFFA52"><gtr:id>76119A17-D4F8-4258-80F0-C8B307FFFA52</gtr:id><gtr:name>Radboud University Nijmegen</gtr:name><gtr:address><gtr:line1>Radboud University Nijmegen</gtr:line1><gtr:line2>PO Box 9102</gtr:line2><gtr:line4>Nijmegen</gtr:line4><gtr:postCode>6500 HC</gtr:postCode><gtr:region>Outside UK</gtr:region><gtr:country>Netherlands</gtr:country></gtr:address></gtr:collaborator></gtr:collaborations><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/C6D0044A-2CD2-4167-B90B-922AF53E361F"><gtr:id>C6D0044A-2CD2-4167-B90B-922AF53E361F</gtr:id><gtr:name>University of Kent</gtr:name><gtr:department>Sch of Computing</gtr:department><gtr:address><gtr:line1>The Registry</gtr:line1><gtr:line4>Canterbury</gtr:line4><gtr:line5>Kent</gtr:line5><gtr:postCode>CT2 7NZ</gtr:postCode><gtr:region>South East</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/C6D0044A-2CD2-4167-B90B-922AF53E361F"><gtr:id>C6D0044A-2CD2-4167-B90B-922AF53E361F</gtr:id><gtr:name>University of Kent</gtr:name><gtr:address><gtr:line1>The Registry</gtr:line1><gtr:line4>Canterbury</gtr:line4><gtr:line5>Kent</gtr:line5><gtr:postCode>CT2 7NZ</gtr:postCode><gtr:region>South East</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/BB12A8E2-9FD6-47D7-ACD3-CDD2D2C5A1BB"><gtr:id>BB12A8E2-9FD6-47D7-ACD3-CDD2D2C5A1BB</gtr:id><gtr:name>Aalborg University</gtr:name><gtr:address><gtr:line1>Fredrik Bajers Vej 5</gtr:line1><gtr:line2>PO Box 159</gtr:line2><gtr:region>Outside UK</gtr:region><gtr:country>Denmark</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role><gtr:role><gtr:name>COLLABORATOR</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/76119A17-D4F8-4258-80F0-C8B307FFFA52"><gtr:id>76119A17-D4F8-4258-80F0-C8B307FFFA52</gtr:id><gtr:name>Radboud University Nijmegen</gtr:name><gtr:address><gtr:line1>Radboud University Nijmegen</gtr:line1><gtr:line2>PO Box 9102</gtr:line2><gtr:line4>Nijmegen</gtr:line4><gtr:postCode>6500 HC</gtr:postCode><gtr:region>Outside UK</gtr:region><gtr:country>Netherlands</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role><gtr:role><gtr:name>COLLABORATOR</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/CD7DBC07-8F55-4638-88E1-30B2335DFDA5"><gtr:id>CD7DBC07-8F55-4638-88E1-30B2335DFDA5</gtr:id><gtr:firstName>Rodolfo</gtr:firstName><gtr:otherNames>Sabas</gtr:otherNames><gtr:surname>Gomez</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FD067197%2F1"><gtr:id>C5A09084-3DD9-485A-A3B1-482A9F05C55F</gtr:id><gtr:title>Addressing Current Limitations of Real-time Model-checking</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Fellowship</gtr:grantCategory><gtr:grantReference>EP/D067197/1</gtr:grantReference><gtr:abstractText>Model checkers are tools which can automatically verify that a system behaves as intended. Because this is done on a model of a system, design flaws are identified before the system is actually built, thus saving time, money, and even loss of lives (e.g. systems that control the navigation of airplanes). Here we focus on real-time model-checking, which deals with systems where timing constraints are important.A (real-time) model-checker accepts a model represented as a network of timed automata. Timed automata are a graph-like notation where nodes represent states in the system behaviour, and arcs between nodes represents actions. Both the time when actions can be performed, and the amount of time the system may remain in a given state, can be constrained. The second input to model-checkers is a logic formula, describing the correctness property we wish to check (e.g, that a certain undesired event will never occur). The logic is usually known as the requirements logic.Model-checking is one of the triumphs of theoretical computer science research, with a large number of successful applications in the commercial sector. This is because model-checkers can now automatically verify properties which, in the past, required experts to develop complex proofs by hand. Among real-time model-checkers, Uppaal is the most extensively applied. The success of Uppaal in bridging the gap between academic research and industrial application is impressive. However, the approach still has a number of significant limitations:1. Timelocks. These are degenerate states in which time is unable to pass and cannot, in the general case, be detected. Timelocks arise because of the way in which the passage of time is modelled in timed automata semantics. Of course, physical systems cannot stop time. However, the verification of properties by model-checkers is (for reasons that I will not address here) only meaningful for timelock-free models. If a model contains a timelock, then the user cannot have complete confidence in the verification results. For example, Uppaal may report that a bad event never occurs, unaware that the event may indeed occur, but cannot be detected because the model stops time before this happens. Dangerously, this undetected bad event may still be present when the system is built.2. Expressiveness of Requirements Logic. Uppaal is very efficient. But to achieve this, the designers had to limit the kind of properties which can be written (i.e they had to restrict the requirements logic). As a result, many properties that one would like to verify cannot be checked with Uppaal, or are difficult to express (and so it is easier to make mistakes when trying to capture the meaning of a given property).The proposed research will address these limitations and thereby significantly improve the applicability of real-time model-checking in general, and Uppaal, in particular. This will be done as follows.1. Building from existing related work on the subject I will develop techniques and tools to prevent or detect timelocks in timed automata specifications (these are based on the structure of the timed automata).2. I will integrate research on choppy logics (more expressive than Uppaal's logic) with test automata approaches (a different way to express properties, which Uppaal can handle efficiently) to enlarge the class of properties that Uppaal can model-check, without compromising its performance. 3. I will undertake a set of demanding case studies to evaluate our Uppaal extensions (e.g. control systems, communication protocols, sensor networks, etc.).4. Finally, I will feed the results of our research into fields of computing for which symbolic real-time model checking is critical.</gtr:abstractText><gtr:fund><gtr:end>2009-12-06</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2006-12-07</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>169551</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs><gtr:collaborationOutput><gtr:collaboratingOrganisation>Aalborg University</gtr:collaboratingOrganisation><gtr:country>Denmark, Kingdom of</gtr:country><gtr:description>Aalborg University</gtr:description><gtr:id>4698E170-361E-479F-B275-67D3F5A759DC</gtr:id><gtr:outcomeId>b9b50356b9b5036a-1</gtr:outcomeId><gtr:sector>Academic/University</gtr:sector><gtr:start>2006-01-01</gtr:start></gtr:collaborationOutput><gtr:collaborationOutput><gtr:collaboratingOrganisation>Radboud University Nijmegen</gtr:collaboratingOrganisation><gtr:country>Netherlands, Kingdom of the</gtr:country><gtr:description>Radboud University Nijmegen</gtr:description><gtr:id>EC61A4CC-565A-4EC0-A297-C0F90F8AB0C8</gtr:id><gtr:outcomeId>b9b522fab9b5230e-1</gtr:outcomeId><gtr:sector>Academic/University</gtr:sector><gtr:start>2006-01-01</gtr:start></gtr:collaborationOutput></gtr:collaborationOutputs><gtr:disseminationOutputs/><gtr:exploitationOutputs/><gtr:furtherFundingOutputs/><gtr:impactSummaryOutputs><gtr:impactSummaryOutput><gtr:description>To my knowledge, my findings have not been used outside academia</gtr:description><gtr:firstYearOfImpact>2010</gtr:firstYearOfImpact><gtr:id>48167ACE-0C91-46A0-9B47-3BD91918074A</gtr:id><gtr:impactTypes/><gtr:outcomeId>54552552c8ec38.51037997</gtr:outcomeId></gtr:impactSummaryOutput></gtr:impactSummaryOutputs><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>We developed front-end tools that enhance the usability of Uppaal, a well known model-checker for real-time systems.

In conjunction with Uppaal, these tools allows the user to
- validate the model to check to rule out anomalous execution paths which could otherwise invalidate Uppaal's verification algorithm;
- extend the type of models that Uppaal can check; and
- extend the type of properties that Uppaal can verify.</gtr:description><gtr:exploitationPathways>Our front-end tools could be integrated into Uppaal releases. They could also be adapted to work with other real-time model-checkers.

The techniques developed during this project could be extended to implement automatic verification of more expressive logics.</gtr:exploitationPathways><gtr:id>847AD748-CAA6-44A9-AA5A-640635EAB9F4</gtr:id><gtr:outcomeId>545531890a5336.40796631</gtr:outcomeId><gtr:sectors><gtr:sector>Digital/Communication/Information Technologies (including Software),Electronics</gtr:sector></gtr:sectors></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs/><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>D0494601-704A-4A56-AF8B-B04990B1B4BE</gtr:id><gtr:title>Efficient detection of Zeno-runs in Timed Automata</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/df7158c63c565899e3702eedfa63628d"><gtr:id>df7158c63c565899e3702eedfa63628d</gtr:id><gtr:otherNames>RS Gomez</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2007-01-01</gtr:date><gtr:outcomeId>m_958544970614040e2a</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>0F140BAF-FBBB-4A36-9DA1-E99D2071BBC6</gtr:id><gtr:title>From LIDL(m) to Timed Automata</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/df7158c63c565899e3702eedfa63628d"><gtr:id>df7158c63c565899e3702eedfa63628d</gtr:id><gtr:otherNames>RS Gomez</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2009-01-01</gtr:date><gtr:outcomeId>r_215028179163daf22a</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>DA43E63D-CD63-4EDE-828D-4AC41A58B3CF</gtr:id><gtr:title>Model-checking timed automata with deadlines with Uppaal</gtr:title><gtr:parentPublicationTitle>Formal Aspects of Computing</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/dd0f24f90a67a6756000f7e2136d68f8"><gtr:id>dd0f24f90a67a6756000f7e2136d68f8</gtr:id><gtr:otherNames>G?mez R</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2011-01-01</gtr:date><gtr:outcomeId>545523eba91aa9.62749258</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>CEF61929-8766-48CE-BA2B-97EF608BEBDF</gtr:id><gtr:title>Compositional detection of Zeno-behaviour in Timed Automata with Deadlines</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/df7158c63c565899e3702eedfa63628d"><gtr:id>df7158c63c565899e3702eedfa63628d</gtr:id><gtr:otherNames>RS Gomez</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2009-01-01</gtr:date><gtr:outcomeId>r_764378459963daf112</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>EA9D5126-C606-45E8-8745-2CBF8BC6C65C</gtr:id><gtr:title>Compositional detection of Zeno-behaviour in Timed Automata</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/df7158c63c565899e3702eedfa63628d"><gtr:id>df7158c63c565899e3702eedfa63628d</gtr:id><gtr:otherNames>RS Gomez</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2006-01-01</gtr:date><gtr:outcomeId>r_295724592763cd7794</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/D067197/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>