<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations/><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/8319F78A-DCBD-49F6-BE00-78E1CD75CDA9"><gtr:id>8319F78A-DCBD-49F6-BE00-78E1CD75CDA9</gtr:id><gtr:name>University of York</gtr:name><gtr:department>Computer Science</gtr:department><gtr:address><gtr:line1>Heslington</gtr:line1><gtr:line4>York</gtr:line4><gtr:line5>North Yorkshire</gtr:line5><gtr:postCode>YO10 5DD</gtr:postCode><gtr:region>Yorkshire and The Humber</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/8319F78A-DCBD-49F6-BE00-78E1CD75CDA9"><gtr:id>8319F78A-DCBD-49F6-BE00-78E1CD75CDA9</gtr:id><gtr:name>University of York</gtr:name><gtr:address><gtr:line1>Heslington</gtr:line1><gtr:line4>York</gtr:line4><gtr:line5>North Yorkshire</gtr:line5><gtr:postCode>YO10 5DD</gtr:postCode><gtr:region>Yorkshire and The Humber</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/B9FC22F0-A3D7-4EA3-B97B-5A355C899880"><gtr:id>B9FC22F0-A3D7-4EA3-B97B-5A355C899880</gtr:id><gtr:firstName>Colin</gtr:firstName><gtr:surname>Runciman</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FC537009%2F1"><gtr:id>ACB22E52-0FD5-4F48-BAE7-B79830ADC969</gtr:id><gtr:title>A lazy polytypic grid: Generic data visualization methods that adapt to resources available</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Research Grant</gtr:grantCategory><gtr:grantReference>EP/C537009/1</gtr:grantReference><gtr:abstractText>Middleware and programming systems have a common aim, to provide access to computing services while hiding the lower-level details needed to provide services. Historically, the development of programming languages such as Algol and C was an advance that allowed access to CPU services (computations) while abstracting away from details of the physical machine. Today, middleware and libraries such as Globus, OpenGL, and VTK likewise provide a level of abstraction between the programmer and lower-level services (in this case, high-performance computing tasks, graphical rendering, and visualization, respectively).The vision driving e-science is the ability to carry out (large scale) scientific research supported by distributed computing resources connected by high performance networks. Grid computing is one part of this vision. It aims to allow grid users (e.g. scientists) to run programs that require large amounts of CPU time, data, or access to specialised resources, without concern for where those resources are located. Data visualization programs are good examples of the kind of application envisioned; visualization is a fundamental tool in scientific research, and large data sets are often in the range of gigabytes to terabytes in size. Powerful visualization software is available to work on such problems, but it (and other programming systems that run over the grid) still use essentially the same kind of abstractions as were developed for writing applications before the grid.A fundamental computer science challenge posed by e-science and grid computing is to take programming abstraction one stage further, and separate concerns about what a grid application must achieve from concerns over the specific resources on which it might be deployed, while still allowing the application to adapt itself (at run-time) to take best advantage of the specific resources that are made available to it. That is, the challenge is to allow developers to abstract away from details of the grid, while still benefiting from the distributed network of resources that it provides. One promising source of new abstractions comes from research within the programming systems community, particularly on pure functional programming languages. Polytypic programming, a new way of writing generic programs, seems to match the need of designing (visualization) algorithms that can operate on a range of data representations. Another idea first developed in the functional community, computing on demand , has also recently been used within visualization systems, though in an explicit way that intrudes into the definition of programs.Using functional abstractions and programming techniques could be a significant benefit to grid-based visualization and other future applications of the grid. Our proposal is to take four advances from research into programming languages and systems to create visualization applications that adapt autonomically and flexibly to grid resources, allowing developers and specialists to concentrate on the application problem.</gtr:abstractText><gtr:fund><gtr:end>2008-12-31</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2006-01-01</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>182627</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs/><gtr:disseminationOutputs/><gtr:exploitationOutputs/><gtr:furtherFundingOutputs/><gtr:impactSummaryOutputs/><gtr:intellectualPropertyOutputs/><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs/><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>14501373-4316-4563-A526-AF2F222DB521</gtr:id><gtr:title>Experience report</gtr:title><gtr:parentPublicationTitle>ACM SIGPLAN Notices</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/ec169872d8d45ec6028dcfa27e0d91dc"><gtr:id>ec169872d8d45ec6028dcfa27e0d91dc</gtr:id><gtr:otherNames>Duke D</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2008-01-01</gtr:date><gtr:outcomeId>doi_53d074074432026a</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>76785F9A-6631-4E14-85D8-B7E6785DE2A6</gtr:id><gtr:title>Fine-grained visualization pipelines and lazy functional languages.</gtr:title><gtr:parentPublicationTitle>IEEE transactions on visualization and computer graphics</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/ec169872d8d45ec6028dcfa27e0d91dc"><gtr:id>ec169872d8d45ec6028dcfa27e0d91dc</gtr:id><gtr:otherNames>Duke D</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2006-01-01</gtr:date><gtr:issn>1077-2626</gtr:issn><gtr:outcomeId>doi_53d05f05fd865680</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/C537009/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>50</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject><gtr:researchSubject><gtr:id>FB535BD0-E265-4C0A-8532-32DCB83A3951</gtr:id><gtr:percentage>50</gtr:percentage><gtr:text>Tools, technologies &amp; methods</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>A704B681-6133-41A6-8D93-905FFEC6353B</gtr:id><gtr:percentage>50</gtr:percentage><gtr:text>Computer Graphics &amp; Visual.</gtr:text></gtr:researchTopic><gtr:researchTopic><gtr:id>FA4A8455-3074-48A4-B0CD-5B85D94B79F5</gtr:id><gtr:percentage>50</gtr:percentage><gtr:text>eScience</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>