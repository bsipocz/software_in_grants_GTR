<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations/><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/936D002F-A8D1-4A93-AE5D-825ED0903D8D"><gtr:id>936D002F-A8D1-4A93-AE5D-825ED0903D8D</gtr:id><gtr:name>University of Nottingham</gtr:name><gtr:department>School of Computer Science</gtr:department><gtr:address><gtr:line1>University Park</gtr:line1><gtr:line4>Nottingham</gtr:line4><gtr:line5>Nottinghamshire</gtr:line5><gtr:postCode>NG7 2RD</gtr:postCode><gtr:region>East Midlands</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/936D002F-A8D1-4A93-AE5D-825ED0903D8D"><gtr:id>936D002F-A8D1-4A93-AE5D-825ED0903D8D</gtr:id><gtr:name>University of Nottingham</gtr:name><gtr:address><gtr:line1>University Park</gtr:line1><gtr:line4>Nottingham</gtr:line4><gtr:line5>Nottinghamshire</gtr:line5><gtr:postCode>NG7 2RD</gtr:postCode><gtr:region>East Midlands</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/4B49B44D-87C7-48B4-803E-31BF6F2ADBB6"><gtr:id>4B49B44D-87C7-48B4-803E-31BF6F2ADBB6</gtr:id><gtr:firstName>Venanzio</gtr:firstName><gtr:surname>Capretta</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FI038713%2F1"><gtr:id>24CB2747-2A29-4A68-AAAA-5B6E0877FDAE</gtr:id><gtr:title>Programming and Reasoning on Infinite Data Structures</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Research Grant</gtr:grantCategory><gtr:grantReference>EP/I038713/1</gtr:grantReference><gtr:abstractText>The project investigates infinite objects in formal logic and computation theory.
Although computer (like humans) have a limited memory and can manipulate only finite data structures, mathematics has developed theories to describe and reason about infinite abstract objects. In recent years, the computational and constructive aspects of infinity have been studied by means of new models and techniques. In functional programming languages, it is possible to represent potentially non-well-founded data by finite circular definitions that can be unfolded as needed: these are called &amp;quot;lazy&amp;quot; data types. Programming and reasoning techniques allow users and scientists to manipulate these objects as if they were actually working with infinities, while a solid theoretical basis provides the foundation for their concrete implementation.

The research field is that of type-based proof-assistant technology. Type theory is a collection of formal systems that subsumes formal logic, constructive mathematics, and programming languages. A type theory is at the same time a logical system, a functional programming language, and an environment for the development of formalized mathematics. Types are used to represent both data structures and logical formulas, elements denote both programs and proofs: this is known as the Curry-Howard isomorphism. Modern tools based on type theory use &amp;quot;coinductive&amp;quot; types, families, and predicates to represent potentially infinite data structures and proofs.

Their semantic justification comes from the categorical theory of final coalgebras. The formal requirements for acceptability of these constructions are growing progressively more technical and elaborate. This project (FRIS, from here on) will explore clear semantic principles that will both simplify the implementation and extend its applicability. Two lines of research will be pursued: Study generalizations of the notion of final coalgebra, for example in the line of corecursive algebras or in the context of fibration categories, to give a good mathematical understanding of infinite structures; Apply the method of reflection to coinductive objects, that is, encode inside the system a type of syntactic expressions that are interpreted as potentially infinite objects and then exploit the correspondence between formal manipulation of the codes and mathematical operations on the interpretations.
The final product of FRIS will be a programming/reasoning computer system based on new mathematical principles.

Reflection is a programming and reasoning technique in formal logic: It consists in defining, inside a formal logical system, a model of the syntax of the system itself and of its rules. This allows syntactic manipulations of terms and formulas that were not possible at the base semantic level. Although the perfect correspondence between the base system and the internal representation cannot be proved formally (this fact is the kernel of G&amp;ouml;del's incompleteness theorem), we can still justify many useful syntactic operations by their semantic meaning.
In the specific case of coinductive types, we propose the following strategy: At the foundational level, we want to characterize them semantically as actually infinite structures; at a different level, we will construct a syntactic model that delineates how these objects can be rendered and stored.</gtr:abstractText><gtr:potentialImpactText>Although the investigation of the mathematical properties of infinite computational objects is a rather abstract theoretical subject, there are rich potential applications for it. The impact of the PRIDS project is linked to the improvement of (dependently typed) programming languages. Specifically, we aim to give both more simplicity and power to coinductive types. It will be easier to learn to use them and they will offer more flexibility.

Some specific examples of applications are:

1. I/O: An electronic device is an agent that interacts with its environment. It receives a continuous stream of information from the outside and produces a stream of responses and behaviours. We can usefully see both input and output as never-ending computational objects, that is, elements of coinductive types. The achievemts of PRIDS will have a direct impact on how devices can be programmed and how we can reason about their behaviour.

2. Infinite Games: The formal treatment of game theory is just starting to be developed. Type theory is perfectly suitable for it, since it can easily model games and strategies; it can compute the outcome of a run of the game; and it can support reasoning about the mathematical properties of the game. Games in which termination is not guaranteed from the beginning require potentially infinite notions of run and strategy. These can be provided by coinductive types. Coinductive methods have already proved useful to reason about knowledge states of the players. Reflection can be helpful in this framework: strategies can specify a potentially infinite behavior, but they need to be formulated in a syntactically finite form.

3. General Recursion: Type theory does not directly allow undefined objects and non-terminating computations.
This is necessary to guarantee consistency and decidability of type checking. The drawback is that much of the computational richness of general recursion is lost. General computability needs to be represented indirectly, for example using an inductive termination predicate. It is possible to use coinductive types to model computation traces, thus embedding computability theory in a proof assistant.</gtr:potentialImpactText><gtr:fund><gtr:end>2013-12-31</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2011-07-01</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>43049</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs/><gtr:disseminationOutputs/><gtr:exploitationOutputs/><gtr:furtherFundingOutputs/><gtr:impactSummaryOutputs/><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>As result of this grant, a theory of &amp;quot;coinductive types&amp;quot; has been developed. Coinductive types are data structures containing an infinite amount of information. They can be represented by recursive dynamic processes. The main achievement of the grant has been the invention of the notion of &amp;quot;Wander Type&amp;quot;, that allows us to define structures that have an infinite development controlled by a recursive specification.</gtr:description><gtr:exploitationPathways>The findings may be taken forward by integrating a general theory of inductive and coinductive types into a sofware system based on dependent type theory which allows programming with infinite processes.</gtr:exploitationPathways><gtr:id>F10C7214-0E11-4F2F-A405-974C4A01E753</gtr:id><gtr:outcomeId>r-5387014202.2026837774748c</gtr:outcomeId><gtr:sectors><gtr:sector>Digital/Communication/Information Technologies (including Software)</gtr:sector></gtr:sectors><gtr:url>http://www.duplavis.com/venanzio/</gtr:url></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs/><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>47F84819-82EF-4A73-B7F3-FD317C5F763B</gtr:id><gtr:title>Wander types : A formalization of coinduction-recursion</gtr:title><gtr:parentPublicationTitle>Progress in Informatics</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/a5712d1eaf916e5b32f1c517858a41bb"><gtr:id>a5712d1eaf916e5b32f1c517858a41bb</gtr:id><gtr:otherNames>CAPRETTA V</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2013-01-01</gtr:date><gtr:outcomeId>doi_53d0850850f9fb9a</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>6F5FB534-D98C-4F21-9A38-5D0B714198E3</gtr:id><gtr:title>The continuity of monadic stream functions</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/70c5ab0ddc23b0514153d170b8374ba9"><gtr:id>70c5ab0ddc23b0514153d170b8374ba9</gtr:id><gtr:otherNames>Capretta V</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2017-01-01</gtr:date><gtr:outcomeId>5aa2af43b6e9f7.91216157</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/I038713/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>