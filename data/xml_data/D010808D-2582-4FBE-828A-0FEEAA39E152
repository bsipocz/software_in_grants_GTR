<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations/><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/BECA2763-0902-40AA-8DB2-836A5731CF58"><gtr:id>BECA2763-0902-40AA-8DB2-836A5731CF58</gtr:id><gtr:name>Brunel University</gtr:name><gtr:department>Information Systems Computing and Maths</gtr:department><gtr:address><gtr:line1>Brunel University</gtr:line1><gtr:line4>Uxbridge</gtr:line4><gtr:line5>Middlesex</gtr:line5><gtr:postCode>UB8 3PH</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/BECA2763-0902-40AA-8DB2-836A5731CF58"><gtr:id>BECA2763-0902-40AA-8DB2-836A5731CF58</gtr:id><gtr:name>Brunel University</gtr:name><gtr:address><gtr:line1>Brunel University</gtr:line1><gtr:line4>Uxbridge</gtr:line4><gtr:line5>Middlesex</gtr:line5><gtr:postCode>UB8 3PH</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/6452A9F0-43D6-4CAD-B212-6A378D9317F0"><gtr:id>6452A9F0-43D6-4CAD-B212-6A378D9317F0</gtr:id><gtr:firstName>Rob</gtr:firstName><gtr:surname>Hierons</gtr:surname><gtr:orcidId>0000-0002-4771-1446</gtr:orcidId><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FG04354X%2F1"><gtr:id>D010808D-2582-4FBE-828A-0FEEAA39E152</gtr:id><gtr:title>The Birth, Life and Death of Semantic Mutants</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Research Grant</gtr:grantCategory><gtr:grantReference>EP/G04354X/1</gtr:grantReference><gtr:abstractText>Traditional Mutation Testing produces test cases that distinguish between some description N and variants of it. Each variant is produced by applying a mutation operator to N. A test set that is good at distinguishing N from variants of N is likely to be good at finding faults that are similar to applications of the mutation operators. Mutation testing was originally applied to programs but more recently it has been applied to other forms of descriptions such as specifications. Mutants are produced through the application of mutation operators, each of which may be applied to a relevant point in a program in order to produce a mutant. The mutation operators carry out small syntactic changes. For example, + might be replaced by -, &amp;gt; might be replaced by &amp;gt;=, a variable in an expression may be replaced by a constant, or part of an expression may be deleted. The mutation operators are designed to represent syntactically small errors. Typically, mutants are used to either judge the adequacy of a test set (does it distinguish between N and its mutants?) and also to drive test generation (we want a test set that distinguishes between N and its mutants).Traditional mutation testing produces mutants that represent small slips or mistakes in programming and thus represent a class of faults. A mutant program differs from the program under test by a small syntactic change (e.g. a / replaces a * ). However, real developers will also suffer from misunderstandings, especially when moving between description notations. They misapprehend the semantics of the description before them. They may, for example, import their understanding from a previously used programming language, or else from an understanding of how a particular tool interprets the notation. We believe that a semantically oriented mutation testing approach may assist in the discovery of such problems. We seek to show that a semantically oriented mutation testing approach is feasible and can find faults not found by traditional syntactic mutation (and likely, by other popular testing strategies).Misunderstanding the semantics of descriptive notations is a common source of problems in software development. We believe that these misunderstandings can be represented as semantic mutants over descriptions and that test data produced to kill semantic mutants is effective at finding faults caused by such misunderstandings: It will often find faults that are typically missed by test sets produced by extant testing strategies (and in particular, by test sets that are produced to kill traditional syntactic mutants). We also believe that he production of semantic mutants and the generation of test data to kill them can be automated.</gtr:abstractText><gtr:fund><gtr:end>2013-05-31</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2009-06-01</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>372405</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs/><gtr:disseminationOutputs/><gtr:exploitationOutputs/><gtr:furtherFundingOutputs/><gtr:impactSummaryOutputs/><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>In mutation testing, the code of the system under test (SUT) S is mutated/changed to produce a set M of mutants that are similar to S. The quality of a set T of test cases, to be used to test S, is then assessed by determining how good T is at distinguishing between S and the mutants in M. The idea is that if T is good at showing that the mutants in M (which are similar to S) are not the same as S then it will also be good at finding faults in S. 

Traditionally, mutation testing has used mutation operators that make small changes to the syntax of the code (i.e. how the code is written). For example, a statement such as x = y + z might be changed to x = y - z. These types of changes capture a class of mistakes that a programmer can make - those that lead to small syntactic mistakes. However, it does not capture semantic mistakes, in which the programmer misunderstands a feature of the programming language used. This project explored how mutation testing can instead be based on such mistakes in the understand of semantics, an approach we called semantic mutation testing.

One of the main outcomes of the project was a more detailed framework for semantic mutation testing along with a software tool that implements this for one of the most important programming languages (C). Semantic mutation testing was evaluate in the context of an important class of semantic mistakes (those associated with floating point computation). We also investigated semantic mistakes for a particular type of model, regarding how the SUT should behave (a message sequence chart or a sequence diagram), and how this can be used as the basis for software testing.</gtr:description><gtr:exploitationPathways>First, the outcomes provide a framework and it is possible to explore other types of semantic mutants. We showed that the framework can be applied at the level of code (C) and also models (MSCs). For work that considers C code, there is also the potential to implement new mutation operators in our tool SMT-C or to apply a similar approach.</gtr:exploitationPathways><gtr:id>8E33EFC3-EA5A-446D-946B-122205F98829</gtr:id><gtr:outcomeId>54492178829345.98844925</gtr:outcomeId><gtr:sectors><gtr:sector>Digital/Communication/Information Technologies (including Software)</gtr:sector></gtr:sectors></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs/><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>609FEE59-31A4-423D-9797-1A4150A6A027</gtr:id><gtr:title>Semantic Mutation Testing</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/edc5f7c0e58dfe61e7f81d9f8d2b7544"><gtr:id>edc5f7c0e58dfe61e7f81d9f8d2b7544</gtr:id><gtr:otherNames>Clark J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2010-01-01</gtr:date><gtr:isbn>978-1-4244-6773-0</gtr:isbn><gtr:outcomeId>doi_53d05905915776d4</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>F3C113D4-3019-4DF2-B98A-649AD8DE13A1</gtr:id><gtr:title>A framework for pathologies of message sequence charts</gtr:title><gtr:parentPublicationTitle>Information and Software Technology</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/356e42e3bc732434a498dd7247bf2e59"><gtr:id>356e42e3bc732434a498dd7247bf2e59</gtr:id><gtr:otherNames>Dan H</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2012-01-01</gtr:date><gtr:outcomeId>doi_53cff7ff77425bf2</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>11691CA1-49FF-4FCB-AF0E-9267410F72EB</gtr:id><gtr:title>Conformance Testing from Message Sequence Charts</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/356e42e3bc732434a498dd7247bf2e59"><gtr:id>356e42e3bc732434a498dd7247bf2e59</gtr:id><gtr:otherNames>Dan H</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2011-01-01</gtr:date><gtr:isbn>978-1-61284-174-8</gtr:isbn><gtr:outcomeId>doi_53d0590590b9cd0b</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>DC2E28A2-9AD5-4E62-A997-AFCB20B20C39</gtr:id><gtr:title>Implementation Relations for Testing Through Asynchronous Channels</gtr:title><gtr:parentPublicationTitle>The Computer Journal</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/151ded8535601d0ac1a8b09a43c0f435"><gtr:id>151ded8535601d0ac1a8b09a43c0f435</gtr:id><gtr:otherNames>Hierons R</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2012-01-01</gtr:date><gtr:outcomeId>doi_55f95d95d7340bd0</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>1E1B9E5D-EDEF-45BD-9AA1-85B6B4398F23</gtr:id><gtr:title>Controllability Problems in MSC-Based Testing</gtr:title><gtr:parentPublicationTitle>The Computer Journal</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/356e42e3bc732434a498dd7247bf2e59"><gtr:id>356e42e3bc732434a498dd7247bf2e59</gtr:id><gtr:otherNames>Dan H</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2011-01-01</gtr:date><gtr:outcomeId>doi_53d046046493827e</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>607AF4AC-CEDB-4CB2-AADF-FBD8416743C6</gtr:id><gtr:title>Semantic mutation testing</gtr:title><gtr:parentPublicationTitle>Science of Computer Programming</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/edc5f7c0e58dfe61e7f81d9f8d2b7544"><gtr:id>edc5f7c0e58dfe61e7f81d9f8d2b7544</gtr:id><gtr:otherNames>Clark J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2013-01-01</gtr:date><gtr:outcomeId>doi_53d00900949c0ad4</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>4F0C00A8-E839-4616-ADD0-8944EF7CB621</gtr:id><gtr:title>Non-local Choice and Implied Scenarios</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/356e42e3bc732434a498dd7247bf2e59"><gtr:id>356e42e3bc732434a498dd7247bf2e59</gtr:id><gtr:otherNames>Dan H</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2010-01-01</gtr:date><gtr:isbn>978-1-4244-8289-4</gtr:isbn><gtr:outcomeId>doi_53d05c05c57c21a2</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>19B3E000-D64C-4572-AEE2-EFE56A3F88E9</gtr:id><gtr:title>Semantic Mutation Analysis of Floating-Point Comparison</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/356e42e3bc732434a498dd7247bf2e59"><gtr:id>356e42e3bc732434a498dd7247bf2e59</gtr:id><gtr:otherNames>Dan H</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2012-01-01</gtr:date><gtr:isbn>978-1-4577-1906-6</gtr:isbn><gtr:outcomeId>doi_53d0590590d231bd</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>5CA161F7-A0C3-4C3F-A1E0-48FB5102493C</gtr:id><gtr:title>The Oracle Problem When Testing from MSCs</gtr:title><gtr:parentPublicationTitle>The Computer Journal</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/356e42e3bc732434a498dd7247bf2e59"><gtr:id>356e42e3bc732434a498dd7247bf2e59</gtr:id><gtr:otherNames>Dan H</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2013-01-01</gtr:date><gtr:outcomeId>doi_53d0460464b25649</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>D12944B2-470F-4A9B-85BA-1A36EF262B38</gtr:id><gtr:title>SMT-C: A Semantic Mutation Testing Tools for C</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/356e42e3bc732434a498dd7247bf2e59"><gtr:id>356e42e3bc732434a498dd7247bf2e59</gtr:id><gtr:otherNames>Dan H</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2012-01-01</gtr:date><gtr:isbn>978-1-4577-1906-6</gtr:isbn><gtr:outcomeId>doi_53d0590590dded6e</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/G04354X/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>E05CFE0B-163D-412D-A3C2-28E89B2CA336</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Software Engineering</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>