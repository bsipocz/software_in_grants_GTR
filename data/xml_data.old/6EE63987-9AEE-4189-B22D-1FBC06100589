<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations><gtr:collaborator url="http://gtr.ukri.org:80/organisation/387B997E-2A15-45F5-87B8-35618B89EFDE"><gtr:id>387B997E-2A15-45F5-87B8-35618B89EFDE</gtr:id><gtr:name>Portcullis Computer Security Ltd</gtr:name><gtr:address><gtr:line1>The Grange barn</gtr:line1><gtr:line2>Pike's End</gtr:line2><gtr:postCode>HA5 2EX</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address></gtr:collaborator></gtr:collaborations><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/C6D0044A-2CD2-4167-B90B-922AF53E361F"><gtr:id>C6D0044A-2CD2-4167-B90B-922AF53E361F</gtr:id><gtr:name>University of Kent</gtr:name><gtr:department>Sch of Computing</gtr:department><gtr:address><gtr:line1>The Registry</gtr:line1><gtr:line4>Canterbury</gtr:line4><gtr:line5>Kent</gtr:line5><gtr:postCode>CT2 7NZ</gtr:postCode><gtr:region>South East</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/C6D0044A-2CD2-4167-B90B-922AF53E361F"><gtr:id>C6D0044A-2CD2-4167-B90B-922AF53E361F</gtr:id><gtr:name>University of Kent</gtr:name><gtr:address><gtr:line1>The Registry</gtr:line1><gtr:line4>Canterbury</gtr:line4><gtr:line5>Kent</gtr:line5><gtr:postCode>CT2 7NZ</gtr:postCode><gtr:region>South East</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/387B997E-2A15-45F5-87B8-35618B89EFDE"><gtr:id>387B997E-2A15-45F5-87B8-35618B89EFDE</gtr:id><gtr:name>Portcullis Computer Security Ltd</gtr:name><gtr:address><gtr:line1>The Grange barn</gtr:line1><gtr:line2>Pike's End</gtr:line2><gtr:postCode>HA5 2EX</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role><gtr:role><gtr:name>COLLABORATOR</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/5C8EBC6B-C62D-4427-B2F8-975FA92BBFD5"><gtr:id>5C8EBC6B-C62D-4427-B2F8-975FA92BBFD5</gtr:id><gtr:firstName>Andy</gtr:firstName><gtr:surname>King</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FF012896%2F1"><gtr:id>6EE63987-9AEE-4189-B22D-1FBC06100589</gtr:id><gtr:title>Fostering Collaboration between White-hats and Academia</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Research Grant</gtr:grantCategory><gtr:grantReference>EP/F012896/1</gtr:grantReference><gtr:abstractText>Security is a continuing source of concern with the use of computers and software. Subtle programming errors that can be exploited by malicious hackers are continually being spotted even in the most widely used computer programs.One common error is code that allows buffers to overrun, that is, the program permits data to be written to a part of a memory which should really be forbidden. If a hacker can exploit such a memory access, then they might be able to launch a security attack. Such an attack is made by overwriting part of the program with a small program. One example of such a program is a worm that, when executed, not only erases precious work stored on the computer but often attacks other computers running the same buggy program.Since most computers today are connected via the Internet, it only takes a split second for a worm to attack other computers in the vicinity which in turn will attack many more. Worms like the MS Blaster Worm have incurred losses of hundreds of million of dollars to society by rendering computers unusable. Moreover, even those buffer overruns that cannot be exploited for malicious intent, still need to be tracked down because they are often symptomatic of errors or oversights introduced or made by the programmer.Therefore, detecting these errors is of great importance. To track down these faults, security companies such as Portcullis Computer Security recruit hackers who are prepared to use their skills and knowledge for fault finding. These so-called ethical hackers scrutinize code, manually searching for programming errors which can be exploited to create a security breach.Some of the most subtle errors relate to way computers store and manipulate numbers. Very large numbers can get mangled in a computer and if a program does not check that the result of calculation is erroneous, then it possible for the program to reach a confused state which can lay open the program, and the system on which the program runs, to attack. These problems reside in programs because it can be very difficult for a human to anticipate the knock-on effects of number mangling. Thus it is somewhat unsatisfactory relying on another human to check the program for such a flaw. Organisations such as Portcullis are therefore interested in collaborating in research on automating the discovery of such faults so that securing a program is less error-prone and more systematic. This suggests exploring techniques that have been developed within academia for fault finding. Within academia, the field of program analysis research is concerned with reasoning about programs in a systematic and principled way. This field of research is driven by fresh research challenges. Researchers are continually searching for new problems, particularly problems drawn from unusual settings, because these problems often lead to step-change advances in the field. The problem of diagnosing the potential for dangerous number mangling seems to be one such research problem where both the academic and industrial parties involved in the research stand to gain by working together on this problem.</gtr:abstractText><gtr:fund><gtr:end>2008-06-30</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2007-10-01</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>42571</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs><gtr:collaborationOutput><gtr:collaboratingOrganisation>Portcullis Computer Security Ltd</gtr:collaboratingOrganisation><gtr:country>United Kingdom of Great Britain &amp; Northern Ireland (UK)</gtr:country><gtr:description>Portcullis Computer Security Ltd</gtr:description><gtr:id>E7D25629-7DA4-4BE4-86C5-95F16D8EB9EB</gtr:id><gtr:outcomeId>b9c91472b9c91486-1</gtr:outcomeId><gtr:sector>Private</gtr:sector><gtr:start>2007-01-01</gtr:start></gtr:collaborationOutput></gtr:collaborationOutputs><gtr:disseminationOutputs/><gtr:exploitationOutputs/><gtr:furtherFundingOutputs/><gtr:impactSummaryOutputs/><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>Security is a continuing source of concern with the use of computers and software. Subtle programming errors that can be exploited by malicious hackers are continually being spotted even in the most widely used computer programs.



One common error is code that allows buffers to overrun, that is, the program permits data to be written to a part of a memory which should really be forbidden. If a hacker can exploit such a memory access, then they might be able to launch a security attack. Such an attack is made by overwriting part of the program with a small program. One example of such a program is a &amp;quot;worm&amp;quot; that, when executed, not only erases precious work stored on the computer but often attacks other computers running the same buggy program.



Since most computers today are connected via the Internet, it only takes a split second for a worm to attack other computers in the vicinity which in turn will attack many more. Worms like the MS Blaster Worm have incurred losses of hundreds of million of dollars to society by rendering computers unusable. Moreover, even those buffer overruns that cannot be exploited for malicious intent, still need to be tracked down because they are often symptomatic of errors or oversights introduced or made by the programmer.



Therefore, detecting these errors is of great importance. To track down these faults, security companies such as Portcullis Computer Security recruit hackers who are prepared to use their skills and knowledge for fault finding. These so-called ethical hackers scrutinize code, manually searching for programming errors which can be exploited to create a security breach.



Some of the most subtle errors relate to way computers store and manipulate numbers. Very large numbers can get mangled in a computer and if a program does not check that the result of calculation is erroneous, then it possible for the program to reach a confused state which can lay open the program, and the system on which the program runs, to attack. These problems reside in programs because it can be very difficult for a human to anticipate the knock-on effects of number mangling. Thus it is somewhat unsatisfactory relying on another human to check the program for such a flaw. Organisations such as Portcullis are therefore interested in collaborating in research on automating the discovery of such faults so that securing a program is less error-prone and more systematic. This suggests exploring techniques that have been developed within academia for fault finding. 



Within academia, the field of program analysis research is concerned with reasoning about programs in a systematic and principled way. This field of research is driven by fresh research challenges. Researchers are continually searching for new problems, particularly problems drawn from unusual settings, because these problems often lead to step-change advances in the field. The problem of diagnosing the potential for dangerous number mangling seems to be one such research problem where both the academic and industrial parties involved in the research stand to gain by working together on this problem.</gtr:description><gtr:exploitationPathways>Computer security industry Computer security industry</gtr:exploitationPathways><gtr:id>16B94663-E416-4315-9B2B-6FEC66869752</gtr:id><gtr:outcomeId>r-4295044089.0109587773d914</gtr:outcomeId><gtr:sectors><gtr:sector>Digital/Communication/Information Technologies (including Software)</gtr:sector></gtr:sectors></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs/><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>21C9CCA1-07AE-46EB-BFA9-227E8EB744CC</gtr:id><gtr:title>Computer Aided Verification</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/260fa42b858aee5033974fabe5a89dd6"><gtr:id>260fa42b858aee5033974fabe5a89dd6</gtr:id><gtr:otherNames>King A</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2008-01-01</gtr:date><gtr:isbn>978-3-540-70543-7</gtr:isbn><gtr:outcomeId>doi_53cfccfcc818e6dc</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>2110E15F-A3AA-4551-AF6B-5F91127BF962</gtr:id><gtr:title>An Anytime Algorithm for Generalized Symmetry Detection in ROBDDs</gtr:title><gtr:parentPublicationTitle>IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/cbd70f5e90c99496922d71d1c29f89bb"><gtr:id>cbd70f5e90c99496922d71d1c29f89bb</gtr:id><gtr:otherNames>Kettle N</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2008-01-01</gtr:date><gtr:outcomeId>doi_53d05d05d21c3a22</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/F012896/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>34B6BDD6-DA02-4CA0-A969-29D50394A953</gtr:id><gtr:percentage>40</gtr:percentage><gtr:text>Networks &amp; Distributed Systems</gtr:text></gtr:researchTopic><gtr:researchTopic><gtr:id>E05CFE0B-163D-412D-A3C2-28E89B2CA336</gtr:id><gtr:percentage>60</gtr:percentage><gtr:text>Software Engineering</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>