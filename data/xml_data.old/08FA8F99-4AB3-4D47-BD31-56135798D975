<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations><gtr:collaborator url="http://gtr.ukri.org:80/organisation/CE43EBFA-3FC9-44BC-B6FF-001F11664C46"><gtr:id>CE43EBFA-3FC9-44BC-B6FF-001F11664C46</gtr:id><gtr:name>Aarhus University</gtr:name><gtr:address><gtr:line1>Nordre Ringgade 1</gtr:line1><gtr:line4>Aarhus C</gtr:line4><gtr:line5>DK-8000</gtr:line5><gtr:region>Outside UK</gtr:region><gtr:country>Denmark</gtr:country></gtr:address></gtr:collaborator><gtr:collaborator url="http://gtr.ukri.org:80/organisation/9ECFC591-7C9D-49B7-9F6E-18FAD2D94172"><gtr:id>9ECFC591-7C9D-49B7-9F6E-18FAD2D94172</gtr:id><gtr:name>University of Lyon</gtr:name><gtr:address><gtr:line1>Caserne Sergent Blandan</gtr:line1><gtr:line2>37 Rue du Repos</gtr:line2><gtr:line3>69365</gtr:line3><gtr:region>Outside UK</gtr:region></gtr:address></gtr:collaborator></gtr:collaborations><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/D5337A10-AC8A-402A-8164-C5F9CC6B0140"><gtr:id>D5337A10-AC8A-402A-8164-C5F9CC6B0140</gtr:id><gtr:name>Queen Mary, University of London</gtr:name><gtr:department>Sch of Electronic Eng &amp; Computer Science</gtr:department><gtr:address><gtr:line1>Mile End Road</gtr:line1><gtr:line4>London</gtr:line4><gtr:postCode>E1 4NS</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/D5337A10-AC8A-402A-8164-C5F9CC6B0140"><gtr:id>D5337A10-AC8A-402A-8164-C5F9CC6B0140</gtr:id><gtr:name>Queen Mary, University of London</gtr:name><gtr:address><gtr:line1>Mile End Road</gtr:line1><gtr:line4>London</gtr:line4><gtr:postCode>E1 4NS</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/CE43EBFA-3FC9-44BC-B6FF-001F11664C46"><gtr:id>CE43EBFA-3FC9-44BC-B6FF-001F11664C46</gtr:id><gtr:name>Aarhus University</gtr:name><gtr:address><gtr:line1>Nordre Ringgade 1</gtr:line1><gtr:line4>Aarhus C</gtr:line4><gtr:line5>DK-8000</gtr:line5><gtr:region>Outside UK</gtr:region><gtr:country>Denmark</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>COLLABORATOR</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/9ECFC591-7C9D-49B7-9F6E-18FAD2D94172"><gtr:id>9ECFC591-7C9D-49B7-9F6E-18FAD2D94172</gtr:id><gtr:name>University of Lyon</gtr:name><gtr:address><gtr:line1>Caserne Sergent Blandan</gtr:line1><gtr:line2>37 Rue du Repos</gtr:line2><gtr:line3>69365</gtr:line3><gtr:region>Outside UK</gtr:region></gtr:address><gtr:roles><gtr:role><gtr:name>COLLABORATOR</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/260BE3B0-1CFE-4C58-9C4C-9C4CC29984FF"><gtr:id>260BE3B0-1CFE-4C58-9C4C-9C4CC29984FF</gtr:id><gtr:firstName>Nikos</gtr:firstName><gtr:surname>Tzevelekos</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FL022478%2F1"><gtr:id>08FA8F99-4AB3-4D47-BD31-56135798D975</gtr:id><gtr:title>Program Reasoning with Nominal Game Semantics</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Research Grant</gtr:grantCategory><gtr:grantReference>EP/L022478/1</gtr:grantReference><gtr:abstractText>While in recent years great strides have been made in software verification, most of these successes have targeted programming languages of a strong imperative flavour. However, there is an emerging class of languages using higher-order features to cater for well-structured and disciplined programming outputs, for which verification methods are very scarce. In such higher-order languages, capturing formally the behaviour of programs is highly non-trivial and, therefore, even simple program analysis tasks prove to be surprisingly daunting.

This project will combine the latest techniques from game semantics with successful verification approaches from the imperative setting in order to achieve a novel reasoning methodology for higher-order languages. Game semantics is a theory of computation that has emerged as a robust paradigm for assigning formal mathematical semantics to higher-order programs. Game models offer a particularly suitable foundation for program analysis as they combine two features of focal importance: abstraction and compositionality. The former is achieved by focussing only on observable program behaviours, which significantly reduces the examined state-space of programs. The latter amounts to modelling compound program phrases by canonically combining the models of their respective sub-phrases, which in turn allows for the independent analysis of program components and enables local reasoning techniques.

The major obstacle in applying game semantics to real program analysis has been the modelling of dynamic generative effects, involving the generation of fresh references, objects, channels, etc. This issue has been addressed by a recent breakthrough that introduced atomic objects, called &amp;quot;names&amp;quot;, in games for representing datatypes of dynamically generated resources. Names led to the introduction of a new strand of the theory called Nominal Game Semantics. Nominal games have extended the reach of game models to realistic higher-order languages and have brought the field to the point where one can start developing formal reasoning methods for such languages.

Our research will take the theory of game semantics to the next level and apply it to program reasoning. Our aim is to derive practical program logics for higher-order programs, equipped with high-level rules enabling abstraction and local reasoning, and complement them with a prototype implementation. The overall vision behind this proposal is to exploit the strong handle on higher-order computation provided by the nominal approach to game semantics in order to significantly extend the reach of modern approaches to verification and aid the production of better software.</gtr:abstractText><gtr:potentialImpactText>Software systems have become an integral part of the infrastructure of our society and control almost every aspect of our lives. Hence, verification and correctness are nowadays far from marginal software requirements concerning solely safety-critical systems. Rather, they are desiderata of software development in general: they concern widespread applications written in a variety of programming languages. The verification problem for such languages poses new challenges as high-level programming features (references, higher-order functions, etc) require accurate handling. Moreover, realistic applications can expand to millions of lines of code, thus demanding decidedly scalable methods.

Our project will achieve the introduction and prototype implementation of a new methodology for reasoning about higher-order programs. Because of its novel ingredients, namely the combination of precise abstractions, compositionality and focus on local reasoning, we hope to contribute techniques that will influence verification standards. By adopting more refined semantic models, we give space to methods which start from a higher level of accuracy and abstraction. By founding our approach on compositional models and reasoning in local environments, we anticipate substantial gains in scalability.

Higher-order programming languages have seen a surge of interest in recent years, with specific applications coming from security-sensitive domains like the finance sector. Hence, the development of verification methods and tools for such languages is of major interest to the industry. Until now, such methods and tools have been very scarce, as the analysis of higher-order programs is a daunting task. Our proposal aims at addressing this shortcoming using the unique advantages of program models obtained from game semantics, and nominal game semantics in particular.

In order to inform all interested parties about our approach, we have planned regular attendance of relevant conferences and workshops, research visits to groups pursuing related state-of-the-art research, and the organisation of a workshop devoted to program logics for higher-order program verification. The latter has been scheduled for the end of the first year of the project. It will coincide with the expected completion of the main tasks from the program logic work packages, when it will be possible to convey the core of our approach. Further connections will be made through visits to academic and industrial labs to give presentations. To that end we are going to exploit existing academic (e.g. Wessex Theory, Joint Theory Seminar) and industrial (e.g. Facebook, Microsoft) links at Queen Mary, as well as personal contacts made at conferences and the workshop.

As our project is of a foundational nature, the main short-term beneficiaries will be other researchers in academia and industry. In the longer term, we would like to see our approach incorporated into mainstream verification tools. Ultimately, we expect the work to impact actual system developers and, consequently, users at large.</gtr:potentialImpactText><gtr:fund><gtr:end>2015-12-29</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2014-06-30</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>100228</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs><gtr:collaborationOutput><gtr:collaboratingOrganisation>Aarhus University</gtr:collaboratingOrganisation><gtr:country>Denmark, Kingdom of</gtr:country><gtr:department>Department of Computer Science</gtr:department><gtr:description>Aarhus</gtr:description><gtr:id>83C908C3-B551-4292-821A-1C147E0F1E9A</gtr:id><gtr:impact>Conference submission</gtr:impact><gtr:outcomeId>56b22a1596b416.48144009-1</gtr:outcomeId><gtr:partnerContribution>Expertise and production of collaborative research</gtr:partnerContribution><gtr:piContribution>Expertise and production of collaborative research</gtr:piContribution><gtr:sector>Academic/University</gtr:sector><gtr:start>2015-01-01</gtr:start></gtr:collaborationOutput><gtr:collaborationOutput><gtr:collaboratingOrganisation>University of Lyon</gtr:collaboratingOrganisation><gtr:country>France, French Republic</gtr:country><gtr:description>Lyon</gtr:description><gtr:id>E8AE6635-F059-42A8-BAB7-1A82C12CA49C</gtr:id><gtr:impact>Emanating from the project, the collaboration with Dr Jaber is still ongoing and we are currently collaborating on an adjacent research direction.</gtr:impact><gtr:outcomeId>58a577ede6aee7.72430793-1</gtr:outcomeId><gtr:partnerContribution>Emanating from the project, the collaboration with Dr Jaber is still ongoing and we are currently collaborating on an adjacent research direction.</gtr:partnerContribution><gtr:piContribution>Emanating from the project, the collaboration with Dr Jaber is still ongoing and we are currently collaborating on an adjacent research direction.</gtr:piContribution><gtr:sector>Academic/University</gtr:sector><gtr:start>2017-01-01</gtr:start></gtr:collaborationOutput></gtr:collaborationOutputs><gtr:disseminationOutputs/><gtr:exploitationOutputs/><gtr:furtherFundingOutputs/><gtr:impactSummaryOutputs/><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>This research further developed the application of game semantics as a foundational theory for reasoning about software.

It examined the behaviour of modern higher-order programming languages and in particular contributed new techniques for producing highly accurate models of programming languages with polymorphism and higher-order references. 

Moreover, by incorporating ideas from game semantics and operational methods, it designed a novel method for proving equivalence of programs with higher-order references.

The project looked into the combination of game semantics with program logics and proved that separation logic techniques can be used to reason about intensional properties of higher-order programs, with games forming the underlying semantic backbone.</gtr:description><gtr:exploitationPathways>This research revealed subtleties in the behaviour of polymorphic programs in the presence of references, which make their understanding and modelling particularly elaborate. Our modelling technique can be therefore used by others for modelling and reasoning about such programs. 

The new technique introduced to reason about equivalence of programs opens the way to designing automatic methods for proving such equivalences, and to extensions to the polymorphic model we developed.

The application of separation logic on game-traces provides an example for the use of game semantics as a general-basis semantic theory for higher-order programs and, more concretely, a program reasoning method that can be put to use by the separation logic community.</gtr:exploitationPathways><gtr:id>2E862EB0-4BE8-402C-AB02-DFA6A74939B7</gtr:id><gtr:outcomeId>56ce2a945cdbd8.41329915</gtr:outcomeId><gtr:sectors><gtr:sector>Digital/Communication/Information Technologies (including Software)</gtr:sector></gtr:sectors></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs/><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>2150795F-5F59-4786-A417-C73D6831FDE7</gtr:id><gtr:title>Trace semantics for polymorphic references</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/aa4c04e55562ffc313262114c7912446"><gtr:id>aa4c04e55562ffc313262114c7912446</gtr:id><gtr:otherNames>Jaber G</gtr:otherNames></gtr:author></gtr:authors><gtr:outcomeId>56d4228c37cd60.96709049</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>2B9F69D1-DAB6-4786-B628-E56400A5A836</gtr:id><gtr:title>Bisimilarity in Fresh-Register Automata</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/161c699f33e251693f3d5479d75c241e"><gtr:id>161c699f33e251693f3d5479d75c241e</gtr:id><gtr:otherNames>Murawski A. S.</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2015-01-01</gtr:date><gtr:outcomeId>56b228ed8de2b3.03398077</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>CA1FEA1F-3535-46EE-805A-87381244F08F</gtr:id><gtr:title>Trace Properties from Separation Logic Specifications</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/6e1a31bf649397f21bc751573843a912"><gtr:id>6e1a31bf649397f21bc751573843a912</gtr:id><gtr:otherNames>Birkedal L</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2017-01-01</gtr:date><gtr:outcomeId>56deb9afe71b20.67710432</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/L022478/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>