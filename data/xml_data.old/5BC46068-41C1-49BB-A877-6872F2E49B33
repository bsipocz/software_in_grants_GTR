<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations/><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/03D8AFBB-3EA5-4885-B036-BD4F9F4F9849"><gtr:id>03D8AFBB-3EA5-4885-B036-BD4F9F4F9849</gtr:id><gtr:name>University of Sheffield</gtr:name><gtr:department>Computer Science</gtr:department><gtr:address><gtr:line1>Firth Court</gtr:line1><gtr:line2>Western Bank</gtr:line2><gtr:line4>Sheffield</gtr:line4><gtr:line5>South Yorkshire</gtr:line5><gtr:postCode>S10 2TN</gtr:postCode><gtr:region>Yorkshire and The Humber</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/03D8AFBB-3EA5-4885-B036-BD4F9F4F9849"><gtr:id>03D8AFBB-3EA5-4885-B036-BD4F9F4F9849</gtr:id><gtr:name>University of Sheffield</gtr:name><gtr:address><gtr:line1>Firth Court</gtr:line1><gtr:line2>Western Bank</gtr:line2><gtr:line4>Sheffield</gtr:line4><gtr:line5>South Yorkshire</gtr:line5><gtr:postCode>S10 2TN</gtr:postCode><gtr:region>Yorkshire and The Humber</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/99D6EE75-2C0F-44E9-8C7F-21BD7F40A636"><gtr:id>99D6EE75-2C0F-44E9-8C7F-21BD7F40A636</gtr:id><gtr:name>University of Augsburg</gtr:name><gtr:address><gtr:line1>Universitat Augsburg</gtr:line1><gtr:line2>Institut fur Physik</gtr:line2><gtr:line3>Universitatsstrasse 1</gtr:line3><gtr:region>Outside UK</gtr:region></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/D6C3234E-5048-4AA0-A116-0CAC51569B2D"><gtr:id>D6C3234E-5048-4AA0-A116-0CAC51569B2D</gtr:id><gtr:name>University of Queensland</gtr:name><gtr:address><gtr:line1>University of Queensland</gtr:line1><gtr:line4>Brisbane</gtr:line4><gtr:line5>Queensland 4972</gtr:line5><gtr:region>Outside UK</gtr:region><gtr:country>Australia</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/211B3DB0-8664-4B25-8CD3-1405CD72F0C7"><gtr:id>211B3DB0-8664-4B25-8CD3-1405CD72F0C7</gtr:id><gtr:name>University of Paderborn</gtr:name><gtr:address><gtr:line1>Warburger Str. 100</gtr:line1><gtr:region>Outside UK</gtr:region><gtr:country>Germany</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/E2F7C725-C309-41B1-8500-820BA5383443"><gtr:id>E2F7C725-C309-41B1-8500-820BA5383443</gtr:id><gtr:firstName>Georg</gtr:firstName><gtr:surname>Struth</gtr:surname><gtr:roles><gtr:role><gtr:name>CO_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole><gtr:personRole url="http://gtr.ukri.org:80/person/E2230FAB-EC7D-4768-8A7D-AC2E11B082E7"><gtr:id>E2230FAB-EC7D-4768-8A7D-AC2E11B082E7</gtr:id><gtr:firstName>Brijesh</gtr:firstName><gtr:surname>Dongol</gtr:surname><gtr:orcidId>0000-0003-0446-3507</gtr:orcidId><gtr:roles><gtr:role><gtr:name>RESEARCHER</gtr:name></gtr:role></gtr:roles></gtr:personRole><gtr:personRole url="http://gtr.ukri.org:80/person/6D4566BB-0EB2-4A62-8E47-0FCA535DF01C"><gtr:id>6D4566BB-0EB2-4A62-8E47-0FCA535DF01C</gtr:id><gtr:firstName>John</gtr:firstName><gtr:surname>Derrick</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FM017044%2F1"><gtr:id>5BC46068-41C1-49BB-A877-6872F2E49B33</gtr:id><gtr:title>Verifying concurrent algorithms on Weak Memory Models</gtr:title><gtr:status>Active</gtr:status><gtr:grantCategory>Research Grant</gtr:grantCategory><gtr:grantReference>EP/M017044/1</gtr:grantReference><gtr:abstractText>Multi-core computing architectures have become ubiquitous over the last decade. This has been driven by the demand for continual performance improvements to cope with the every increasing sophistication of applications (for example, in the areas of graphics and audio processing). It has been necessary due to the constraints on chip manufacture which have prevented the continuation of performance improvements of earlier decades achieved primarily by speeding up sequential computation. The inherent parallelism these multi-core architectures entail offer great technical opportunities. Exploiting these opportunities presents a number of technical challenges.

The high-level aim of this project is to address two key technical challenges in the area. Firstly, in order to fully exploit the potential concurrency, programmers are developing very subtle concurrent algorithms which dispense with the need to lock shared memory and data structures. Linearizability is the standard correctness criterion for concurrent programs. However, the complexity of these algorithms means that checking their correctness with a high degree of confidence is extremely difficult. Verification is needed, and we seek to develop appropriate proof methods to support it.

Secondly, most prior work on correctness assumes a memory model (sequential consistency) which is not implemented in practice. In reality to increase efficiency, typical multicore systems communicate via shared memory and use relaxed memory models which give greater scope for optimization. These are the memory models implemented in processors such as x86, PowerPC, and ARM, and on these linearizability isn't the only relevant correctness criteria, and we shall also develop proof methods to quiescent consistency, which is emerging as an alternative correctness criteria on these processors.</gtr:abstractText><gtr:potentialImpactText>The global benefits of multi-core computing are clear - better performance, and more sophisticated applications.
Correct concurrent algorithms are key to ensuring those benefits are realised. Without concurrent algorithms the performance benefits multi-core can offer are diminished. Without correct concurrent algorithms the range of applications that can take advantage of these benefits is limited (to those where high reliability is not a concern). The use of fine-grained concurrent algorithms has already moved from niche applications (such as graphics and audio processing) to widely used computing infrastructure-operating systems, and programming libraries (e.g., java.util.concurrent). Work on verifying correctness of these algorithms will help translate the potential benefits of these developments into real, tangible ones. Consequently, the ultimate economic implications of this strand of research are enormous. 

The use of lock-free algorithms is already standard in some applications, eg audio processors, operating systems and graphics. High-performance server software usually runs on multicore, and is increasingly using lock-free designs to improve performance. (eg see http://www.linuxjournal.com/content/lock-free-multi-producer-multi-consumer-queue-ring-buffer)

In addition, lock-free approaches are now entering the mainstream of Java, C++ etc. For example, until JDK 5.0, it was not possible to write wait-free, lock-free algorithms in the Java language without using native code, but with java.util.concurrent the situation has changed. The correct use of lock-free implementations of Java classes such as ConcurrentHashMap, AtomicInteger etc are frequently discussed on code bulletin boards. 

Similarly, CDS is a C++ template library of lock-free and fine-grained algorithms. It contains a collection of concurrent data structure implementations including memory support for x86 etc and lists (eg lazy list), queues Michael and Scott), SkipList etc.

Thus it is likely to become the norm to write lock-free algorithms in order to increase the parallelism but at the expense of a subtle and difficult argument of correctness.

Our work seeks to make an impact by enabling such algorithms to be verified correct. However, to date there has been little work on correctness of linearizability or quiescent consistency on the memory models of real processors. This is the contribution we seek to make.

Because of their subtlety, it can be exceptionally difficult to isolate any faults in correctness through testing, and their potential widespread use means that verified correctness (particularly at processor level) will be important. Because of the particular characteristics of weak memory models, the methodology and results for sequentially consistent architectures do not carry over automatically.

Ultimately the impact of this will be to enhance the correctness of software using such algorithms, which, with multi-core technology and implementation of specific memory models, could see very widespread usage.</gtr:potentialImpactText><gtr:fund><gtr:end>2018-11-28</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2015-05-29</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>389207</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs/><gtr:disseminationOutputs/><gtr:exploitationOutputs/><gtr:furtherFundingOutputs/><gtr:impactSummaryOutputs/><gtr:intellectualPropertyOutputs/><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs/><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>012FBFBF-CAC2-4DF8-9F7B-3CEB043DC863</gtr:id><gtr:title>Defining correctness conditions for concurrent objects in multicore architectures</gtr:title><gtr:parentPublicationTitle>Leibniz International Proceedings in Informatics, LIPIcs</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/23c7523271b897b2332648ab2cd8b0b5"><gtr:id>23c7523271b897b2332648ab2cd8b0b5</gtr:id><gtr:otherNames>Dongol B.</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2015-01-01</gtr:date><gtr:issn>18688969</gtr:issn><gtr:outcomeId>5a7dc76b2feac2.67252720</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>5A42BE36-E94B-454B-8802-F721A4AD737D</gtr:id><gtr:title>Interval-based data refinement: A uniform approach to true concurrency in discrete and real-time systems</gtr:title><gtr:parentPublicationTitle>Science of Computer Programming</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/142dc9ea8c15ac8e8fb4a19adad12a84"><gtr:id>142dc9ea8c15ac8e8fb4a19adad12a84</gtr:id><gtr:otherNames>Dongol B</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2015-01-01</gtr:date><gtr:outcomeId>563c9ce26839b0.16030678</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>D5E2F0D5-DC6F-44F3-A9A7-BCA020619CEE</gtr:id><gtr:title>Integrated Formal Methods</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/0023abac1f92a8b91b2b353e7d21f339"><gtr:id>0023abac1f92a8b91b2b353e7d21f339</gtr:id><gtr:otherNames>Derrick J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2007-01-01</gtr:date><gtr:outcomeId>589aed0c746af0.49250296</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>2570031C-1B2F-417B-B8BD-B7E2DAA07E89</gtr:id><gtr:title>Mechanized proofs of opacity: a comparison of two techniques</gtr:title><gtr:parentPublicationTitle>Formal Aspects of Computing</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/0023abac1f92a8b91b2b353e7d21f339"><gtr:id>0023abac1f92a8b91b2b353e7d21f339</gtr:id><gtr:otherNames>Derrick J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2017-01-01</gtr:date><gtr:outcomeId>5a2fe630e381f8.64172427</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>F3CE1D21-30FB-4FB6-ABFA-390645870EF2</gtr:id><gtr:title>Verifying Linearisability</gtr:title><gtr:parentPublicationTitle>ACM Computing Surveys</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/142dc9ea8c15ac8e8fb4a19adad12a84"><gtr:id>142dc9ea8c15ac8e8fb4a19adad12a84</gtr:id><gtr:otherNames>Dongol B</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2015-01-01</gtr:date><gtr:outcomeId>563c9cdfdad5d5.59422361</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>CCC97807-8FC9-40EA-A2AF-046938D10A4A</gtr:id><gtr:title>Proving opacity of a pessimistic STM</gtr:title><gtr:parentPublicationTitle>Leibniz International Proceedings in Informatics, LIPIcs</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/c4e847d39d6901666f2f1925823e793d"><gtr:id>c4e847d39d6901666f2f1925823e793d</gtr:id><gtr:otherNames>Doherty S.</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2017-01-01</gtr:date><gtr:issn>18688969</gtr:issn><gtr:outcomeId>5a7dc81a76a6b8.15622376</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>03440951-B3F4-4FAD-B2EA-ED43FB4AF062</gtr:id><gtr:title>Inferring extended finite state machine models from software executions</gtr:title><gtr:parentPublicationTitle>Empirical Software Engineering</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/c4c3e0a6c94d799746ed103c7fa08a77"><gtr:id>c4c3e0a6c94d799746ed103c7fa08a77</gtr:id><gtr:otherNames>Walkinshaw N</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2015-01-01</gtr:date><gtr:outcomeId>56b88e729c7646.33716147</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/M017044/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>