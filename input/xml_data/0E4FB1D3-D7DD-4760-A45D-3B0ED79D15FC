<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations/><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/7A0397DD-E0C6-4EA3-8031-B841D2503C4D"><gtr:id>7A0397DD-E0C6-4EA3-8031-B841D2503C4D</gtr:id><gtr:name>Royal Holloway, University of London</gtr:name><gtr:department>Computer Science</gtr:department><gtr:address><gtr:line1>Egham Hill</gtr:line1><gtr:line4>Egham</gtr:line4><gtr:line5>Surrey</gtr:line5><gtr:postCode>TW20 0EX</gtr:postCode><gtr:region>South East</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/7A0397DD-E0C6-4EA3-8031-B841D2503C4D"><gtr:id>7A0397DD-E0C6-4EA3-8031-B841D2503C4D</gtr:id><gtr:name>Royal Holloway, University of London</gtr:name><gtr:address><gtr:line1>Egham Hill</gtr:line1><gtr:line4>Egham</gtr:line4><gtr:line5>Surrey</gtr:line5><gtr:postCode>TW20 0EX</gtr:postCode><gtr:region>South East</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>FELLOW</gtr:name></gtr:role><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/2DB7ED73-8E89-457A-A395-FAC12F929C1A"><gtr:id>2DB7ED73-8E89-457A-A395-FAC12F929C1A</gtr:id><gtr:name>University of Edinburgh</gtr:name><gtr:address><gtr:line1>Old College</gtr:line1><gtr:line2>South Bridge</gtr:line2><gtr:line3>Mayfield Road</gtr:line3><gtr:line4>Edinburgh</gtr:line4><gtr:postCode>EH8 9YL</gtr:postCode><gtr:region>Scotland</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/B83BB614-4980-444C-9C80-453677FE39EA"><gtr:id>B83BB614-4980-444C-9C80-453677FE39EA</gtr:id><gtr:name>University Paris-Est Marne-la-Vallee</gtr:name><gtr:address><gtr:line1>Cite Descartes - 5</gtr:line1><gtr:line2>bd Descartes</gtr:line2><gtr:line3>Champs-sur-Marne</gtr:line3><gtr:line4>77454 Marne-La Vallee Cedex 2</gtr:line4><gtr:region>Outside UK</gtr:region><gtr:country>France</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/1414E596-868F-4FBB-A9F7-CFD4E705AEC8"><gtr:id>1414E596-868F-4FBB-A9F7-CFD4E705AEC8</gtr:id><gtr:firstName>Matthew</gtr:firstName><gtr:surname>Hague</gtr:surname><gtr:roles><gtr:role><gtr:name>FELLOW</gtr:name></gtr:role><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FK009907%2F1"><gtr:id>0E4FB1D3-D7DD-4760-A45D-3B0ED79D15FC</gtr:id><gtr:title>Verification of Concurrent and Higher-Order Recursive Programs</gtr:title><gtr:status>Active</gtr:status><gtr:grantCategory>Fellowship</gtr:grantCategory><gtr:grantReference>EP/K009907/1</gtr:grantReference><gtr:abstractText>Global society increasingly relies on devices controlled by software, from TV
sets to vehicle braking systems. It is considered a &amp;quot;fact-of-life&amp;quot; that
software contains errors, which can come at great cost, such as the Mars Polar
Lander crash or the 1992 failure of the London Ambulance Dispatch Service. In a
2008 study, the US NIST agency estimates faulty software costs the US economy
$59.5bn annually.

Classically software is tested by running it under as many difficult situations
as possible. However, it is not feasible to run a program under all
environments. Hence, testing relies on the perspicacity of the testing engineer
who must carefully choose environments that may expose flaws. 

Modern computers increase performance by allowing many computer programs to run
concurrently. Anticipating the interactions of even as a little as two programs
is an extremely difficult task, and errors are often difficult to replicate and
diagnose. Furthermore, the efficiency of hardware is often increased by
permitting behaviours a software developer would not expect. 

An alternative approach to ensuring correctness is model-checking.
Model-checking attempts to use fully automatic techniques to prove that a
program behaves as expected under all conditions. This area has flourished
recently, including a 2007 Turing Award for Clarke, Emerson and Sifakis, who
transformed the technique from a theoretical pursuit into an industrially
applicable product. Model-checking is embraced by companies like Microsoft (to
improve its Windows OS) and Altran-Praxis (for safety-critical software). 

However, model-checkers must rely on simplified models of computer programs to
guarantee results, leading to many correct programs being labelled erroneous.
This is a design choice, following the argument that it it better to raise a
false alarm, than let an error pass by. 

However, a large number of false alarms damage reliability and usability --- a
software developer will not study reported errors carefully if the majority are,
in fact, not errors at all. This is a real problem in the large scale
deployment of such tools. The goal of this fellowship is to increase the
precision of verification tools --- reducing the number of false alarms ---
while retaining the efficiency of current techniques, resulting in
model-checking tools that are more reliable and usable. 

During this fellowship, we will construct a state-of-the-art verification
framework, unifying several prototypical tools and requiring novel
model-checking techniques, and permitting new ideas to be experimented with
quickly. The framework will be tested on real-world software to ensure its
usability and reliability. It will accurately model difficult programming
paradigms, such as modern concurrent behaviours and &amp;quot;higher-order&amp;quot; constructs
(increasingly embraced by state-of-the-art programming languages).

The research will be carried out at Imperial College London, and will bring
together researchers at Oxford University, Universite Paris-Est, and Universite
Paris-Diderot as well as the CARP project, based across several universities and
companies world-wide, and researchers at Microsoft Research, Cambridge.</gtr:abstractText><gtr:potentialImpactText>It is well known that the majority of the software development effort goes on
maintenance and bug repair. The use of verification techniques during
development reduces the prevalence of errors, and thus, reduces development
time. In addition to the speed of delivery, the use of verification techniques
allows companies to provide improved support and maintenance packages. 

UK companies will benefit from the results of this fellowship in two ways.
First, since the framework is developed in the UK, they will have easy
face-to-face access to the development team. Secondly, by educating UK students
about the tools, UK companies will benefit from improved programming practices
in the graduates they employ. Especially as concurrent programming becomes more
important, having techniques to quickly identify concurrency bugs (which are
difficult to find and reproduce, yet simple to make) will be an enormous
advantage.

Furthermore, software is ubiquitous in modern society. Thus, the erroneous
nature of programming projects affects everyone in many ways, ranging from minor
annoyances when a laptop has to be rebooted, to weaknesses exploitable by
writers of malevolent software, business critical software such as web-services,
and more potentially more serious situations with safety critical software, such
as car braking systems. An improved quality of software will have a wide
benefit.

The impact of the fellowship will be ensured through a number of means.

First, in addition to enabling cutting-edge research, the construction of a
model-checking framework will unify many related research activities under a
single name. This will promote recognition and awareness of the framework by
stakeholders, facilitating communication outside of academia.

The framework itself will take as input programs written in suitable languages,
such as Java and C++, and produce useful output, rather than the ``expert-only''
output produced by prototypical tools. This is a facility demanded by potential
industrial partners who will not tolerate a ``by-hand'' modelling process. By
providing these features, the ease-of-use of verification tools will be assured,
allowing new ideas to be tried by non-expert users in both the industrial and
open-source communities. 

To ensure the distribution of the framework, and its real-world applicability,
we will first ensure that a web-site is set up. This site will provide the
downloads of the framework, instructions for users, and bug-reporting/feature
request facilities. Then, we will experiment with the framework on open-source
software, such as Linux. The results of these experiments can then be
communicated to the software developers --- for example, through bug reports, if
bugs are found. This communication will raise awareness of our tools and we
will encourage software developers to try the tools themselves, providing
valuable feedback for further improvements. In addition, we may analyse
open-source code produced by companies as a pathway into industry.

Experiments with open-source software will demonstrate the effectiveness of the
framework. These results will be used when contacting software companies who
will be interested in using our tools. Initially this may include firms such as
Microsoft who are already involved in developing verification tools of their
own. Further companies may be approached during, for example, industry liaison
events held at Imperial, or directly. 

Finally, as a keen teacher, on completion of the fellowship, I will seek to
present lecture courses on verification. By exposing students to model-checking
techniques and tools, the next generation of programmers will be equipped to
transport these techniques to their future work environment. This take-up, I
believe, will increase as tools become more accurate and scalable, and as the
difficulties in concurrent programming become a daily issue for developers.</gtr:potentialImpactText><gtr:fund><gtr:end>2018-04-30</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2013-05-01</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>469676</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs/><gtr:disseminationOutputs/><gtr:exploitationOutputs/><gtr:furtherFundingOutputs><gtr:furtherFundingOutput><gtr:amountPounds>54302</gtr:amountPounds><gtr:country>United States of America</gtr:country><gtr:currCode>USD</gtr:currCode><gtr:currCountryCode>Ecuador</gtr:currCountryCode><gtr:currLang>es_EC</gtr:currLang><gtr:department>Research at Google</gtr:department><gtr:description>Google Faculty Research Award</gtr:description><gtr:fundingOrg>Google</gtr:fundingOrg><gtr:id>F491DF84-1E7F-411D-B1EE-4BA9A0C26F88</gtr:id><gtr:outcomeId>58bef3b881a837.23236655</gtr:outcomeId><gtr:sector>Private</gtr:sector></gtr:furtherFundingOutput></gtr:furtherFundingOutputs><gtr:impactSummaryOutputs><gtr:impactSummaryOutput><gtr:description>The findings have been published in the world-leading conferences Principles of Programming Languages 2016, Object Oriented Programming, Systems Languages and Applications 2015, Computer Science Logic / Logic in Computer Science (CSL-LICS) 2014, The International Conference on Functional Programming (ICFP 2013), Foundations of Software Technology and Theoretical Computer Science (FSTTCS) 2013, Reachability Problems (RP) 2014 and Automata and Formal Languages AFL, 2014. Techniques we have introduced have also been taken up by Naoki Kobayashi's group in Tokyo and published in the renowned conference on Concurrency (CONCUR) 2013. We have also produced a tool (C-SHORe) for reachability checking of sequential higher-order recursion schemes (models of higher-order programs) implementing our research which is available from http://cshore.cs.rhul.ac.uk. The project is on-going and C-SHORe is currently being extended to handle concurrent programs. We have also developed a tool for the analysis of JQuery programs, as well as a tool for the minimisation of Cascading Style Sheets, for web-programming.</gtr:description><gtr:firstYearOfImpact>2013</gtr:firstYearOfImpact><gtr:id>8DE04703-95D4-4768-9D3A-7E6A98872EB8</gtr:id><gtr:impactTypes><gtr:impactType>Cultural</gtr:impactType></gtr:impactTypes><gtr:outcomeId>5448c4e8b915c0.76902547</gtr:outcomeId><gtr:sector>Digital/Communication/Information Technologies (including Software),Education</gtr:sector></gtr:impactSummaryOutput></gtr:impactSummaryOutputs><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>This research has introduced and given proof-of-concept implementations of new approaches to the analysis of software systems -- in particular &amp;quot;higher-order&amp;quot; programming, which is an increasingly important type of software that is not well-handled by existing analysis tools. This analysis will help programmers check that the software they develop behaves as intended (i.e. does not crash).

In addition, the research has given new results about analysing software that runs on modern computers which execute several interacting programs simultaneously. This is part of an ongoing project to analyse concurrent higher-order programs and the developed software and techniques is being extended in this direction.</gtr:description><gtr:exploitationPathways>Ensuring the correctness of computer programs is a significantly difficult task (as evidenced by the routine occurrence of software failures). Tools which are able to automatically analyse software for correctness can provide valuable feedback to developers and prevent mistakes occurring. We are developing techniques that push the limits of what is known to be possible with respect to this analysis and developing proof-of-concept implementations to show that practical results can be obtained. The techniques can be used and expanded upon by teams developing full-scale analysis tools on an industrial scale.</gtr:exploitationPathways><gtr:id>46682B19-4046-40E1-8D11-408D90EA5D52</gtr:id><gtr:outcomeId>5448cf42482ee4.28719809</gtr:outcomeId><gtr:sectors><gtr:sector>Aerospace, Defence and Marine,Digital/Communication/Information Technologies (including Software),Education,Security and Diplomacy</gtr:sector></gtr:sectors><gtr:url>http://www.cs.rhul.ac.uk/home/hague/</gtr:url></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs><gtr:softwareAndTechnicalProductOutput><gtr:description>A tool implenting an algorithm for identifying redundant CSS rules in HTML5 applications. Provides a complete interface for the underlying program model, but only a rudimentary translation from jQuery programs.</gtr:description><gtr:id>52A5C33F-D006-42B8-95AD-7A2F6AEA7C2B</gtr:id><gtr:impact>Research tool.</gtr:impact><gtr:outcomeId>56d096107351f7.25888424</gtr:outcomeId><gtr:title>TreePed</gtr:title><gtr:type>Software</gtr:type><gtr:url>https://bitbucket.org/TreePed/treeped</gtr:url><gtr:yearFirstProvided>2015</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput><gtr:softwareAndTechnicalProductOutput><gtr:description>The tool performs reachability analysis of higher-order recursion schemes and collapsible pushdown systems, which are a model of higher-order programs.</gtr:description><gtr:id>CAC4EB50-9C35-44B0-8AA7-6D48C27DBA89</gtr:id><gtr:impact>The tool was the first to implement an automata based approach to the verification of higher-order recursion schemes. It also was the first to use a &amp;quot;saturation&amp;quot; method. The tool showed that this approach is competitive with existing approaches and inspired a further tool (HORSAT) to be produced by Naoki Kobayashi's group in Tokyo, using similar techniques.</gtr:impact><gtr:outcomeId>5448cac41e4c86.44782878</gtr:outcomeId><gtr:title>C-SHORe</gtr:title><gtr:type>Software</gtr:type><gtr:url>http://cshore.cs.rhul.ac.uk</gtr:url><gtr:yearFirstProvided>2013</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput></gtr:softwareAndTechnicalProductOutputs><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>458FCEA4-51AB-464D-9D4F-5245448C28F9</gtr:id><gtr:title>Saturation algorithms for model-checking pushdown systems</gtr:title><gtr:parentPublicationTitle>International Conference on Automata and Formal Languages (AFL)</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/830ebade49f400758a3f6fd69cb5c901"><gtr:id>830ebade49f400758a3f6fd69cb5c901</gtr:id><gtr:otherNames>A. Carayol and M. Hague</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2014-01-01</gtr:date><gtr:outcomeId>5448c87ac3bda0.69292555</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>1A238B0D-6FB4-460B-B1E5-61CA0EC72031</gtr:id><gtr:title>C-SHORe: A Collapsible Approach to Higher-Order Verification</gtr:title><gtr:parentPublicationTitle> International Conference on Functional Programming (ICFP)</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/e0e43fab17449402c91c7597c903799a"><gtr:id>e0e43fab17449402c91c7597c903799a</gtr:id><gtr:otherNames>C. Broadbent, A. Carayol, M. Hague and O. Serre</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2013-01-01</gtr:date><gtr:outcomeId>5448c67f11d041.21021356</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>ED04CDA7-0775-42C4-970C-A7D36F91B782</gtr:id><gtr:title>What is decidable about string constraints with the ReplaceAll function</gtr:title><gtr:parentPublicationTitle>Proceedings of the ACM on Programming Languages</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/a2ecee2b070507a112d155f5463c6374"><gtr:id>a2ecee2b070507a112d155f5463c6374</gtr:id><gtr:otherNames>Chen T</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2017-01-01</gtr:date><gtr:outcomeId>5a86c73ab5f727.83719450</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>385AA987-C3E1-45D9-9D67-C0186E52CBC6</gtr:id><gtr:title>Regular Strategies in Pushdown Reachability Games</gtr:title><gtr:parentPublicationTitle>Reachability Problems (RP)</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/830ebade49f400758a3f6fd69cb5c901"><gtr:id>830ebade49f400758a3f6fd69cb5c901</gtr:id><gtr:otherNames>A. Carayol and M. Hague</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2014-01-01</gtr:date><gtr:outcomeId>5448c934ea99f2.09679385</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>948648A3-4AD4-4588-9254-B8B7294DB959</gtr:id><gtr:title>Saturation of Concurrent Collapsible Pushdown Systems</gtr:title><gtr:parentPublicationTitle>Foundations of Software Technology and Theoretical Computer Science (FSTTCS)</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/d7d01ca1e55fd49eb68c8ef72a2eebe6"><gtr:id>d7d01ca1e55fd49eb68c8ef72a2eebe6</gtr:id><gtr:otherNames>M. Hague</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2013-01-01</gtr:date><gtr:outcomeId>5448c7b92f7b07.24868390</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>EAAA3FA9-32F7-4314-93A0-0C9DB1E5BAB2</gtr:id><gtr:title>Collapsible Pushdown Automata and Recursion Schemes</gtr:title><gtr:parentPublicationTitle>ACM Transactions on Computational Logic</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/63d8a16bab9938c67b533027115c71c0"><gtr:id>63d8a16bab9938c67b533027115c71c0</gtr:id><gtr:otherNames>Hague M</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2017-01-01</gtr:date><gtr:issn>1529-3785</gtr:issn><gtr:outcomeId>5a351911255147.36109547</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>8CFC5664-4263-4EC0-8BA3-EFBA633C7F0A</gtr:id><gtr:title>Domains for Higher-Order Games</gtr:title><gtr:parentPublicationTitle>42nd International Symposium on Mathematical Foundations of Computer
               Science, MFCS 2017, August 21-25, 2017 - Aalborg, Denmark</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/63d8a16bab9938c67b533027115c71c0"><gtr:id>63d8a16bab9938c67b533027115c71c0</gtr:id><gtr:otherNames>Hague M</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2017-01-01</gtr:date><gtr:outcomeId>5a86c7ec71cd32.23012407</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/K009907/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>