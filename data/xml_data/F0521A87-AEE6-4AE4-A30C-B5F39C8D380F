<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations><gtr:collaborator url="http://gtr.ukri.org:80/organisation/455203A4-9781-4725-A589-223CA5AD2E10"><gtr:id>455203A4-9781-4725-A589-223CA5AD2E10</gtr:id><gtr:name>Australian National University (ANU)</gtr:name></gtr:collaborator><gtr:collaborator url="http://gtr.ukri.org:80/organisation/AB979D25-DDBE-4C82-9D51-F38618FE37BD"><gtr:id>AB979D25-DDBE-4C82-9D51-F38618FE37BD</gtr:id><gtr:name>Middlesex University</gtr:name><gtr:address><gtr:line1>The Burroughs</gtr:line1><gtr:line2>Hendon</gtr:line2><gtr:line4>London</gtr:line4><gtr:postCode>NW4 4BT</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address></gtr:collaborator></gtr:collaborations><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/3A5E126D-C175-4730-9B7B-E6D8CF447F83"><gtr:id>3A5E126D-C175-4730-9B7B-E6D8CF447F83</gtr:id><gtr:name>University College London</gtr:name><gtr:department>Computer Science</gtr:department><gtr:address><gtr:line1>Gower Street</gtr:line1><gtr:line4>London</gtr:line4><gtr:postCode>WC1E 6BT</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/3A5E126D-C175-4730-9B7B-E6D8CF447F83"><gtr:id>3A5E126D-C175-4730-9B7B-E6D8CF447F83</gtr:id><gtr:name>University College London</gtr:name><gtr:address><gtr:line1>Gower Street</gtr:line1><gtr:line4>London</gtr:line4><gtr:postCode>WC1E 6BT</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role><gtr:role><gtr:name>FELLOW</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/455203A4-9781-4725-A589-223CA5AD2E10"><gtr:id>455203A4-9781-4725-A589-223CA5AD2E10</gtr:id><gtr:name>Australian National University (ANU)</gtr:name><gtr:roles><gtr:role><gtr:name>COLLABORATOR</gtr:name></gtr:role><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/AB979D25-DDBE-4C82-9D51-F38618FE37BD"><gtr:id>AB979D25-DDBE-4C82-9D51-F38618FE37BD</gtr:id><gtr:name>Middlesex University</gtr:name><gtr:address><gtr:line1>The Burroughs</gtr:line1><gtr:line2>Hendon</gtr:line2><gtr:line4>London</gtr:line4><gtr:postCode>NW4 4BT</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>COLLABORATOR</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/F7E13617-2678-475B-99E4-31479C92038D"><gtr:id>F7E13617-2678-475B-99E4-31479C92038D</gtr:id><gtr:name>University of Aberdeen</gtr:name><gtr:address><gtr:line1>University Office</gtr:line1><gtr:line2>Regent Walk</gtr:line2><gtr:line4>Aberdeen</gtr:line4><gtr:line5>Aberdeenshire</gtr:line5><gtr:postCode>AB24 3FX</gtr:postCode><gtr:region>Scotland</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/343A4263-378A-4C2E-8DE3-01C0A10FB07A"><gtr:id>343A4263-378A-4C2E-8DE3-01C0A10FB07A</gtr:id><gtr:name>Monoidics Ltd</gtr:name><gtr:address><gtr:line1>Unit 121, Rosden House</gtr:line1><gtr:line2>372 Old Street</gtr:line2><gtr:postCode>EC1V 9AU</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/F262B9E0-E9D1-4BFF-B9BF-B4C81D12D8B9"><gtr:id>F262B9E0-E9D1-4BFF-B9BF-B4C81D12D8B9</gtr:id><gtr:name>Microsoft Research Ltd</gtr:name><gtr:address><gtr:line1>21 Station Road</gtr:line1><gtr:postCode>CB1 2FB</gtr:postCode><gtr:region>East of England</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/8D85F118-49C4-4F5A-8A03-0536BC5EB562"><gtr:id>8D85F118-49C4-4F5A-8A03-0536BC5EB562</gtr:id><gtr:firstName>James</gtr:firstName><gtr:surname>Brotherston</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role><gtr:role><gtr:name>FELLOW</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FJ002224%2F2"><gtr:id>F0521A87-AEE6-4AE4-A30C-B5F39C8D380F</gtr:id><gtr:title>Logical Foundations of Resource</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Fellowship</gtr:grantCategory><gtr:grantReference>EP/J002224/2</gtr:grantReference><gtr:abstractText>*Resource problems* are pervasive in computer science and the real world; indeed, the fundamental concept of computation is inextricably linked with the concept of resource (time, memory, etc.). Logic provides a powerful and
convenient method for expressing and reasoning about properties of resource, and various resource-oriented logics have been advanced for this purpose in the past. Arguably the most successful application of logic-based resource
reasoning to date is the use of *separation logic* and its relatives, based on *bunched logic*, to verify memory-manipulating and concurrent computer programs. The techniques employed are, however, highly specialised to the many domain-specific properties of the verification problem; thus they do not straightforwardly transfer to other domains.

While the aforementioned advances are significant, we propose that resource-oriented logics can be used to stage a much more wide-ranging and coherent attack on resource problems in general, in line with the central role of resource in a very broad spectrum of application domains. This will be achieved by providing unifying, foundational resource concepts and using these concepts to develop novel applications.

Our plan is to take resource reasoning in two main new directions. The first direction is to take a much more general view of resources themselves. For example, one can consider resources which *dualise* (e.g. assets and
liabilities in a financial portfolio) or which can be assembled in several different ways (much like LEGO construction bricks). The second direction is to consider not just verification but a variety of other practical resource
problems, including resource allocation, scheduling, abduction and planning. These correspond to the way that resource problems arise in a number of fields, but have until now been little addressed by resource logics.

We propose that, using suitable resource logics to express resource properties, all of the resource problems above can in fact be recast essentially as *proof search* problems. Such an approach has the potential to significantly unify these diverse resource problems, and open the way for symbolic approaches to them, which could lead to more scalable solutions (as in, e.g., symbolic model checking). Solving these proof search problems will then require search algorithms of considerable sophistication, since the search space may be far too large to explore exhaustively. We plan to employ
techniques from automated theorem proving, and from reinforcement learning as used in agent-oriented computing. By combining these techniques with our symbolic methods based upon resource logics, we aim to develop formal methods
that are both powerful and widely transferable.

If this proposal achieves its research aims then we expect a significant impact on the way that resource allocation, planning and other related resource problems are handled. These problems are fundamental not only to
computer science and its various subfields (e.g. distributed systems, agent-oriented computing, and artificial intelligence) but also to other fields such as economics, engineering, environmental science and finance, and
to UK industries such as software, electronics, utility provision, transportation and manufacturing.</gtr:abstractText><gtr:potentialImpactText>In this proposal we aim to develop the logical foundations of *resource-oriented logics*, and to apply these logics in a variety of novel ways to resource problems that occur in computer science and in the wider public domain, such as the efficient allocation of resources. To take a concrete example of such a problem, suppose a TV channel is selling advertising slots during its World Cup coverage (say). Advertisers submit bids offering a certain amount of money
for slots of a certain duration occurring during certain commercial breaks. Furthermore, an advertiser might require multiple slots (to maximise impact or because their advert has more than one part) so that a set of slots is valued higher than the sum of its parts. The problem for the TV channel is, given a number of bids from advertisers, how to allocate their limited airtime to bids in such a way as to maximise their revenue. This is a typical *combinatorial auction* problem that arises over and over again in many different situations. Our research has the potential to open the way for symbolic approaches to this problem, which could ultimately lead to more scalable solutions (as in, e.g., symbolic model checking). We also hope to significantly unify a number of diverse resource problems - e.g. verification, allocation, scheduling, plan synthesis, abduction - that are found not only throughout computer science but also in other fields such as economics, engineering, environmental science and finance, and in major industries such as software, electronics, utility provision, transportation and manufacturing. Such problems typically have significant implications for the efficient use of resources and therefore ultimately the cost of &amp;quot;doing business&amp;quot;'. Consequently, the use of resource logics to develop scalable and robust solutions to these problems has the long-term potential for substantial impact in several fields and areas of the economy.

We explicitly identify two (mainly disjoint) groups of entities on (mainly disjoint) critical pathways to the aforementioned economic and societal impacts:

Group I: researchers and organisations *within* computer science with a *commercial* interest in computer-aided resource reasoning applications such as verification and distributed systems. They will benefit from the new insights and reasoning techniques provided by our research programme, which could form the basis of new commerical computerised tools for solving resource problems. Indeed, we will collaborate directly with our project partners Parkinson (Microsoft Research) and Calcagno (Monoidics) on providing prototype tool support for our methods.

Group II: researchers and organisations *mainly outside* computer science (e.g. economists or financial analysts) with an *academic and/or commercial* interest in resource problems such as resource allocation and scheduling, e.g., the information security firm Sapphire and the logistics IT firm CombineNet. Such organisations even potentially include governmental departments. They will benefit from our introduction of logical methods to resource problems of practical industrial interest (such as large-scale combinatorial auctions) which could lead to more efficient and scalable solutions to these problems. One of our Project Partners, Prof. David Pym at the University of Aberdeen, falls within this group through his participation in two TSB-funded grants: &amp;quot;Cloud Stewardship Economics&amp;quot; and &amp;quot;Trust Economics&amp;quot;, held with several industrial partners including HP Labs. Both projects involve information security and system-scale modelling. By collaborating with Pym we hope to take advantage of opportunities for technology transfer from our theoretical work to the wider industrial setting.</gtr:potentialImpactText><gtr:fund><gtr:end>2016-12-01</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2012-06-02</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>423410</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs><gtr:collaborationOutput><gtr:collaboratingOrganisation>Middlesex University</gtr:collaboratingOrganisation><gtr:country>United Kingdom of Great Britain &amp; Northern Ireland (UK)</gtr:country><gtr:description>Nikos</gtr:description><gtr:id>3B43C992-2A93-4877-AE41-FCD67D609206</gtr:id><gtr:impact>CSL-LICS 2014 paper &amp;quot;A Decision Procedure for Satisfiability in Separation Logic with Inductive Predicates&amp;quot;
SAS'14 paper &amp;quot;Cyclic Abduction of Inductively Defined Safety and Termination Preconditions&amp;quot;
Cyclist theorem prover</gtr:impact><gtr:outcomeId>54636fadb7f394.11474330-1</gtr:outcomeId><gtr:partnerContribution>Ongoing academic research collaboration</gtr:partnerContribution><gtr:piContribution>Ongoing academic research collaboration</gtr:piContribution><gtr:sector>Academic/University</gtr:sector><gtr:start>2013-01-01</gtr:start></gtr:collaborationOutput><gtr:collaborationOutput><gtr:collaboratingOrganisation>Australian National University (ANU)</gtr:collaboratingOrganisation><gtr:country>Australia, Commonwealth of</gtr:country><gtr:description>Raj</gtr:description><gtr:id>C4DAF755-D4CC-477E-9F0B-5A4F9A462F26</gtr:id><gtr:impact>TABLEAUX 2011 publication: Craig Interpolation for Displayable Logics by Brotherston and Gore.
IJCAR 2016 publication: Machine-checked interpolation theorems for substructural logics using display calculi by Dawson, Brotherston and Gore</gtr:impact><gtr:outcomeId>54636efc82c6e4.24920077-1</gtr:outcomeId><gtr:partnerContribution>Joint work on research project into Craig interpolation for displayable logics</gtr:partnerContribution><gtr:piContribution>Joint work on research project into Craig interpolation for displayable logics</gtr:piContribution><gtr:sector>Academic/University</gtr:sector><gtr:start>2010-01-01</gtr:start></gtr:collaborationOutput></gtr:collaborationOutputs><gtr:disseminationOutputs/><gtr:exploitationOutputs/><gtr:furtherFundingOutputs><gtr:furtherFundingOutput><gtr:amountPounds>30000</gtr:amountPounds><gtr:country>United States of America</gtr:country><gtr:currCode>USD</gtr:currCode><gtr:currCountryCode>Ecuador</gtr:currCountryCode><gtr:currLang>es_EC</gtr:currLang><gtr:description>Facebook Faculty Grant 2015</gtr:description><gtr:end>2018-09-02</gtr:end><gtr:fundingOrg>Facebook</gtr:fundingOrg><gtr:id>86BC0FBA-9C8F-40A8-B5B0-FD6BB80AD4D1</gtr:id><gtr:outcomeId>56d996b2a53be8.46833694</gtr:outcomeId><gtr:sector>Private</gtr:sector><gtr:start>2015-10-01</gtr:start></gtr:furtherFundingOutput></gtr:furtherFundingOutputs><gtr:impactSummaryOutputs/><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>This project, an EPSRC Career Acceleration Fellowship, aimed to investigate resource problems from a logical perspective.

Much of the research focused on exploring the logical foundations of &amp;quot;separation logic&amp;quot;, which it has evolved from a novel way of reasoning about pointers in computer memory to a mainstream technique for scalable verification of software (used e.g. at Facebook) in order to understand what we can and cannot hope to do automatically, and how the technology might be pushed beyond its initial limitations. The project established a number of fundamental theoretical results about the tractability of problems in this area, both positive and negative. 

One of the key technologies developed in this area was that of *cyclic proof*, an alternative way of doing proofs by induction based on circular proof graphs. Cyclic proof offers a significant advantage for automatic proof search, as employed in program verification and in mechanical theorem provers, by delaying difficult choices during a proof until exploration of the proof search space makes suitable choices more evident. We developed the first ever first ever fully-automatic, general-purpose cyclic theorem prover (CYCLIST) and showed it to be highly competitive with the state of the art. In fact, it is now the default approach for theorem proving in separation logic where one has user-defined data structures in the memory.

More generally, we also looked at &amp;quot;bunched logics&amp;quot;, which can be used to describe general properties of *resource*. Bunched logic provides the foundation for separation logic, where &amp;quot;resource&amp;quot; is interpreted as heap memory in a suitably chosen model. However, there is a whole spectrum of interesting such logics, some of which offer new ways of potentially reasoning about computer memory, and others which offer ways of reasoning about quite different types of resource. We investigated a number of such logics and showed that they might be used for reasoning about more sophisticated types of resource than had previously been accounted for.</gtr:description><gtr:exploitationPathways>Much of the work is already being widely cited and built on by academics working on automated verification and logic. High-tech companies such as Facebook and Amazon Web Services are also incorporating verification into their software development chains, and Facebook in particular has displayed an interest in pursuing future collaborations based on our previous work in this area.</gtr:exploitationPathways><gtr:id>7F524368-32E6-49CA-B8AE-4EB5E5B90DCE</gtr:id><gtr:outcomeId>56d999f46551b4.48725268</gtr:outcomeId><gtr:sectors><gtr:sector>Digital/Communication/Information Technologies (including Software)</gtr:sector></gtr:sectors></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs><gtr:softwareAndTechnicalProductOutput><gtr:description>Updated the Cyclist theorem prover with substantial new techniques and features, as described in related publications.</gtr:description><gtr:id>B3203EB3-B0EA-468E-9DD3-9C7802BD39E4</gtr:id><gtr:impact>Cyclist was entered into and performed well in the new SL-COMP competition for separation logic theorem provers.</gtr:impact><gtr:outcomeId>54636c7594a882.09653790</gtr:outcomeId><gtr:title>Cyclist 2014</gtr:title><gtr:type>Software</gtr:type><gtr:url>https://github.com/ngorogiannis/cyclist</gtr:url><gtr:yearFirstProvided>2014</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput><gtr:softwareAndTechnicalProductOutput><gtr:description>Compares the heap memory of a running program against an assertion written in separation logic with general inductive definitions.</gtr:description><gtr:id>84C9AA0B-DA63-4EB0-8EF1-558C73F926C2</gtr:id><gtr:impact>First model checker of its kind, with potential applications to verification and software testing.</gtr:impact><gtr:outcomeId>56d997c7de6473.68413755</gtr:outcomeId><gtr:title>SL model checker</gtr:title><gtr:type>Software</gtr:type><gtr:url>https://github.com/ngorogiannis/cyclist</gtr:url><gtr:yearFirstProvided>2015</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput><gtr:softwareAndTechnicalProductOutput><gtr:description>Given an entailment A |= B between two formulas in separation logic with inductive predicates, this tool attempts to disprove the entailment, i.e. to infer the existence of a countermodel.</gtr:description><gtr:id>13401CB6-3A7F-47AD-B82A-F0128EC34533</gtr:id><gtr:impact>First disprover for separation logic. Opens up potential new applications in speeding up verification and automatic proof search, and in automated theory exploration.</gtr:impact><gtr:outcomeId>56d9984815dec4.09342809</gtr:outcomeId><gtr:title>SL disprover</gtr:title><gtr:type>Software</gtr:type><gtr:url>https://github.com/ngorogiannis/cyclist</gtr:url><gtr:yearFirstProvided>2014</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput></gtr:softwareAndTechnicalProductOutputs><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>82A3A884-EBDC-462B-9167-1B54A876FA59</gtr:id><gtr:title>Undecidability of Propositional Separation Logic and Its Neighbours</gtr:title><gtr:parentPublicationTitle>Journal of the ACM</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/4318012ae61b9d7d7927edb1df295cbe"><gtr:id>4318012ae61b9d7d7927edb1df295cbe</gtr:id><gtr:otherNames>Brotherston J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2014-01-01</gtr:date><gtr:outcomeId>546215430b8e01.33017950</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>7293ADAD-121C-4D09-A08D-256B6B26F38D</gtr:id><gtr:title>Sub-Classical Boolean Bunched Logics and the Meaning of Par</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/4318012ae61b9d7d7927edb1df295cbe"><gtr:id>4318012ae61b9d7d7927edb1df295cbe</gtr:id><gtr:otherNames>Brotherston J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2015-01-01</gtr:date><gtr:outcomeId>56d9952d5eb394.94133974</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>876AB5C1-2FDC-4C71-B597-AD07D69999B6</gtr:id><gtr:title>Model checking for symbolic-heap separation logic with inductive predicates</gtr:title><gtr:parentPublicationTitle>ACM SIGPLAN Notices</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/4318012ae61b9d7d7927edb1df295cbe"><gtr:id>4318012ae61b9d7d7927edb1df295cbe</gtr:id><gtr:otherNames>Brotherston J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2016-01-01</gtr:date><gtr:outcomeId>56d9958a2c4aa2.99963997</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/J002224/2</gtr:identifier></gtr:identifiers><gtr:projectHierarchy><gtr:parents><gtr:parent><gtr:id>9C8D6834-47B9-4085-89A7-65D6016F4121</gtr:id><gtr:grantRef>EP/J002224/1</gtr:grantRef><gtr:amount>465503.18</gtr:amount><gtr:start>2011-12-01</gtr:start><gtr:end>2012-06-01</gtr:end><gtr:children><gtr:child rel="Transfer"><gtr:id>F0521A87-AEE6-4AE4-A30C-B5F39C8D380F</gtr:id><gtr:grantRef>EP/J002224/2</gtr:grantRef><gtr:amount>423410.4</gtr:amount><gtr:start>2012-06-02</gtr:start><gtr:end>2016-12-01</gtr:end><gtr:children/></gtr:child></gtr:children></gtr:parent></gtr:parents></gtr:projectHierarchy><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>