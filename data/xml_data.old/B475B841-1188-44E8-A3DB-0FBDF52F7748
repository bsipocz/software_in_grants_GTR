<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations><gtr:collaborator url="http://gtr.ukri.org:80/organisation/2DB7ED73-8E89-457A-A395-FAC12F929C1A"><gtr:id>2DB7ED73-8E89-457A-A395-FAC12F929C1A</gtr:id><gtr:name>University of Edinburgh</gtr:name><gtr:address><gtr:line1>Old College</gtr:line1><gtr:line2>South Bridge</gtr:line2><gtr:line3>Mayfield Road</gtr:line3><gtr:line4>Edinburgh</gtr:line4><gtr:postCode>EH8 9YL</gtr:postCode><gtr:region>Scotland</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address></gtr:collaborator><gtr:collaborator url="http://gtr.ukri.org:80/organisation/83ECDB78-E716-4AF5-A830-BA3EA3EE7FFC"><gtr:id>83ECDB78-E716-4AF5-A830-BA3EA3EE7FFC</gtr:id><gtr:name>Bangladesh Uni of Engineering and Tech</gtr:name><gtr:address><gtr:line1>Palashi</gtr:line1><gtr:region>Outside UK</gtr:region><gtr:country>Bangladesh</gtr:country></gtr:address></gtr:collaborator><gtr:collaborator url="http://gtr.ukri.org:80/organisation/E5A82D2C-5AD4-488A-ACFF-566345A5D6DA"><gtr:id>E5A82D2C-5AD4-488A-ACFF-566345A5D6DA</gtr:id><gtr:name>Heriot-Watt University</gtr:name><gtr:address><gtr:line1>Administration Building</gtr:line1><gtr:line2>Riccarton</gtr:line2><gtr:line3>Ricarton</gtr:line3><gtr:line4>Currie</gtr:line4><gtr:postCode>EH14 4AS</gtr:postCode><gtr:region>Scotland</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address></gtr:collaborator></gtr:collaborations><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/90051600-6EF2-4093-BA8C-2B4B6F550895"><gtr:id>90051600-6EF2-4093-BA8C-2B4B6F550895</gtr:id><gtr:name>University of Dundee</gtr:name><gtr:department>School of Computing</gtr:department><gtr:address><gtr:line1>University of Dundee</gtr:line1><gtr:line2>Nethergate</gtr:line2><gtr:postCode>DD1 4HN</gtr:postCode><gtr:region>Scotland</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/90051600-6EF2-4093-BA8C-2B4B6F550895"><gtr:id>90051600-6EF2-4093-BA8C-2B4B6F550895</gtr:id><gtr:name>University of Dundee</gtr:name><gtr:address><gtr:line1>University of Dundee</gtr:line1><gtr:line2>Nethergate</gtr:line2><gtr:postCode>DD1 4HN</gtr:postCode><gtr:region>Scotland</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/2DB7ED73-8E89-457A-A395-FAC12F929C1A"><gtr:id>2DB7ED73-8E89-457A-A395-FAC12F929C1A</gtr:id><gtr:name>University of Edinburgh</gtr:name><gtr:address><gtr:line1>Old College</gtr:line1><gtr:line2>South Bridge</gtr:line2><gtr:line3>Mayfield Road</gtr:line3><gtr:line4>Edinburgh</gtr:line4><gtr:postCode>EH8 9YL</gtr:postCode><gtr:region>Scotland</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role><gtr:role><gtr:name>COLLABORATOR</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/83ECDB78-E716-4AF5-A830-BA3EA3EE7FFC"><gtr:id>83ECDB78-E716-4AF5-A830-BA3EA3EE7FFC</gtr:id><gtr:name>Bangladesh Uni of Engineering and Tech</gtr:name><gtr:address><gtr:line1>Palashi</gtr:line1><gtr:region>Outside UK</gtr:region><gtr:country>Bangladesh</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>COLLABORATOR</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/E5A82D2C-5AD4-488A-ACFF-566345A5D6DA"><gtr:id>E5A82D2C-5AD4-488A-ACFF-566345A5D6DA</gtr:id><gtr:name>Heriot-Watt University</gtr:name><gtr:address><gtr:line1>Administration Building</gtr:line1><gtr:line2>Riccarton</gtr:line2><gtr:line3>Ricarton</gtr:line3><gtr:line4>Currie</gtr:line4><gtr:postCode>EH14 4AS</gtr:postCode><gtr:region>Scotland</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role><gtr:role><gtr:name>COLLABORATOR</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/E2205E3E-3A2E-4CB8-863D-7D85FAABC7F2"><gtr:id>E2205E3E-3A2E-4CB8-863D-7D85FAABC7F2</gtr:id><gtr:name>Osnabrueck University</gtr:name><gtr:address><gtr:line1>Osnabr?ck University</gtr:line1><gtr:region>Outside UK</gtr:region><gtr:country>Germany</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/5E2B04DD-4A03-45ED-9892-61C5CCB8AC68"><gtr:id>5E2B04DD-4A03-45ED-9892-61C5CCB8AC68</gtr:id><gtr:name>Newcastle University</gtr:name><gtr:address><gtr:line1>1 Park Terrace</gtr:line1><gtr:line4>Newcastle Upon Tyne</gtr:line4><gtr:line5>Tyne and Wear</gtr:line5><gtr:postCode>NE1 7RU</gtr:postCode><gtr:region>North East</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/EAAD4D43-BD15-432B-9385-2DBD0C65958D"><gtr:id>EAAD4D43-BD15-432B-9385-2DBD0C65958D</gtr:id><gtr:name>University of Bath</gtr:name><gtr:address><gtr:line1>University of Bath</gtr:line1><gtr:line2>Claverton Down</gtr:line2><gtr:line4>Bath</gtr:line4><gtr:line5>Avon</gtr:line5><gtr:postCode>BA2 7AY</gtr:postCode><gtr:region>South West</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/F35632B0-D4C0-4FAD-8179-A899790F1895"><gtr:id>F35632B0-D4C0-4FAD-8179-A899790F1895</gtr:id><gtr:firstName>Ekaterina</gtr:firstName><gtr:surname>Komendantskaya</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FJ014222%2F1"><gtr:id>B475B841-1188-44E8-A3DB-0FBDF52F7748</gtr:id><gtr:title>MACHINE LEARNING COALGEBRAIC AUTOMATED PROOFS</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Research Grant</gtr:grantCategory><gtr:grantReference>EP/J014222/1</gtr:grantReference><gtr:abstractText>Some steps in formal reasoning may be statistical or inductive in nature.
Many attempts to formalise or exploit this inductive or statistical nature of formal reasoning are related to methods of Neuro-Symbolic Integration, Inductive Logic and Relational Statistical Learning.
The proposal is focused on one statistical/inductive aspect of automated theorem proving -- proof-pattern recognition. 

Higher-order interactive theorem provers (e.g. HOL or Coq) have been successfully developed into 
sophisticated environments for mechanised proofs. 
Whether these provers are applied to big industrial tasks in software verification, or to formalisation
of mathematical theories, a programmer may have to tackle thousands of lemmas and theorems of variable sizes and complexities.
A proof in such languages is constructed by combining a finite number of tactics. Some proofs may yield the same pattern of tactics, 
and can be fully automated, and others may require a user's intervention.
In this case, manually found proof for one problematic lemma may serve as a template for several other lemmas needing a manual proof.
At present this kind of proof-pattern recognition and recycling is done by hand, and the ML-CAP project will look into methods to automate this. 

Another issue is that unsuccessful attempts of proofs --- in the trial-and-error phase of proof-search, are normally discarded once the proof is found.
Conveniently, analysis of both positive and negative examples is inherent in statistical machine learning. And ML-CAP is going to exploit this.

However, applying statistical machine-learning methods to analyse data coming from proof theory is a challenging task for several reasons. 
Formulae written in formal language have a precise, rather than a statistical nature. 
For example, list(nil) may be a well-formed term, while list(nol) - not; although they may have similar patterns 
recognisable by machine learning methods.

Another problem that arises when merging formal logic and statistical machine-learning algorithms is related to their computational complexity.
Many essential logic algorithms are P-complete and inherently sequential (e.g., first-order unification), while neural networks and other similar devices 
are based on linear algebra and perform parallel computations.

As a solution to the outlined problems, the coalgebraic approach to automated proofs 
may provide the right technique of abstraction allowing to analyse proof-patterns using machine learning methods. 
Firstly, coalgebraic computations lend themselves to concurrency, 
and this may be the key to obtaining adequate representation
of the outlined problems.
Secondly, they are based on the idea of repeating patterns of potentially infinite computations, rather than outputs of finite computations. 
These patterns may be detected by methods of statistical pattern recognition. 

ML-CAP is based upon a novel method of using statistical machine learning in analysis of formal proofs.
In summary, it provides algorithms for extracting those features from automated proofs that allow to detect proof patterns 
 using statistical machine learning tools, such as neural networks.
As a result, neural networks can be trained to distinguish well-formed proofs from ill-formed; distinguish whether a proof belongs to a given family of proofs, 
and even make accurate predictions concerning potential success of a proof-in-progress. All three tasks have serious applications in automated reasoning. 
The project will aim to generalise this method and develop it into a sound general technique for automated proofs. It will result in new methods useful 
for a range of researchers in different areas, such as AI, Formal Methods, Coalgebra and Cognitive Science.</gtr:abstractText><gtr:potentialImpactText>Impact Summary.

1. Knowledge (science and technology). 
The proposed research is a pilot attempt to merge two very different groups of methods - 
statistical machine learning and formal methods - using a third group of coalgebraic methods as a method of abstraction and suitable representation. 
The ultimate goal for the resulting technique is to advance real-life applications of ITPs,
in the aspects where decidable algorithms and methods are not possible. 
The project is distinctly interdisciplinary and has an original research idea and methodology underlying it. 
My discussions of the proposed idea and method with
various groups of researchers at AI4FM'11 (AI and Formal Methods community), STP'11 (Theorem Proving community), 
and ITP'11 [f] (Inductive Logic and Machine Learning communities) have confirmed my belief that 
my approach is indeed new and ground-breaking, (see also letters of support).

 
I see the EPSRC First Grant scheme as an excellent opportunity to invest efforts into proving the concept,
developing more evidence and accumulating data supporting the proposed ML-CAP method, with a view to a bigger project if the pilot studies are successful. 
Another important consequence of the proposed work will be 
building confidence among various communities of researchers in both AI and Formal Methods in the potential of 
statistical machine-learning methods as useful tools in handling 
undecidable aspects of automated reasoning. 

2. Economy and Society.
The project contributes to a long-term goal of
achieving the Grand Challenge in Computing - Dependable systems evolution; 
as explained in detail in the Background section.

The proposed method will help to automate those 
steps in formal proofs that cannot be automated using the state-of-the-art technology available today.
The new technology will directly affect programmers working on software and hardware verification.
In the longer term, the new method will make the process of software verification by means of ITPs lighter, faster, and hence cheaper,
and thus will have serious economic impact.
Also, ML-CAP will work towards creation of new technologies, and therefore may trigger creation of new companies.

As Formal methods improve dependability and security of software, development of these technologies will ultimately have an effect on the Society in terms of the security and quality of life.
As A. Ireland states in the attached letter of support,
``The pervasive nature of software means that software dependability plays a crucial role within the
world economy, as well as the security - from maintaining national security through to protecting
personal data.''


3. People. 
In terms of new skill development, the project will affect the newly established group ``Theory of Computing and AI'' at Dundee,
and e.g. my current Honours, MSc and PhD students, as it will create a more vibrant research environment for them,
as well as reinforce our links with researchers from the partner universities in the UK and abroad.</gtr:potentialImpactText><gtr:fund><gtr:end>2014-02-28</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2012-03-01</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>100268</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs><gtr:collaborationOutput><gtr:collaboratingOrganisation>Heriot-Watt University</gtr:collaboratingOrganisation><gtr:country>United Kingdom of Great Britain &amp; Northern Ireland (UK)</gtr:country><gtr:department>School of Engineering &amp; Physical Sciences</gtr:department><gtr:description>Machine Learning for theorem proving</gtr:description><gtr:id>C4337F11-9D8C-45A2-ADCE-451B9835AFA3</gtr:id><gtr:impact>Research paper in workshop UITP'13:
Ekaterina Komendantskaya, J&amp;oacute;nathan Heras, Gudmund Grov:
Machine Learning in Proof General: Interfacing Interfaces. UITP 2013: 15-41</gtr:impact><gtr:outcomeId>56cdd9e86207e1.36940626-1</gtr:outcomeId><gtr:partnerContribution>Research collaboration, paper writing</gtr:partnerContribution><gtr:piContribution>Research collaboration, paper writing</gtr:piContribution><gtr:sector>Academic/University</gtr:sector><gtr:start>2012-01-01</gtr:start></gtr:collaborationOutput><gtr:collaborationOutput><gtr:collaboratingOrganisation>Bangladesh University of Engineering and Technology (BUET)</gtr:collaboratingOrganisation><gtr:country>India, Republic of</gtr:country><gtr:department>Department of Computer Science and Engineering</gtr:department><gtr:description>Machine-Learning for theorem Proving in Haskell</gtr:description><gtr:id>BEAFDABB-695A-4C45-AE9D-0FF072259F41</gtr:id><gtr:impact>J&amp;oacute;nathan Heras, Ekaterina Komendantskaya, Moa Johansson, Ewen Maclean:
Proof-Pattern Recognition and Lemma Discovery in ACL2. LPAR 2013: 389-406</gtr:impact><gtr:outcomeId>56cddb4d8a11c0.19347882-1</gtr:outcomeId><gtr:partnerContribution>Research discussions, paper and grant writing</gtr:partnerContribution><gtr:piContribution>Research discussions, paper and grant writing with Moa Johansson</gtr:piContribution><gtr:sector>Academic/University</gtr:sector><gtr:start>2013-01-01</gtr:start></gtr:collaborationOutput><gtr:collaborationOutput><gtr:collaboratingOrganisation>University of Edinburgh</gtr:collaboratingOrganisation><gtr:country>United Kingdom of Great Britain &amp; Northern Ireland (UK)</gtr:country><gtr:department>School of Informatics Edinburgh</gtr:department><gtr:description>Machine-learning in Proof Planning</gtr:description><gtr:id>E78AF245-3377-4828-AE22-0D73941DF9FC</gtr:id><gtr:impact>J&amp;oacute;nathan Heras, Ekaterina Komendantskaya, Moa Johansson, Ewen Maclean:
Proof-Pattern Recognition and Lemma Discovery in ACL2. LPAR 2013: 389-406</gtr:impact><gtr:outcomeId>56cddbd1ba43a8.41972273-1</gtr:outcomeId><gtr:partnerContribution>Research discussions and paper writing</gtr:partnerContribution><gtr:piContribution>Research discussions and paper writing with A.Bundy and E.Maclean</gtr:piContribution><gtr:sector>Academic/University</gtr:sector><gtr:start>2013-01-01</gtr:start></gtr:collaborationOutput></gtr:collaborationOutputs><gtr:disseminationOutputs/><gtr:exploitationOutputs/><gtr:furtherFundingOutputs><gtr:furtherFundingOutput><gtr:amountPounds>10000</gtr:amountPounds><gtr:country>United Kingdom of Great Britain &amp; Northern Ireland (UK)</gtr:country><gtr:currCode>GBP</gtr:currCode><gtr:currCountryCode>United Kingdom</gtr:currCountryCode><gtr:currLang>en_GB</gtr:currLang><gtr:description>SICSA Industrial Proof of Concept grant Machine-Learning for Industrial Theorem Proving</gtr:description><gtr:end>2014-04-02</gtr:end><gtr:fundingOrg>SICSA Scottish Informatics and Computer Science Alliance</gtr:fundingOrg><gtr:id>55D76934-C90F-4A70-9C7D-6F6D83186837</gtr:id><gtr:outcomeId>r-5706850323.55305806888c36</gtr:outcomeId><gtr:sector>Academic/University</gtr:sector><gtr:start>2013-09-01</gtr:start></gtr:furtherFundingOutput><gtr:furtherFundingOutput><gtr:amountPounds>70000</gtr:amountPounds><gtr:country>United Kingdom of Great Britain &amp; Northern Ireland (UK)</gtr:country><gtr:currCode>GBP</gtr:currCode><gtr:currCountryCode>United Kingdom</gtr:currCountryCode><gtr:currLang>en_GB</gtr:currLang><gtr:description>DTA PhD Studentship</gtr:description><gtr:end>2018-04-02</gtr:end><gtr:fundingOrg>Engineering and Physical Sciences Research Council (EPSRC)</gtr:fundingOrg><gtr:id>FB81ECFD-7E81-40A4-9F8C-B0F211633C2F</gtr:id><gtr:outcomeId>56cde7665229a4.16782160</gtr:outcomeId><gtr:sector>Academic/University</gtr:sector><gtr:start>2014-10-01</gtr:start></gtr:furtherFundingOutput><gtr:furtherFundingOutput><gtr:amountPounds>360</gtr:amountPounds><gtr:country>United Kingdom of Great Britain &amp; Northern Ireland (UK)</gtr:country><gtr:currCode>GBP</gtr:currCode><gtr:currCountryCode>United Kingdom</gtr:currCountryCode><gtr:currLang>en_GB</gtr:currLang><gtr:description>British Logic Colloquium Funding for Automated Reasoning Workshop, Dundee, April 2013</gtr:description><gtr:end>2013-04-02</gtr:end><gtr:fundingOrg>British Logic Colloquium</gtr:fundingOrg><gtr:fundingRef>http://www.computing.dundee.ac.uk/staff/katya/arw13/</gtr:fundingRef><gtr:id>9CB41114-AB54-40A5-94B5-F16C13328228</gtr:id><gtr:outcomeId>r-1912201905.541310685d4f0</gtr:outcomeId><gtr:sector>Learned Society</gtr:sector><gtr:start>2013-04-01</gtr:start></gtr:furtherFundingOutput><gtr:furtherFundingOutput><gtr:amountPounds>280590</gtr:amountPounds><gtr:country>United Kingdom of Great Britain &amp; Northern Ireland (UK)</gtr:country><gtr:currCode>GBP</gtr:currCode><gtr:currCountryCode>United Kingdom</gtr:currCountryCode><gtr:currLang>en_GB</gtr:currLang><gtr:description>Coalgebraic Logic Programming for Type Inference: parallelism and corecursion for a new generation of programming languages</gtr:description><gtr:end>2017-01-02</gtr:end><gtr:fundingOrg>Engineering and Physical Sciences Research Council (EPSRC)</gtr:fundingOrg><gtr:fundingRef>EP/K031864/1</gtr:fundingRef><gtr:id>0B854F9E-DDF4-47A4-A856-EB17E0F8760E</gtr:id><gtr:outcomeId>5edc47065edc471a</gtr:outcomeId><gtr:sector>Academic/University</gtr:sector><gtr:start>2013-09-01</gtr:start></gtr:furtherFundingOutput><gtr:furtherFundingOutput><gtr:amountPounds>992</gtr:amountPounds><gtr:country>United Kingdom of Great Britain &amp; Northern Ireland (UK)</gtr:country><gtr:currCode>GBP</gtr:currCode><gtr:currCountryCode>United Kingdom</gtr:currCountryCode><gtr:currLang>en_GB</gtr:currLang><gtr:description>SICSA support for Automated Reasoning Workshop, Dundee, April 2013.</gtr:description><gtr:end>2013-04-02</gtr:end><gtr:fundingOrg>SICSA Scottish Informatics and Computer Science Alliance</gtr:fundingOrg><gtr:fundingRef>http://www.computing.dundee.ac.uk/staff/katya/arw13/</gtr:fundingRef><gtr:id>04BA3091-6A2E-4020-B527-5DD75B425151</gtr:id><gtr:outcomeId>r-82439230.831749040685d3a6</gtr:outcomeId><gtr:sector>Academic/University</gtr:sector><gtr:start>2013-04-01</gtr:start></gtr:furtherFundingOutput><gtr:furtherFundingOutput><gtr:amountPounds>1500</gtr:amountPounds><gtr:country>United Kingdom of Great Britain &amp; Northern Ireland (UK)</gtr:country><gtr:currCode>GBP</gtr:currCode><gtr:currCountryCode>United Kingdom</gtr:currCountryCode><gtr:currLang>en_GB</gtr:currLang><gtr:description>Practical Types</gtr:description><gtr:end>2014-09-02</gtr:end><gtr:fundingOrg>SICSA Scottish Informatics and Computer Science Alliance</gtr:fundingOrg><gtr:id>D96C1831-CF8E-49C0-97E4-0E29C309CA67</gtr:id><gtr:outcomeId>r-8949836072.46525206897c2c</gtr:outcomeId><gtr:sector>Academic/University</gtr:sector><gtr:start>2013-09-01</gtr:start></gtr:furtherFundingOutput><gtr:furtherFundingOutput><gtr:amountPounds>100268</gtr:amountPounds><gtr:country>United Kingdom of Great Britain &amp; Northern Ireland (UK)</gtr:country><gtr:currCode>GBP</gtr:currCode><gtr:currCountryCode>United Kingdom</gtr:currCountryCode><gtr:currLang>en_GB</gtr:currLang><gtr:description>MACHINE LEARNING COALGEBRAIC AUTOMATED PROOFS</gtr:description><gtr:end>2014-02-02</gtr:end><gtr:fundingOrg>Engineering and Physical Sciences Research Council (EPSRC)</gtr:fundingOrg><gtr:fundingRef>EP/J014222/1</gtr:fundingRef><gtr:id>145CA445-0628-480B-886F-77399CEDF0B0</gtr:id><gtr:outcomeId>5edb36ea5edb36fe</gtr:outcomeId><gtr:sector>Academic/University</gtr:sector><gtr:start>2012-02-01</gtr:start></gtr:furtherFundingOutput></gtr:furtherFundingOutputs><gtr:impactSummaryOutputs><gtr:impactSummaryOutput><gtr:description>This work concerns the development of methods that can be used in formal verification of software and hardware.

We were the first to suggest and implement the statistical machine-learning tool that works on the background of user interface for Interactive Theorem Prover Coq and SSReflect.

It will impact the user interfaces for similar theorem provers, and has potential to speed up program development in higher-order languages.

We built ML4PG, a machine-learning extension for Proof General (a well-known interface for interactive theorem provers built in U.Edinburgh). ML4PG allows to gather proof statistics related to shapes of goals, sequences of applied tactics, and proof-tree structures from the libraries of interactive higher-order proofs written in Coq and SSReflect. The gathered data is clustered using the state-of-the-art machine learning algorithms available in machine-learning environmnents Matlab and Weka. ML4PG provides automated interfacing between Proof General and Matlab/Weka. The results of clustering are used by ML4PG to provide proof-hints in the process of interactive proof development, and, as a result, enhance user experience and speed up program development.

Beneficiaries: Researchers and practioners using Interactive Theorem Proving

Contribution Method: This research designed and implemented the new tool ML4PG to be used in Proof General.

The key findings were disseminated to industry via related Industrial Proof of Concept SICSA grant (2013-2014).</gtr:description><gtr:firstYearOfImpact>2012</gtr:firstYearOfImpact><gtr:id>36A15BA3-E452-4791-848D-7422E9DEC16A</gtr:id><gtr:impactTypes><gtr:impactType>Economic</gtr:impactType></gtr:impactTypes><gtr:outcomeId>m-7831495225.272602de261c4c</gtr:outcomeId><gtr:sector>Digital/Communication/Information Technologies (including Software)</gtr:sector></gtr:impactSummaryOutput></gtr:impactSummaryOutputs><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>The findings can be split into two big categories, that in turn split into subcategories, as follows:



1. Machine-learning methods in automated and interactive theorem provers.

1.1. We developed a new method of interfacing interactive theorem provers with state-of-the-art machine-learning engines, in real time.

1.2 We developed a new method to dynamically extract statistical features from interactive proofs

1.3 We developed a new method to run and post-process the results of machine-learning algorithms data-mining the computerised proof libraries

1.4 We developed a method to automatically generate and prove new lemmas/theorems on the basis of automatically discovered statistics of old proofs.

1.5 We developed a software tool ML4PG that data-mines Coq proofs, now it has become a standard package of Proof General software (Edinburgh University).

1.5 We developed a new tool - ACL2(ml), implementing the above techniques in ACL2 language, and engaged with SICSA and industries to disseminate it further via Industrial Proof of Concept grant.



2. Coalgebraic Logic Programming (CoALP)

2.1. We further improved the parallel implementation of CoALP, and formally described its parallel features in two journal papers;

2.2. We further developed guarded corecursion in CoALP;

2.3 We issued a new version of CoALP, implemented in parallel language GoLang.

2.4. the above work on CoALP gave rise to another EPSRC grant that implement CoALP in Type Inference in a range of Programming Languages</gtr:description><gtr:exploitationPathways>Software and Hardware Verification in Coq and SSReflect (for ML4PG)

Software and Hardware Verification in ACL2 (for ACL2(ml))

Compilers, Type inference in Programming languages (for CoALP)
 All software and documentation are made publicly available here:

Project progress summary: 

http://www.computing.dundee.ac.uk/staff/katya/MLCAP-man/

ML4PG software and documentation:

http://www.computing.dundee.ac.uk/staff/katya/ML4PG/

CoALP software and documentation:

http://www.computing.dundee.ac.uk/staff/katya/CoALP/

Spin-off of ML4PG work was ACL2(ml) work, funded by SICSA Industrial grant

http://staff.computing.dundee.ac.uk/jheras/acl2ml/

We already know of several academic users of the ML4PG system.</gtr:exploitationPathways><gtr:id>C71E2917-18F1-4B31-B7AD-A9F29BE4109A</gtr:id><gtr:outcomeId>r-4295998955.42114877744b24</gtr:outcomeId><gtr:sectors><gtr:sector>Digital/Communication/Information Technologies (including Software)</gtr:sector></gtr:sectors><gtr:url>http://staff.computing.dundee.ac.uk/katya/MLCAP-man/</gtr:url></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs><gtr:softwareAndTechnicalProductOutput><gtr:description>We present ML4PG, a machine-learning extension for Proof General. It allows to gather proof statistics related to shapes of goals, sequences of applied tactics, and proof-tree structures from the libraries of interactive higher-order proofs written in Coq and SSReflect. The gathered data is clustered using the state-of-the-art machine learning algorithms available in machine-learning environmnents Matlab and Weka. ML4PG provides automated interfacing between Proof General and Matlab/Weka. The results of clustering are used by ML4PG to provide proof-hints in the process of interactive proof development.</gtr:description><gtr:id>71A692B2-C505-41E9-ABFA-B72DE5891838</gtr:id><gtr:impact>The software was disseminated to industry via SICSA Industrial Proof of Concept grant (2013-2014).</gtr:impact><gtr:outcomeId>r-6053594337.8262176fd5cf02</gtr:outcomeId><gtr:title>ML4PG: machine learning for proof general</gtr:title><gtr:type>Software</gtr:type><gtr:url>http://staff.computing.dundee.ac.uk/katya/ML4PG/</gtr:url><gtr:yearFirstProvided>2012</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput><gtr:softwareAndTechnicalProductOutput><gtr:description>We present CoALP -- an implementation of Coalgebraic Logic programming. It is a dialect of first-order Horn-Clause logic that features lazy guarded corecursion and parallelism. CoALP arose from Coalgebraic semantics we developed in 2010-2014.</gtr:description><gtr:id>7093829C-0A02-4F74-B9FD-08E6D07998AF</gtr:id><gtr:impact>This software was taken for further development by a new EPSRC grant Coalgebraic Logic Programming for Type Inference: parallelism and corecursion for a new generation of programming languages for parallelism and corecursion, 2013-2017.</gtr:impact><gtr:outcomeId>r-1515557404.1563626fd5cde0</gtr:outcomeId><gtr:title>CoALP in Go: parallel and corecursive version</gtr:title><gtr:type>Software</gtr:type><gtr:url>http://staff.computing.dundee.ac.uk/katya/coalp/</gtr:url><gtr:yearFirstProvided>2014</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput><gtr:softwareAndTechnicalProductOutput><gtr:description>We present ML4PG, a machine-learning extension for Proof General. It allows to gather proof statistics related to shapes of goals, sequences of applied tactics, and proof-tree structures from the libraries of interactive higher-order proofs written in Coq and SSReflect. The gathered data is clustered using the state-of-the-art machine learning algorithms available in machine-learning environments Matlab and Weka. ML4PG provides automated interfacing between Proof General and Matlab/Weka. The results of clustering are used by ML4PG to provide proof-hints in the process of interactive proof development.</gtr:description><gtr:id>536B4A28-514D-4831-81EF-A3EE1497702A</gtr:id><gtr:impact>The software was disseminated to industry via SICSA Industrial Proof of Concept grant (2013-2014).</gtr:impact><gtr:outcomeId>r-508064330.09734786fd5cbd8</gtr:outcomeId><gtr:title>ML4PG -- version 2, 2014</gtr:title><gtr:type>Software</gtr:type><gtr:url>http://staff.computing.dundee.ac.uk/katya/ML4PG/</gtr:url><gtr:yearFirstProvided>2014</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput><gtr:softwareAndTechnicalProductOutput><gtr:description>We present CoALP -- an implementation of Coalgebraic Logic programming. It is a dialect of first-order Horn-Clause logic that features lazy guarded corecursion and parallelism. CoALP arose from Coalgebraic semantics we developed in 2010-2012.
The implementation was developed by the research team employed by the grant between 2013 and 2016.</gtr:description><gtr:id>4942B4CB-E9D4-4797-B65B-609411D31EA8</gtr:id><gtr:impact>This software was taken for further development by a new EPSRC grant Coalgebraic Logic Programming for Type Inference: parallelism and corecursion for a new generation of programming languages for parallelism and corecursion, 2013-2016.</gtr:impact><gtr:outcomeId>r-7008254851.2222766fd5c9b2</gtr:outcomeId><gtr:title>CoALP: Coalgebraic Logic programming in Haskell</gtr:title><gtr:type>Software</gtr:type><gtr:url>http://staff.computing.dundee.ac.uk/katya/coalp/</gtr:url><gtr:yearFirstProvided>2015</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput><gtr:softwareAndTechnicalProductOutput><gtr:description>ACL2(ml) is an extension for Emacs
that works with the automated theorem prover ACL2; and
 finds families of related ACL2 definitions and proofs on the basis of shape of terms.</gtr:description><gtr:id>72CD52C4-DCD9-4385-A1CA-9BE33CA0EFCF</gtr:id><gtr:impact>The paper has led to collaboration with Universities of Edinburgh and Chalmers (Sweden); as well as industries, via SICSA Industrial Proof of Concept grant.</gtr:impact><gtr:outcomeId>5453754a183915.84816719</gtr:outcomeId><gtr:title>ACL2(ml)</gtr:title><gtr:type>Software</gtr:type><gtr:url>http://staff.computing.dundee.ac.uk/katya/acl2ml/</gtr:url><gtr:yearFirstProvided>2013</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput></gtr:softwareAndTechnicalProductOutputs><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>F208A140-16E3-4A22-A762-C4723BDB6001</gtr:id><gtr:title>Computing persistent homology within Coq/SSReflect</gtr:title><gtr:parentPublicationTitle>ACM Transactions on Computational Logic</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/55c8cdae15213981d3b8168f5c891236"><gtr:id>55c8cdae15213981d3b8168f5c891236</gtr:id><gtr:otherNames>Heras J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2013-01-01</gtr:date><gtr:outcomeId>doi_53d075075dd89ee9</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>7B6D77A9-708F-400D-A2FC-06A43535F0FF</gtr:id><gtr:title>Proof-Pattern Search in Coq/SSreflect</gtr:title><gtr:parentPublicationTitle>Proceedings of Coq'14 workshop at FLoC'14</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/f8b0eda3a411b7246b785a92574680c7"><gtr:id>f8b0eda3a411b7246b785a92574680c7</gtr:id><gtr:otherNames>Heras J.</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2014-01-01</gtr:date><gtr:outcomeId>545396138ef579.68626499</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>BC485939-9B3F-4923-9D69-E9425050B980</gtr:id><gtr:title>Corecursion in Logic Programming: Lazy versus Eager</gtr:title><gtr:parentPublicationTitle>Proceedings of International Conference on Logic Programming</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/ae848c44fe6a20e7d384215d722c3e9c"><gtr:id>ae848c44fe6a20e7d384215d722c3e9c</gtr:id><gtr:otherNames>Jonathan Heras</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2014-01-01</gtr:date><gtr:outcomeId>545391b66151b8.24825801</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>5C56C676-88CA-4D9C-BD3A-D0EB3F058EF1</gtr:id><gtr:title>A Certified Reduction Strategy for Homological Image Processing</gtr:title><gtr:parentPublicationTitle>ACM Transactions on Computational Logic</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/d3e7b5baffee763e647b8218b87c046e"><gtr:id>d3e7b5baffee763e647b8218b87c046e</gtr:id><gtr:otherNames>Poza M</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2014-01-01</gtr:date><gtr:outcomeId>doi_55f975975c8285d9</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>D93EA0E7-E195-4DE5-9A4B-2107FA0B4AC2</gtr:id><gtr:title>Statistical Proof Pattern Recognition: Automated or Interactive?</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/cc7f289e3f990e4d6f090b456da72a7f"><gtr:id>cc7f289e3f990e4d6f090b456da72a7f</gtr:id><gtr:otherNames>Ekaterina Komendantskaya (Author)</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2013-01-01</gtr:date><gtr:outcomeId>r_4655083268cac0990c</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>355A8C08-327F-4072-A83A-90B5B78083D8</gtr:id><gtr:title>Recycling Proof Patterns in Coq: Case Studies</gtr:title><gtr:parentPublicationTitle>Mathematics in Computer Science</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/55c8cdae15213981d3b8168f5c891236"><gtr:id>55c8cdae15213981d3b8168f5c891236</gtr:id><gtr:otherNames>Heras J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2014-01-01</gtr:date><gtr:outcomeId>545399bc6a6202.94479766</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>78647C73-054B-409B-8B05-6489BBD6794C</gtr:id><gtr:title>Coalgebraic logic programming: from Semantics to Implementation</gtr:title><gtr:parentPublicationTitle>Journal of Logic and Computation</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/8a1f751684eea59daa41e9b748a08fae"><gtr:id>8a1f751684eea59daa41e9b748a08fae</gtr:id><gtr:otherNames>Komendantskaya E</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2016-01-01</gtr:date><gtr:outcomeId>54539b083b2d88.12876360</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>2F5DB243-0D98-4027-A5D0-554C7965DFA3</gtr:id><gtr:title>Proceedings of International Workshop on Automated Reasoning 2013</gtr:title><gtr:parentPublicationTitle>Proceedings of International Workshop on Automated Reasoning 2013</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/330c0cd21c84a0632cd2df297e875830"><gtr:id>330c0cd21c84a0632cd2df297e875830</gtr:id><gtr:otherNames>Komendantskaya, E</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2013-01-01</gtr:date><gtr:outcomeId>545396e23c5f43.00714543</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>C288A4BC-0D08-4C87-BC43-04731C6E613F</gtr:id><gtr:title>Exploiting Parallelism in Coalgebraic Logic Programming</gtr:title><gtr:parentPublicationTitle>Electronic Notes in Theoretical Computer Science</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/8a1f751684eea59daa41e9b748a08fae"><gtr:id>8a1f751684eea59daa41e9b748a08fae</gtr:id><gtr:otherNames>Komendantskaya E</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2014-01-01</gtr:date><gtr:outcomeId>5453997b91bb12.08994083</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>97CAC430-A4C9-4CF0-9D4F-538C263BAB8B</gtr:id><gtr:title>ACL2(ml): Machine-Learning for ACL2</gtr:title><gtr:parentPublicationTitle>Electronic Proceedings in Theoretical Computer Science</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/55c8cdae15213981d3b8168f5c891236"><gtr:id>55c8cdae15213981d3b8168f5c891236</gtr:id><gtr:otherNames>Heras J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2014-01-01</gtr:date><gtr:outcomeId>545395563424f5.60103984</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>AB588E19-7521-4202-84AD-318C35CCE8C0</gtr:id><gtr:title>A Statistical Relational Learning Challenge - extracting proof strategies from exemplar proofs.</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/cc7f289e3f990e4d6f090b456da72a7f"><gtr:id>cc7f289e3f990e4d6f090b456da72a7f</gtr:id><gtr:otherNames>Ekaterina Komendantskaya (Author)</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2012-01-01</gtr:date><gtr:outcomeId>r_8574833924cac97478</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>69250BEB-00ED-41A7-ABA1-7F07A37091C0</gtr:id><gtr:title>Machine Learning in Proof General: Interfacing Interfaces</gtr:title><gtr:parentPublicationTitle>Electronic Proceedings in Theoretical Computer Science</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/8a1f751684eea59daa41e9b748a08fae"><gtr:id>8a1f751684eea59daa41e9b748a08fae</gtr:id><gtr:otherNames>Komendantskaya E</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2013-01-01</gtr:date><gtr:outcomeId>doi_53d0890896b74d0d</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>E0960BDE-782A-4BD0-B495-A25700413866</gtr:id><gtr:title>Automated Reasoning Workshop 2013</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/cc7f289e3f990e4d6f090b456da72a7f"><gtr:id>cc7f289e3f990e4d6f090b456da72a7f</gtr:id><gtr:otherNames>Ekaterina Komendantskaya (Author)</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2014-01-01</gtr:date><gtr:outcomeId>m_918874138513a8cac4</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>248E6D2D-21CD-488F-941B-E42D3BFDFD1C</gtr:id><gtr:title>Coalgebraic Logic Programming: implicit versus explicit resource handling</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/cc7f289e3f990e4d6f090b456da72a7f"><gtr:id>cc7f289e3f990e4d6f090b456da72a7f</gtr:id><gtr:otherNames>Ekaterina Komendantskaya (Author)</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2012-01-01</gtr:date><gtr:outcomeId>r_7392914433cac996ce</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/J014222/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>41593421-CFAC-411D-94A7-E144022B0E6D</gtr:id><gtr:percentage>50</gtr:percentage><gtr:text>Artificial Intelligence</gtr:text></gtr:researchTopic><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>50</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>