<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations/><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/EAAD4D43-BD15-432B-9385-2DBD0C65958D"><gtr:id>EAAD4D43-BD15-432B-9385-2DBD0C65958D</gtr:id><gtr:name>University of Bath</gtr:name><gtr:department>Computer Science</gtr:department><gtr:address><gtr:line1>University of Bath</gtr:line1><gtr:line2>Claverton Down</gtr:line2><gtr:line4>Bath</gtr:line4><gtr:line5>Avon</gtr:line5><gtr:postCode>BA2 7AY</gtr:postCode><gtr:region>South West</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/EAAD4D43-BD15-432B-9385-2DBD0C65958D"><gtr:id>EAAD4D43-BD15-432B-9385-2DBD0C65958D</gtr:id><gtr:name>University of Bath</gtr:name><gtr:address><gtr:line1>University of Bath</gtr:line1><gtr:line2>Claverton Down</gtr:line2><gtr:line4>Bath</gtr:line4><gtr:line5>Avon</gtr:line5><gtr:postCode>BA2 7AY</gtr:postCode><gtr:region>South West</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/6FFE73A2-B7BF-47AB-9D96-8AA93267BAFC"><gtr:id>6FFE73A2-B7BF-47AB-9D96-8AA93267BAFC</gtr:id><gtr:firstName>Alessio</gtr:firstName><gtr:surname>Guglielmi</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole><gtr:personRole url="http://gtr.ukri.org:80/person/0DFEAB8C-4164-4C44-B21A-84E02B3757AC"><gtr:id>0DFEAB8C-4164-4C44-B21A-84E02B3757AC</gtr:id><gtr:firstName>Guy</gtr:firstName><gtr:surname>McCusker</gtr:surname><gtr:roles><gtr:role><gtr:name>CO_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FK018868%2F1"><gtr:id>B3F3B438-2489-4E15-8E05-A106BA8A0298</gtr:id><gtr:title>Efficient and Natural Proof Systems</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Research Grant</gtr:grantCategory><gtr:grantReference>EP/K018868/1</gtr:grantReference><gtr:abstractText>We are all familiar with the language of classical logic, which is normally used for both mathematical and informal arguments, but there are other important and useful logics. Some nonclassical logics, for example, can be associated with programming languages to help control the behaviour of their programs, for instance via type systems.

In order to define the proofs of a logic we need a proof system consisting of a formal language and some inference rules. We normally design proof systems following the prescriptions of some known formalism that ensures that we obtain desirable mathematical properties. In any case, we must make sure that proofs can be checked for validity with a computational effort that does not exceed certain limits. In other words, we want checking correctness to be relatively easy, also because this property facilitates the design of algorithms for the automatic discovery of proofs.

However, there is a tension between the ease by which proofs can be checked and their size. If a proof is too small, checking it is difficult. Conversely, formalisms that make it very easy to check and to search for proofs create big bureaucratic unnatural proofs. All traditional proof systems suffer to various extents from this problem, because of the rigidity of all traditional formalisms, which impose an excess of structure on proof systems.

We intend to design a formalism, provisionally called Formalism B, in which arbitrary logics can be defined and their proofs described in a way that is at the same time efficient and natural. Formalism B will ideally lie at the boundary between the class of proof systems and that of systems containing proto-proofs that are small and natural, but are too difficult to check. In other words, we want to maximise naturality by retaining as much efficiency as possible in proof representation. A driving force in this effort will be the use of existing algebraic theories that seem to capture some of the structure needed by the new formalism.

There are two main reasons for doing this. One is theoretical: the problem is compelling, and tackling it fits well into a research effort in the theory of computation that tries to define proofs as more abstract mathematical objects than just intricate pieces of syntax. Suffice to say that we are at present unable to decide by an algorithm when two seemingly different proofs of the same statement use the same ideas and so are equivalent, or not. This is a problem that dates back to Hilbert and that requires more abstract ways to describe proofs than traditional syntax provides.

The second reason is practical: we need formal proofs to verify the correctness of complex computer systems. The more powerful computer systems become, the more we need to ensure that they do what they are supposed to do. Formal verification is increasingly adopted as a viable instrument for this, but still much needs to be done in order to make it an everyday tool. We need to invent proof systems that simplify the interaction with proof assistants, and that could represent in some canonical way proofs that are essentially the same, so that no duplication occurs in the search for and storing of proofs in proof libraries.

This project intends to contribute by exploiting proof-theoretic advances of the past ten years. We have developed a new design method for proof systems that reduces the size of inference steps to their minimal terms, in a theory called `deep inference'. The finer scale of rules allows us to associate proofs with certain purely geometric objects that faithfully abstract away proof structure, and that are natural guides for the design of proof systems whose proofs would not suffer from several forms of bureaucracy.

In short, after a decade in which we broke proofs into their smallest pieces, by retaining their properties, we are now reshaping them in such a way that they still retain all the features we need but do not keep the undesirable ones.</gtr:abstractText><gtr:potentialImpactText>Formal, machine checkable proofs are increasingly used in computer science to ensure the correctness of complex hardware and software systems. Formal proofs are manipulated by complex pieces of software called proof assistants. At present, the cost of formal verification is high, and this limits its use only to the most critical systems. Part of the cost is due to the complexity of using proof assistants, which in turn depends on the relative artificiality of the languages in which formal proofs are expressed. For the same reasons, formal mathematical proofs are seldom used, and most mathematics is built around informal proofs that can in principle be formalised, but in practice are not.

The naturality, or lack thereof, of proof assistants depends on the formalisms on which they are based. The current ones are due to Gentzen (1930s). In this project we intend to design new formalisms that will be intrinsically less syntactic and more natural than Gentzen formalisms. This is a similar situation to the beginnings of computer algebra, in the 1960s. Then, the problem was to devise convenient languages and algorithms for symbolic algebraic computation; now we have a similar problem for the creation and manipulation of mathematical proofs.

We expect this impact on society and economy:

1) Maintaining a strategic research position and training students and researchers (with immediate effect). Research in deep inference has seen recent investment in the order of millions in continental Europe. It is the interest of the University of Bath and of the UK to maintain a strong presence in this area and to ride this wave. This grant will help training researchers and working with European collaborators, and it will help to secure further European funds in the near future. Some of this research will be integrated into our teaching, so educating graduates with a unique set of cross-disciplinary skills related to verification.

2) More efficient and easy to use proof assistants (in 10 years). We expect that the languages and algorithms produced by our research will become integral part of the verification tools of the future. This will be a technological advance primarily benefiting industry (banking, transports, commerce, etc.) and the general public, whose security and welfare will be better guaranteed than is the case today. In addition, we will contribute to the creation of proof assistants that will be friendlier than the current ones towards working mathematicians. In fact, we hope that, in the not too distant future, mathematicians will be able to effectively interact with computers in order to create proofs. This seldom happens today, one obstacle being the artificiality of the languages employed for formal proofs.

3) Formalisation of mathematics and creation of a universal mathematics database (in 20 years). There are ongoing efforts to create a universally accessible database of mankind's mathematical knowledge. The formalism that we will design in this project will help solve the problem of the identity of proofs, which requires the discovery of a unique representation for mathematical proofs that is able to capture their structure and ideas without unnecessary details. A solution to the proof identity problem is important for the formalised mathematics database, because it would ensure that only unique representatives of proofs would be contained in it, instead of countless and meaningless variants that would hinder its use. The impact will primarily be of a technological nature on academia and the industry, with indirect benefits to the general public. In fact, the mathematics database will revolutionise mathematical research and its teaching, thus boosting all the scientific disciplines that depend on mathematics. Therefore, all kinds of new technologies that depend on scientific discoveries and that benefit everybody will be boosted (two examples among millions are new drugs and new materials discovery).</gtr:potentialImpactText><gtr:fund><gtr:end>2016-05-12</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2013-02-01</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>556849</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs/><gtr:disseminationOutputs/><gtr:exploitationOutputs/><gtr:furtherFundingOutputs/><gtr:impactSummaryOutputs/><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>We have understood some key features of mathematical proofs and algorithms.</gtr:description><gtr:exploitationPathways>Essentially, we are changing the way proofs and algorithms can be represented. We would expect that others might find our results compelling to the point that they will adopt the novel representation methods arising from our research.</gtr:exploitationPathways><gtr:id>247DA2B1-4268-4E0F-8512-D811EEE9C0EF</gtr:id><gtr:outcomeId>56d1fcdbe6f533.48251947</gtr:outcomeId><gtr:sectors><gtr:sector>Digital/Communication/Information Technologies (including Software),Education,Other</gtr:sector></gtr:sectors></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs/><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>8898B647-91B3-417C-B0F1-F072C593B79E</gtr:id><gtr:title>Subatomic Proof Systems</gtr:title><gtr:parentPublicationTitle>ACM Transactions on Computational Logic</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/1dcb3224a70d4818717238362a1ae44c"><gtr:id>1dcb3224a70d4818717238362a1ae44c</gtr:id><gtr:otherNames>Tubella A</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2018-01-01</gtr:date><gtr:outcomeId>5a7995e16d3ae1.08917444</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>C054CD2A-66A6-41A8-83DA-4281C393B287</gtr:id><gtr:title>All About Proofs, Proofs for All,</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/aee9e28948b3b78a10be17594c23c953"><gtr:id>aee9e28948b3b78a10be17594c23c953</gtr:id><gtr:otherNames>Guglielmi A</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2015-01-01</gtr:date><gtr:isbn>978-1-84890-166-7</gtr:isbn><gtr:outcomeId>56d1f19778d724.18651195</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>2C6F46E0-FF86-457B-8993-BD0B5355B9E6</gtr:id><gtr:title>Quasipolynomial Normalisation in Deep Inference via Atomic Flows and Threshold Formulae</gtr:title><gtr:parentPublicationTitle>Logical Methods in Computer Science</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/5bd7862e3d7673e5a3647d5946cc23ca"><gtr:id>5bd7862e3d7673e5a3647d5946cc23ca</gtr:id><gtr:otherNames>Bruscoli P</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2016-01-01</gtr:date><gtr:outcomeId>58985799545fa5.60778694</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>7DDD122B-2923-4C08-B6D2-27D39F1FCAE1</gtr:id><gtr:title>Complexity Bounds for Sum-Product Logic via Additive Proof Nets and Petri Nets</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/8c24afc485008154f032eaba84386abc"><gtr:id>8c24afc485008154f032eaba84386abc</gtr:id><gtr:otherNames>Heijltjes W</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2015-01-01</gtr:date><gtr:outcomeId>56d43e971721e0.49668971</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/K018868/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>