<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations><gtr:collaborator url="http://gtr.ukri.org:80/organisation/2856B134-C51C-4260-A8A7-FB687E6C76D8"><gtr:id>2856B134-C51C-4260-A8A7-FB687E6C76D8</gtr:id><gtr:name>Indiana University</gtr:name><gtr:address><gtr:line1>Indiana University</gtr:line1><gtr:line2>PO Box 1847</gtr:line2><gtr:line4>Bloomington</gtr:line4><gtr:line5>IN 47404</gtr:line5><gtr:region>Outside UK</gtr:region><gtr:country>United States</gtr:country></gtr:address></gtr:collaborator><gtr:collaborator url="http://gtr.ukri.org:80/organisation/AFE5C6FD-3500-44F6-B100-184B5F2FD0D7"><gtr:id>AFE5C6FD-3500-44F6-B100-184B5F2FD0D7</gtr:id><gtr:name>Microsoft Research</gtr:name><gtr:address><gtr:line1>One Microsoft Way</gtr:line1><gtr:line4>Redmond</gtr:line4><gtr:line5>Washington 98052</gtr:line5><gtr:region>Outside UK</gtr:region><gtr:country>United States</gtr:country></gtr:address></gtr:collaborator></gtr:collaborations><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/AE58F21F-3622-4382-97BB-1359BD183E9F"><gtr:id>AE58F21F-3622-4382-97BB-1359BD183E9F</gtr:id><gtr:name>University of Glasgow</gtr:name><gtr:department>School of Computing Science</gtr:department><gtr:address><gtr:line1>University Avenue</gtr:line1><gtr:line4>Glasgow</gtr:line4><gtr:postCode>G12 8QQ</gtr:postCode><gtr:region>Scotland</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/AE58F21F-3622-4382-97BB-1359BD183E9F"><gtr:id>AE58F21F-3622-4382-97BB-1359BD183E9F</gtr:id><gtr:name>University of Glasgow</gtr:name><gtr:address><gtr:line1>University Avenue</gtr:line1><gtr:line4>Glasgow</gtr:line4><gtr:postCode>G12 8QQ</gtr:postCode><gtr:region>Scotland</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/2856B134-C51C-4260-A8A7-FB687E6C76D8"><gtr:id>2856B134-C51C-4260-A8A7-FB687E6C76D8</gtr:id><gtr:name>Indiana University</gtr:name><gtr:address><gtr:line1>Indiana University</gtr:line1><gtr:line2>PO Box 1847</gtr:line2><gtr:line4>Bloomington</gtr:line4><gtr:line5>IN 47404</gtr:line5><gtr:region>Outside UK</gtr:region><gtr:country>United States</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>COLLABORATOR</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/AFE5C6FD-3500-44F6-B100-184B5F2FD0D7"><gtr:id>AFE5C6FD-3500-44F6-B100-184B5F2FD0D7</gtr:id><gtr:name>Microsoft Research</gtr:name><gtr:address><gtr:line1>One Microsoft Way</gtr:line1><gtr:line4>Redmond</gtr:line4><gtr:line5>Washington 98052</gtr:line5><gtr:region>Outside UK</gtr:region><gtr:country>United States</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>COLLABORATOR</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/32CE70A0-638E-41E7-B46E-BCFBAA642949"><gtr:id>32CE70A0-638E-41E7-B46E-BCFBAA642949</gtr:id><gtr:firstName>Phil</gtr:firstName><gtr:surname>Trinder</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole><gtr:personRole url="http://gtr.ukri.org:80/person/040BCCD8-8A85-437A-8EE3-FDB13F590827"><gtr:id>040BCCD8-8A85-437A-8EE3-FDB13F590827</gtr:id><gtr:firstName>Patrick</gtr:firstName><gtr:surname>Maier</gtr:surname><gtr:roles><gtr:role><gtr:name>RESEARCHER_COI</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FL000687%2F1"><gtr:id>6943EF8A-A9EA-42CA-8AB2-2FD7D26506CF</gtr:id><gtr:title>Adaptive Just-In-Time Parallelisation (AJITPar)</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Research Grant</gtr:grantCategory><gtr:grantReference>EP/L000687/1</gtr:grantReference><gtr:abstractText>A key element of the multicore software crisis is a lack of abstraction: most parallel code mixes coordination and computation, and assumptions about the architecture are often hard-coded, tying the code to a specific architecture. For problems with regular parallelism, i.e. where the number and size of subproblems can be statically predicted, good parallel performance on an architecture can be obtained using static techniques including static compilation. However, many problems are irregular and require dynamic techniques such as we propose.

This project aims to address the challenges of programs with irregular parallelism by sharing the burden of parallel coordination between the programmer and an adaptive runtime system. The approach can be summarised in the slogan &amp;quot;The programmer knows the problem, the runtime knows the hardware.&amp;quot; That is, the programmer merely exposes the parallelism in the problem domain by means of architecture-independent declarative constructs, and the runtime system decides how to map the parallelism to a specific architecture. The project aims for a framework combining portable parallel performance across a range of architectures with &amp;quot;compile once, run anywhere&amp;quot; portable binaries. The project will test whether portable performance has been achieved by comparing the parallel performance of a suite benchmarks on several parallel architectures, from standard desktop workstations to high-end compute clusters.

The proposed research will advance the state-of-the-art in two areas. 
(1) The development of runtime systems that tightly integrate dynamic scheduling of parallelism with dynamic trace-based just-in-time (JIT) compilation.
(2) The systematic investigation into how to specialise architecture-independent declarative parallelism to a specific architecture at runtime by means of declarative and modular code transformations.
Crucially, both novelties need to be combined; neither can deliver portable parallel performance on its own. The parallelising JIT runtime system may not find the &amp;quot;right&amp;quot; amount of parallelism without dynamically applying code transformations, and the transformations cannot in general be applied statically because they require knowledge of runtime timing data.

The research is timely in exploiting emergent trace-based JIT technology. Moreover, the project has enormous transformative potential. It investigates JIT parallelisation using Haskell because its pure functional context enables safe code transformation. If successful, however, the techniques established can be used to transform the parallel portability of software in many programming languages with JIT compilers, not least &amp;quot;functional second&amp;quot; languages like JavaScript, Python, Scala and C#. Moreover, a JIT compiler's innate ability to optimise traces spanning several layers of the software stack enables a parallelising JIT runtime to exploit potential parallelism uniformly across all software layers and components.

JIT compilers for languages like Java or JavaScript have spread widely in recent years, being deployed on a wide variety of architectures, from smart phones to desktop computers to web servers. Because of its transformative potential, the design and implementation of a parallelising JIT compiler for Haskell will be followed with interest by implementers of parallel languages in the UK and abroad, both academic and in industry, e.g. at Microsoft, Google, Mozilla.

This speculative project will be undertaken by an experienced and energetic team in a vibrant environment. The team will be led by Professor Phil Trinder, who has 20 year's experience in the field, delivering 13 successful research projects, and with over 100 publications. Dr. Maier contributes deep knowledge of parallel language implementation and program analysis.</gtr:abstractText><gtr:potentialImpactText>The applicants have an excellent track record in maximising research impact, and some relevant examples are as follows. The SCSCP protocol developed in a series of multidisciplinary parallel Computer Algebra projects has become a de facto standard with implementations in 9 Computer Algebra Systems (including Maple and MATLAB) and several languages (including Java, C/C++, Haskell). The HLDTS EPSRC project evaluated Erlang for telecommunications servers in conjunction with Motorola UK Research Labs. The project produced 6 conference publications and 2 journal papers; slides comparing C++ with Erlang have had 16K views on Reddit; several product groups in Motorola started using Erlang; the DM prototype we constructed became a mission-critical Motorola product; two Erlang evangelists were established within Motorola. HLDTS lead to the 3.6M Euro FP7 RELEASE project that aims to improve the scalability of Erlang on large commodity servers. The project, coordinated by Prof Trinder, engages both multinationals like Ericsson and EDF, but also a UK SME, Erlang Solutions.

The project will develop a prototype Haskell compiler, and the technology may be incorporated in GHC. This would convey considerable economic benefits as the user bases of both Haskell and GHC are substantial and growing extremely rapidly. Even greater impact would follow if ``functional second'' languages with very large developer communities, like JavaScript, Python, Scala, and C#, took up the technology.

Software is of strategic importance in a technological economy. An example is the Digital Economy, which already requires software that delivers good parallel performance on evolving parallel architectures. If successful the proposed research will help alleviate the parallel software crisis that is impinging on all software. Specifically, the technology has the potential to reduce the time and costs for development, and for porting between architectures, hence reducing the cost of products and their time to market.

UK society is increasingly dependent on a technological infrastructure that incorporates distributed and embedded software systems in an essential way; examples include cloud services (&amp;pound;2.4bn/year, set to grow to &amp;pound;6.1bn/year by 2014), telecommunication networks (&amp;pound;5bn/year) and mobile devices (&amp;pound;4bn/year). However, complexity is exploding with the increasing number, diversity, and parallel capabilities of the hardware architectures these software systems are deployed on. A unifying software framework, such as a portable bytecode format and JIT compiler ensuring performance-preserving portability between architectures, would help bring complexity back under control. If successful the proposed research will provide such a framework, thereby facilitating continued cost-effective infrastructure development and maintenance. This will help the UK maintain its European lead in tech infrastructure, benefiting society as a whole.

Our impact strategy is to engage both industry and academia, maintaining a web 2.0 presence facing both communities, e.g. hosting academic publications, releasing open source software, and blogging/slide-sharing in industrial fora. We will present and debate at academic conferences, at industrial fora like Techmeetup, through networks of excellence like HiPEAC, and via web technology, e.g. appropriate Google groups, email lists, wikis, etc. We will also publish in premier journals and via Heriot-Watt web pages and press releases. We will exploit our close personal links with the GHC team at Microsoft Research Labs in Cambridge to disseminate our results.

The project will train a PhD student to become an expert engineer on programming language support for manycore architectures. Such engineers are in extremely short supply and can have significant economic impact. Additionally, we will expose students to the AJITPar compiler in courses on parallel programming, thereby disseminating our results and training future developers.</gtr:potentialImpactText><gtr:fund><gtr:end>2017-05-31</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2013-10-15</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>442467</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs><gtr:collaborationOutput><gtr:collaboratingOrganisation>Microsoft Research</gtr:collaboratingOrganisation><gtr:country>Global</gtr:country><gtr:description>Microsoft Research</gtr:description><gtr:id>1A9AFCE2-1839-46DF-8CFE-1758A8182205</gtr:id><gtr:impact>Outcome of project review: Ongoing development of precise semantics for skeletons transformations based on rewriting and expansion to task graphs.</gtr:impact><gtr:outcomeId>56dccc3bea79a9.92326701-1</gtr:outcomeId><gtr:partnerContribution>Simon Peyton Jones (Microsoft Research) has provided advice and feedback from the project start in 2013.

Simon Peyton Jones engaged in a 1-day project review at Microsoft Research offices in Cambridge on 1 Oct 2015.</gtr:partnerContribution><gtr:piContribution>Presented current state of project and future plans at project review at Microsoft Research, Cambridge, 1 Oct 2015.</gtr:piContribution><gtr:sector>Private</gtr:sector><gtr:start>2013-01-01</gtr:start></gtr:collaborationOutput><gtr:collaborationOutput><gtr:collaboratingOrganisation>Indiana University</gtr:collaboratingOrganisation><gtr:country>United States of America</gtr:country><gtr:department>School of Informatics, Computing and Engineering</gtr:department><gtr:description>SICSA Distinguished Visiting Fellowship</gtr:description><gtr:id>1F98A70B-0F56-44D5-9874-49991E26F6BF</gtr:id><gtr:impact>3 research seminars at St Andrews, Edinburgh, Glasgow Universities.

Development of JIT-based cost models for the Pycket compiler.

Development of TCP communication for the Pycket compiler.

Development of shared-memory interprocess communication for the Pycket and Racket compilers.</gtr:impact><gtr:outcomeId>58b84a9dcac400.79945774-1</gtr:outcomeId><gtr:partnerContribution>Deliver 3 seminars at St Andrews, Edinburgh, Glasgow Universities.

Full details available at http://www.sicsa.ac.uk/wp-content/uploads/2017/03/Sam-Tobin-Hochstadt.pdf

Prof. Tobin-Hochstadt's group lead the development of the Pycket compiler, which is a key software component of the AJITPar project.</gtr:partnerContribution><gtr:piContribution>Applied for funding for a SICSA Distinguished Visiting Fellowship:
 www.sicsa.ac.uk/funding/academics-postdoctoral-researchers/host-a-visitor/

Hosted Professor Sam Tobin-Hochstadt during his two week visit (22/1/17 - 5/2/17). Made arrangements for his delivery of 3 seminars (details below).

Beyond the fellowship we retain close collaboration with Professor Tobin-Hochstadt on the development of the Pycket compiler.</gtr:piContribution><gtr:sector>Academic/University</gtr:sector><gtr:start>2015-01-01</gtr:start></gtr:collaborationOutput><gtr:collaborationOutput><gtr:collaboratingOrganisation>Indiana University</gtr:collaboratingOrganisation><gtr:country>United States of America</gtr:country><gtr:description>SICSA Distinguished Visiting Fellowship</gtr:description><gtr:id>A04AEB26-5661-4C43-A3C5-196A953C13DE</gtr:id><gtr:impact>3 research seminars at St Andrews, Edinburgh, Glasgow Universities

A Hackathon to help develop a common open source code base for distributed-memory Haskell.</gtr:impact><gtr:outcomeId>545b59fe9fb832.56594365-1</gtr:outcomeId><gtr:partnerContribution>Deliver 3 seminars at St Andrews, Edinburgh, Glasgow Universities, and help lead a Hackathon at Heriot-Watt University.

Full details available at http://www.sicsa.ac.uk/wp-content/uploads/2014/03/Professor-Ryan-R-Newton.pdf</gtr:partnerContribution><gtr:piContribution>Applied for funding for a SICSA Distinguished Visiting Fellowship:
 www.sicsa.ac.uk/funding/academics-postdoctoral-researchers/host-a-visitor/

Hosted Professor Ryan Newton during his 10 day visit (11/6/14 - 20/6/14). Made arrangements for his delivery of 3 seminars and a Hackathon (details below).

Beyond the fellowship we retain close collaboration with Professor Newton.</gtr:piContribution><gtr:sector>Academic/University</gtr:sector><gtr:start>2014-01-01</gtr:start></gtr:collaborationOutput></gtr:collaborationOutputs><gtr:disseminationOutputs><gtr:disseminationOutput><gtr:description>SPLS 2015 talk (Magnus)</gtr:description><gtr:form>A talk or presentation</gtr:form><gtr:geographicReach>Regional</gtr:geographicReach><gtr:id>5E50DFA9-EE0A-4B56-A72C-8D77BA24F5FE</gtr:id><gtr:impact>Talk &amp;quot;Costing JIT Traces for Adaptive Parallelism&amp;quot;, Scottish Programming Languages Seminar, St Andrews, 15 June 2015

This talk presented a technique for building cheap-to-compute cost models by piggybacking on the traces collected by a just-in-time compiler.</gtr:impact><gtr:outcomeId>56dcc4283cd8c5.40486250</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Other audiences</gtr:primaryAudience><gtr:url>https://ff32.host.cs.st-andrews.ac.uk/spls/</gtr:url><gtr:year>2015</gtr:year></gtr:disseminationOutput><gtr:disseminationOutput><gtr:description>CEFP 2015 talk (Magnus)</gtr:description><gtr:form>A talk or presentation</gtr:form><gtr:geographicReach>International</gtr:geographicReach><gtr:id>AF82CFA6-0B5B-4057-922B-0FBD805FD6C2</gtr:id><gtr:impact>Talk &amp;quot;Costing JIT Traces for Adaptive Parallelism&amp;quot;, Central-European Functional Programming School, Budapest, 8 July 2015

This talk presented a technique for building cheap-to-compute cost models by piggybacking on the traces collected by a just-in-time compiler.</gtr:impact><gtr:outcomeId>56dcc4a326dcc0.44207080</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Postgraduate students</gtr:primaryAudience><gtr:url>http://people.inf.elte.hu/cefp/</gtr:url><gtr:year>2015</gtr:year></gtr:disseminationOutput><gtr:disseminationOutput><gtr:description>Haskell Implementors 2014 talk</gtr:description><gtr:form>A talk or presentation</gtr:form><gtr:geographicReach>International</gtr:geographicReach><gtr:id>4C97EFE8-0E27-40E9-9B63-815E558024E7</gtr:id><gtr:impact>Talk &amp;quot;The Implementation of the HdpH DSLs: Details and Difficulties&amp;quot;, Haskell Implementors Workshop 2014, Gothenburg, 6 Sep 2014.

The talk presented details on the implementation of serialisable closure in the HdpH DSLs. The talk led to ongoing email discussions with fellow researchers about the safest and most efficient ways to implement serialisable closures in Haskell.

The infrastructure provided by GHC (the standard Haskell compiler) for supporting serialisable closures is currently undergoing a design review. Ideas presented in the talk have been taken on board, and are currently being refined in email discussions and blog posts.</gtr:impact><gtr:outcomeId>545b6d16728c81.10656183</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Health professionals</gtr:primaryAudience><gtr:url>https://www.haskell.org/haskellwiki/HaskellImplementorsWorkshop/2014/</gtr:url><gtr:year>2014</gtr:year></gtr:disseminationOutput><gtr:disseminationOutput><gtr:description>TFP 2015 talk (Magnus)</gtr:description><gtr:form>A talk or presentation</gtr:form><gtr:geographicReach>International</gtr:geographicReach><gtr:id>BFC3CFC2-27E5-4FFA-9249-37CF0C2A1A4C</gtr:id><gtr:impact>Talk &amp;quot;Costing and Transforming JIT Traces for Adaptive Parallelism&amp;quot;, Symposium on Trends in Functional Programming, Sophia Antipolis, 3 June 2015

This talk presented a technique for building cheap-to-compute cost models by piggybacking on the traces collected by a just-in-time compiler.</gtr:impact><gtr:outcomeId>56dcc3c3613975.36723270</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Other audiences</gtr:primaryAudience><gtr:url>https://tfp2015.inria.fr/</gtr:url><gtr:year>2015</gtr:year></gtr:disseminationOutput><gtr:disseminationOutput><gtr:description>Meetings with computational scientists</gtr:description><gtr:form>A talk or presentation</gtr:form><gtr:geographicReach>Local</gtr:geographicReach><gtr:id>E8F9D80E-32B4-4E0B-BEDD-427F4D4A5A01</gtr:id><gtr:impact>Presented AJITPar results to physists and chemists at Glasgow University, 11 Jan 2016.

Discussed the needs of computational scientists for a system similar to AJITPar, specifically for scientific code written in Python. Identified potential candidate case studies. Joint exploration of these candidates is ongoing, and has resulted in several follow up meetings.</gtr:impact><gtr:outcomeId>56dcceeddcfa12.78875840</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Other audiences</gtr:primaryAudience><gtr:year>2016</gtr:year></gtr:disseminationOutput><gtr:disseminationOutput><gtr:description>Haskell 2014 talk</gtr:description><gtr:form>A talk or presentation</gtr:form><gtr:geographicReach>International</gtr:geographicReach><gtr:id>83DCCF7E-C48A-42FC-8698-4E36B37F374B</gtr:id><gtr:impact>Talk &amp;quot;The HdpH DSLs for Scalable Reliable Computation&amp;quot;, Haskell Symposium 2014, Gothenburg, 4 Sep 2014.

The talk presented two domain-specific languages for parallel programming on large-scale distributed-memory architectures, one providing fault tolerance, the other offering the programmer a highly abstract mathematical model of non-uniform communication latency. The talk sparked a number of discussions with fellow researchers on the potential suitability of such an abstract model of latency in their domains.

Not aware of any impact.</gtr:impact><gtr:outcomeId>545b6a5d910812.01499610</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Other academic audiences (collaborators, peers etc.)</gtr:primaryAudience><gtr:url>https://www.haskell.org/haskell-symposium/2014/</gtr:url><gtr:year>2014</gtr:year></gtr:disseminationOutput><gtr:disseminationOutput><gtr:description>IFL 2015 talk</gtr:description><gtr:form>A talk or presentation</gtr:form><gtr:geographicReach>International</gtr:geographicReach><gtr:id>C6226004-D3E4-45CC-95AF-FC5A34DD636F</gtr:id><gtr:impact>Talk &amp;quot;Towards An Adaptive Framework For Performance Portability&amp;quot;, 27th Symposium on Implementation and Application of Functional Languages, Koblenz, 16 Sep 2015

The talk presented progress towards the adaptive parallel programming framework developed in the AJITPar project, specifically progress on a distributed task scheduler and on light-weight cost models based on JIT-traces. The talk sparked discussions with fellow researchers on scheduling policies to reduce latency.</gtr:impact><gtr:outcomeId>56d6b0fe677f88.01559269</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Other audiences</gtr:primaryAudience><gtr:url>http://ifl2015.wikidot.com/</gtr:url><gtr:year>2015</gtr:year></gtr:disseminationOutput><gtr:disseminationOutput><gtr:description>SPLS June 2016</gtr:description><gtr:form>A talk or presentation</gtr:form><gtr:geographicReach>Regional</gtr:geographicReach><gtr:id>2C71DA4D-2C14-4F7C-A045-D6310C43811D</gtr:id><gtr:impact>Talk &amp;quot;JIT Cost Analysis for Adaptive Skeletons&amp;quot;, Scottish Programming Languages Seminar, Heriot-Watt, 22 June 2016

This talk demonstrated the usefulness of trace-based cost models for guiding program transformations to adapt parallelism.</gtr:impact><gtr:outcomeId>58b8a0b7e38c76.04106897</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Other audiences</gtr:primaryAudience><gtr:url>http://www.macs.hw.ac.uk/~rs46/spls-hwu-june2016/</gtr:url><gtr:year>2016</gtr:year></gtr:disseminationOutput><gtr:disseminationOutput><gtr:description>EuroPar 2014 talk</gtr:description><gtr:form>A talk or presentation</gtr:form><gtr:geographicReach>International</gtr:geographicReach><gtr:id>76A43F0C-6DB6-44EA-A355-594B86F8B164</gtr:id><gtr:impact>Talk &amp;quot;High-Performance Computer Algebra: A Hecke Algebra Case Study&amp;quot; at EuroPar 2014, Porto, 27 August 2014.

The talk presented a case study in parallel computational algebra, including results of running computational algebra experiments on a supercomputer. It sparked discussions on why there are so few large scale parallel computational algebra experiments, and why current computer architectures favour numerical rather than algebraic or symbolic algorithms.

Not aware of any impact.</gtr:impact><gtr:outcomeId>545b6787871351.40907365</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Other academic audiences (collaborators, peers etc.)</gtr:primaryAudience><gtr:url>http://europar2014.dcc.fc.up.pt/</gtr:url><gtr:year>2014</gtr:year></gtr:disseminationOutput><gtr:disseminationOutput><gtr:description>RAC 2016 (Magnus)</gtr:description><gtr:form>A talk or presentation</gtr:form><gtr:geographicReach>International</gtr:geographicReach><gtr:id>66F2014D-445D-495C-B8DE-B659895507F6</gtr:id><gtr:impact>Talk &amp;quot;JIT-Based Cost Analysis for Dynamic Program Transformations&amp;quot;, Resource Aware Computing Workshop, Eindhoven, The Netherlands, April 2, 2016.

This talk presented JIT-based cost models and demonstrated that these models accurately predict the cost program transformations.</gtr:impact><gtr:outcomeId>58bff14273dca5.85784914</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Other audiences</gtr:primaryAudience><gtr:url>http://resourceanalysis.cs.ru.nl/rac2016/</gtr:url><gtr:year>2016</gtr:year></gtr:disseminationOutput><gtr:disseminationOutput><gtr:description>FHPC 2016</gtr:description><gtr:form>A talk or presentation</gtr:form><gtr:geographicReach>International</gtr:geographicReach><gtr:id>242BB22C-76C1-4516-885B-126BBF924E08</gtr:id><gtr:impact>Talk &amp;quot;JIT Costing Adaptive Skeletons for Performance Portability&amp;quot;, 5th International Workshop on Functional High-Performance Computing, Nara, Japan, September 22, 2016.

This talk demonstrated the suitability for JIT-based cost models for guiding program transformations to adapt parallelism.</gtr:impact><gtr:outcomeId>58b8a6c447a884.83951099</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Other audiences</gtr:primaryAudience><gtr:url>https://sites.google.com/site/fhpcworkshops/fhpc-2016/call-for-participation-txt/callforparticipation</gtr:url><gtr:year>2016</gtr:year></gtr:disseminationOutput><gtr:disseminationOutput><gtr:description>RWDSL 2014 talk</gtr:description><gtr:form>A talk or presentation</gtr:form><gtr:geographicReach>Regional</gtr:geographicReach><gtr:id>19557BD1-57D0-4370-8414-BF6D14CCAF45</gtr:id><gtr:impact>Talk &amp;quot;The Design of the AJITPar Parallel Coordination DSL&amp;quot;, Workshop on Real World Domain Specific Languages, Heriot-Watt, 1 May 2014

The talk outlined the design of the task parallel coordination DSL used in the AJITPar project. The event sparked discussions on the nature of domain-specific languages and led to the planning of an international workshop on Real World Domain Specific Languages, to be held in 2016 in Barcelona. Prof Trinder and Dr Maier were invited to serve on the program committee.</gtr:impact><gtr:outcomeId>56dbdc20843560.63407493</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Other audiences</gtr:primaryAudience><gtr:url>http://www.macs.hw.ac.uk/~rs46/dsl-workshop/</gtr:url><gtr:year>2014</gtr:year></gtr:disseminationOutput></gtr:disseminationOutputs><gtr:exploitationOutputs/><gtr:furtherFundingOutputs><gtr:furtherFundingOutput><gtr:country>United Kingdom of Great Britain &amp; Northern Ireland (UK)</gtr:country><gtr:currCode>GBP</gtr:currCode><gtr:currCountryCode>United Kingdom</gtr:currCountryCode><gtr:currLang>en_GB</gtr:currLang><gtr:description>Network</gtr:description><gtr:end>2019-10-02</gtr:end><gtr:fundingOrg>Engineering and Physical Sciences Research Council (EPSRC)</gtr:fundingOrg><gtr:fundingRef>EP/P006434/1</gtr:fundingRef><gtr:id>FCE53D8A-4077-4FF5-BFC5-F20BC8454CC9</gtr:id><gtr:outcomeId>58b92786e47142.11330345</gtr:outcomeId><gtr:sector>Academic/University</gtr:sector><gtr:start>2016-11-01</gtr:start></gtr:furtherFundingOutput><gtr:furtherFundingOutput><gtr:country>United Kingdom of Great Britain &amp; Northern Ireland (UK)</gtr:country><gtr:currCode>GBP</gtr:currCode><gtr:currCountryCode>United Kingdom</gtr:currCountryCode><gtr:currLang>en_GB</gtr:currLang><gtr:description>Standard Research - NR1</gtr:description><gtr:end>2020-02-02</gtr:end><gtr:fundingOrg>Engineering and Physical Sciences Research Council (EPSRC)</gtr:fundingOrg><gtr:fundingRef>EP/M022641/1</gtr:fundingRef><gtr:id>84A8A8CE-4B96-45DC-8680-6CE2E4055C53</gtr:id><gtr:outcomeId>58b88cb83e7f89.51186625</gtr:outcomeId><gtr:sector>Academic/University</gtr:sector><gtr:start>2015-03-01</gtr:start></gtr:furtherFundingOutput></gtr:furtherFundingOutputs><gtr:impactSummaryOutputs/><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>We are investigating whether dynamic scheduling, cost models, and JIT technology can facilitate automatic adaption of software to a range of parallel architectures.

Initial results show that the adaptions can improve performance, but we have not yet fully automated the process.</gtr:description><gtr:exploitationPathways>They cannot be taken forward until the investigation is complete.

We do hope, however, to apply the AJITPar techniques to other programming languages with tracing JIT compilers. In particular we are exploring their application to the Python programming language, and specifically to scientific applications that use the SciPy software stack.</gtr:exploitationPathways><gtr:id>BCB96169-36F0-48CD-AAE0-8AAF5F29D6A7</gtr:id><gtr:outcomeId>56de9d8ebe7603.86385695</gtr:outcomeId><gtr:sectors><gtr:sector>Digital/Communication/Information Technologies (including Software)</gtr:sector></gtr:sectors><gtr:url>http://www.dcs.gla.ac.uk/~pmaier/AJITPar/</gtr:url></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs><gtr:softwareAndTechnicalProductOutput><gtr:description>Fork of the Pycket compiler (master repository: https://github.com/samth/pycket)

This version of Pycket has been extended with the JIT-based cost model developed in the AJITPar project.</gtr:description><gtr:id>D6250F41-914D-414D-9352-4F8BFAE9F234</gtr:id><gtr:impact>Used in two AJITPar publications.</gtr:impact><gtr:outcomeId>58b89795e92363.04167274</gtr:outcomeId><gtr:title>Fork of Pycket compiler, augmented with JIT-based cost model</gtr:title><gtr:type>Software</gtr:type><gtr:url>https://github.com/magnusmorton/pycket/tree/runtime_trace_analysis</gtr:url><gtr:yearFirstProvided>2016</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput><gtr:softwareAndTechnicalProductOutput><gtr:description>Reference implementations of the maximal clique graph search benchmark for phase III of the international SICSA Multicore Challenge:
 www.macs.hw.ac.uk/sicsawiki/index.php/Challenge_PhaseIII 

The challenge invites developers to compare multicore language technologies on common problems and platforms: 
 www.macs.hw.ac.uk/sicsawiki/index.php/MultiCoreChallenge</gtr:description><gtr:id>84FB97DD-4033-4550-96FF-A36A5EA6EB77</gtr:id><gtr:impact>Used as part of the ongoing SICSA Multicore Challenge.</gtr:impact><gtr:outcomeId>545b56299d77b3.63553863</gtr:outcomeId><gtr:title>Haskell Reference Implementation of Maximal Clique for SICSA Multicore Challenge III</gtr:title><gtr:type>Software</gtr:type><gtr:url>http://www.macs.hw.ac.uk/sicsawiki/index.php/PhaseIII_Haskell_Versions</gtr:url><gtr:yearFirstProvided>2014</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput></gtr:softwareAndTechnicalProductOutputs><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>741384CD-CF69-444F-8D62-F20B2A6A8ED7</gtr:id><gtr:title>Transparent fault tolerance for scalable functional computation</gtr:title><gtr:parentPublicationTitle>Journal of Functional Programming</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/c84480844749f4821939e745921771c6"><gtr:id>c84480844749f4821939e745921771c6</gtr:id><gtr:otherNames>STEWART R</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2016-01-01</gtr:date><gtr:outcomeId>585d5d7b458cf6.34927994</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>EB9A671F-F58C-40CE-A073-5264ED69813C</gtr:id><gtr:title>HPC-GAP: engineering a 21st-century high-performance computer algebra system</gtr:title><gtr:parentPublicationTitle>Concurrency and Computation: Practice and Experience</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/5eae291b59caad135cc963ae030910e1"><gtr:id>5eae291b59caad135cc963ae030910e1</gtr:id><gtr:otherNames>Behrends R</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2016-01-01</gtr:date><gtr:outcomeId>56d5cad9b17124.26693732</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>5496ACED-B58B-4270-8B1B-07FA0248A9F8</gtr:id><gtr:title>Replicable parallel branch and bound search</gtr:title><gtr:parentPublicationTitle>Journal of Parallel and Distributed Computing</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/070501a61ae3ccece0b0b9b4852f0d9a"><gtr:id>070501a61ae3ccece0b0b9b4852f0d9a</gtr:id><gtr:otherNames>Archibald B</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2018-01-01</gtr:date><gtr:outcomeId>5a66180c9e3191.91729771</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>6412ADA0-7E3C-4BB4-B8B4-24C8F2A7BEA9</gtr:id><gtr:title>Evaluating Scalable Distributed Erlang for Scalability and Reliability</gtr:title><gtr:parentPublicationTitle>IEEE Transactions on Parallel and Distributed Systems</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/a488d05c794e2a67801a08b9e3a88bcb"><gtr:id>a488d05c794e2a67801a08b9e3a88bcb</gtr:id><gtr:otherNames>Chechina N</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2017-01-01</gtr:date><gtr:outcomeId>5a2fe58fd08073.52116232</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>8A628863-E47C-4E83-9A0C-A333C3DB8043</gtr:id><gtr:title>JIT-Based Cost Analysis for Dynamic Program Transformations</gtr:title><gtr:parentPublicationTitle>Electronic Notes in Theoretical Computer Science</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/5490a61998fcc920e50806e7abdc291e"><gtr:id>5490a61998fcc920e50806e7abdc291e</gtr:id><gtr:otherNames>Morton J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2016-01-01</gtr:date><gtr:outcomeId>58b83fc9269b02.56538880</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>351D3C1A-5F9B-4281-A2DD-4E82F829AEBF</gtr:id><gtr:title>Why So Many? A Brief Tour of Haskell DSLs for Parallel Programming</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/906e84aebf67b7080fc1cc5c8ddcbbc9"><gtr:id>906e84aebf67b7080fc1cc5c8ddcbbc9</gtr:id><gtr:otherNames>Maier P</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2016-01-01</gtr:date><gtr:outcomeId>58b838e9143f35.79717222</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/L000687/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>D7BA1404-E001-4782-929E-E96E28B01201</gtr:id><gtr:percentage>30</gtr:percentage><gtr:text>Computer Sys. &amp; Architecture</gtr:text></gtr:researchTopic><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>20</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic><gtr:researchTopic><gtr:id>01AC56BC-45B4-434D-B015-7C879327F09F</gtr:id><gtr:percentage>50</gtr:percentage><gtr:text>Parallel Computing</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>