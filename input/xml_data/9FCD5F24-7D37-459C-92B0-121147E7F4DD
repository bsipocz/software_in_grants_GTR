<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations><gtr:collaborator url="http://gtr.ukri.org:80/organisation/AB979D25-DDBE-4C82-9D51-F38618FE37BD"><gtr:id>AB979D25-DDBE-4C82-9D51-F38618FE37BD</gtr:id><gtr:name>Middlesex University</gtr:name><gtr:address><gtr:line1>The Burroughs</gtr:line1><gtr:line2>Hendon</gtr:line2><gtr:line4>London</gtr:line4><gtr:postCode>NW4 4BT</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address></gtr:collaborator></gtr:collaborations><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/3A5E126D-C175-4730-9B7B-E6D8CF447F83"><gtr:id>3A5E126D-C175-4730-9B7B-E6D8CF447F83</gtr:id><gtr:name>University College London</gtr:name><gtr:department>Computer Science</gtr:department><gtr:address><gtr:line1>Gower Street</gtr:line1><gtr:line4>London</gtr:line4><gtr:postCode>WC1E 6BT</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/3A5E126D-C175-4730-9B7B-E6D8CF447F83"><gtr:id>3A5E126D-C175-4730-9B7B-E6D8CF447F83</gtr:id><gtr:name>University College London</gtr:name><gtr:address><gtr:line1>Gower Street</gtr:line1><gtr:line4>London</gtr:line4><gtr:postCode>WC1E 6BT</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/AB979D25-DDBE-4C82-9D51-F38618FE37BD"><gtr:id>AB979D25-DDBE-4C82-9D51-F38618FE37BD</gtr:id><gtr:name>Middlesex University</gtr:name><gtr:address><gtr:line1>The Burroughs</gtr:line1><gtr:line2>Hendon</gtr:line2><gtr:line4>London</gtr:line4><gtr:postCode>NW4 4BT</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>COLLABORATOR</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/343A4263-378A-4C2E-8DE3-01C0A10FB07A"><gtr:id>343A4263-378A-4C2E-8DE3-01C0A10FB07A</gtr:id><gtr:name>Monoidics Ltd</gtr:name><gtr:address><gtr:line1>Unit 121, Rosden House</gtr:line1><gtr:line2>372 Old Street</gtr:line2><gtr:postCode>EC1V 9AU</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/F262B9E0-E9D1-4BFF-B9BF-B4C81D12D8B9"><gtr:id>F262B9E0-E9D1-4BFF-B9BF-B4C81D12D8B9</gtr:id><gtr:name>Microsoft Research Ltd</gtr:name><gtr:address><gtr:line1>21 Station Road</gtr:line1><gtr:postCode>CB1 2FB</gtr:postCode><gtr:region>East of England</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/8D85F118-49C4-4F5A-8A03-0536BC5EB562"><gtr:id>8D85F118-49C4-4F5A-8A03-0536BC5EB562</gtr:id><gtr:firstName>James</gtr:firstName><gtr:surname>Brotherston</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole><gtr:personRole url="http://gtr.ukri.org:80/person/F468A768-9FF8-4154-8064-E584D786FE9D"><gtr:id>F468A768-9FF8-4154-8064-E584D786FE9D</gtr:id><gtr:firstName>Byron</gtr:firstName><gtr:surname>Cook</gtr:surname><gtr:roles><gtr:role><gtr:name>CO_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole><gtr:personRole url="http://gtr.ukri.org:80/person/470AD2C9-B8E5-46D6-B48D-606E8C1F2EE4"><gtr:id>470AD2C9-B8E5-46D6-B48D-606E8C1F2EE4</gtr:id><gtr:firstName>Kyriakos</gtr:firstName><gtr:otherNames>Nikolaos</gtr:otherNames><gtr:surname>Gkorogiannis</gtr:surname><gtr:orcidId>0000-0001-8660-6609</gtr:orcidId><gtr:roles><gtr:role><gtr:name>RESEARCHER_COI</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FK040049%2F1"><gtr:id>9FCD5F24-7D37-459C-92B0-121147E7F4DD</gtr:id><gtr:title>Boosting Automated Verification Using Cyclic Proof</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Research Grant</gtr:grantCategory><gtr:grantReference>EP/K040049/1</gtr:grantReference><gtr:abstractText>Automatic verification tools based on separation logic have recently enabled the verification of code bases that scale into the millions of lines. Such analyses rely on the use of *inductive predicates* to describe data structures held in memory. However, such predicates are currently hard-coded into the analysis, which means that the analysis must fail when encountering an unknown data structure, not described by the hard-coded definitions. This results in reduced program coverage and increased rates of false negatives. Thus, methods for reasoning with *general* inductively defined predicates could greatly enhance the state of the art.

Cyclic proof, in essence, implements reasoning by infinite descent &amp;agrave; la Fermat for general inductive definitions. In contrast to traditional proofs by explicit induction, which force the prover to select the induction schema and hypotheses at the very beginning of a proof, cyclic proof allows these difficult decisions to be *postponed* until exploration of the proof search space makes suitable choices more evident. This makes cyclic proof an attractive method for automatic proof search.

The main contention of this proposal is that cyclic proof techniques can add inductive reasoning capability, for general inductive predicates, to the many components of an interprocedural program analysis (theorem proving, abduction, frame-inference, abstraction) and thus can significantly extend the reach of current verification methods.</gtr:abstractText><gtr:potentialImpactText>Academic beneficiaries of the proposed project are covered in the section above.

The immediate non-academic beneficiaries of this proposal are organisations developing program verification technology based on separation logic and related formalisms. Two such organisations, Microsoft Research Cambridge and Monoidics Inc., are Project Partners on this proposal and have provided letters of support. They will benefit because we hope that the state-of-the-art inductive techniques for solving the individual problems that arise in a interprocedural program analysis based on separation logic - such as entailment, frame inference, and abduction - developed as the core contribution of this project can be integrated into these larger analyses, and used to improve them. Because we intend to reason using general inductive predicates rather than fixed predicates describing data structures as is the case currently, we hope that such integration will improve the coverage and automation of these analyses. Such an improvement would have a real and substantial im-
pact on the boundaries of the state of the art in automatic program verification, and might eventually lead to our techniques being taken up in industrial tools.

In wider society, the use of sophisticated and often buggy software to carry out everyday tasks is increasingly ubiquitous; for example, there are now more than 250,000,000 Android phones in current use. By improving the performance of automatic verification tools that will increasingly be used to verify such software, this project will help to catch memory leaks, null pointer dereferences and other critical bugs, and help to ensure that programs work as intended. Thus, if successful, this proposal could potentially yield a substantial indirect benefit for UK society at large.</gtr:potentialImpactText><gtr:fund><gtr:end>2017-05-10</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2013-11-11</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>550181</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs><gtr:collaborationOutput><gtr:collaboratingOrganisation>Middlesex University</gtr:collaboratingOrganisation><gtr:country>United Kingdom of Great Britain &amp; Northern Ireland (UK)</gtr:country><gtr:description>Nikos</gtr:description><gtr:id>286E7FEA-B68E-4210-B090-5C6DEA1511B8</gtr:id><gtr:impact>CSL-LICS 2014 paper &amp;quot;A Decision Procedure for Satisfiability in Separation Logic with Inductive Predicates&amp;quot;
SAS'14 paper &amp;quot;Cyclic Abduction of Inductively Defined Safety and Termination Preconditions&amp;quot;
Cyclist theorem prover</gtr:impact><gtr:outcomeId>54636fadb7f394.11474330-1</gtr:outcomeId><gtr:partnerContribution>Ongoing academic research collaboration</gtr:partnerContribution><gtr:piContribution>Ongoing academic research collaboration</gtr:piContribution><gtr:sector>Academic/University</gtr:sector><gtr:start>2013-01-01</gtr:start></gtr:collaborationOutput></gtr:collaborationOutputs><gtr:disseminationOutputs/><gtr:exploitationOutputs/><gtr:furtherFundingOutputs><gtr:furtherFundingOutput><gtr:amountPounds>30000</gtr:amountPounds><gtr:country>United States of America</gtr:country><gtr:currCode>USD</gtr:currCode><gtr:currCountryCode>Ecuador</gtr:currCountryCode><gtr:currLang>es_EC</gtr:currLang><gtr:description>Facebook Faculty Grant 2015</gtr:description><gtr:end>2018-09-02</gtr:end><gtr:fundingOrg>Facebook</gtr:fundingOrg><gtr:id>79C99DD4-90D2-429A-87C8-5E1F53BF5351</gtr:id><gtr:outcomeId>56d996b2a53be8.46833694</gtr:outcomeId><gtr:sector>Private</gtr:sector><gtr:start>2015-10-01</gtr:start></gtr:furtherFundingOutput></gtr:furtherFundingOutputs><gtr:impactSummaryOutputs/><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>Separation logic is perhaps one of the greatest success stories in automatic program verification in recent history. Over the last 15 years, it has evolved from a novel way of reasoning about pointers in computer memory to a mainstream technique for scalable verification of software written in languages like C or Java, capable of treating programs of millions of lines of code. It now forms the basis of the INFER verifier now in widespread use at Facebook.

The project aims to extend the reach of separation logic by automating its extension with inductively defined predicates, used to describe data structures in the memory. This had both a theoretical component, aiming to discover what is within reach of automation, and a practical component, aiming to implement our methods in software. In particular, we aim to build upon *cyclic proof* technology developed by the PI and collaborators.

On the theoretical side, we established the decidability (with complexity bounds) of the model checking and satisfiability problems for separation logic with inductive predicates. On the other hand, we showed that many commonly assumed properties of separation logic models are in fact not propositionally axiomatisable, but that they become axiomatisable when one adds a notion of &amp;quot;naming&amp;quot;, as used in hybrid logic.

On the practical side, we provided implementations of the aforementioned decision procedures, and developed our theorem proving Cyclist to extend the reach of what can be verified automatically; in particular, a recent paper at CPP'17 demonstrated the power of our technique and implementation for establishing program termination. Further papers in this area are in development.</gtr:description><gtr:exploitationPathways>Facebook is providing funding to and actively pursuing research collaborations with the PI.

At the same time, the automated verification community, especially the subcommunity working on separation logic, is widely citing, competing with and building upon our research results.</gtr:exploitationPathways><gtr:id>48AA9CB1-8BF7-4F98-83E4-85C0994AC0D8</gtr:id><gtr:outcomeId>56d9999902d9a7.18785680</gtr:outcomeId><gtr:sectors><gtr:sector>Digital/Communication/Information Technologies (including Software)</gtr:sector></gtr:sectors></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs><gtr:softwareAndTechnicalProductOutput><gtr:description>Given an entailment A |= B between two formulas in separation logic with inductive predicates, this tool attempts to disprove the entailment, i.e. to infer the existence of a countermodel.</gtr:description><gtr:id>621B207E-F5F1-4C60-BC6D-A3D64621EB80</gtr:id><gtr:impact>First disprover for separation logic. Opens up potential new applications in speeding up verification and automatic proof search, and in automated theory exploration.</gtr:impact><gtr:outcomeId>56d9984815dec4.09342809</gtr:outcomeId><gtr:title>SL disprover</gtr:title><gtr:type>Software</gtr:type><gtr:url>https://github.com/ngorogiannis/cyclist</gtr:url><gtr:yearFirstProvided>2014</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput><gtr:softwareAndTechnicalProductOutput><gtr:description>Compares the heap memory of a running program against an assertion written in separation logic with general inductive definitions.</gtr:description><gtr:id>D859F7AC-62C3-42DC-B41E-A8EAC92DABE6</gtr:id><gtr:impact>First model checker of its kind, with potential applications to verification and software testing.</gtr:impact><gtr:outcomeId>56d997c7de6473.68413755</gtr:outcomeId><gtr:title>SL model checker</gtr:title><gtr:type>Software</gtr:type><gtr:url>https://github.com/ngorogiannis/cyclist</gtr:url><gtr:yearFirstProvided>2015</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput><gtr:softwareAndTechnicalProductOutput><gtr:description>Updated the Cyclist theorem prover with substantial new techniques and features, as described in related publications.</gtr:description><gtr:id>544154AF-7329-4675-85DD-E3366B6B7C7B</gtr:id><gtr:impact>Cyclist was entered into and performed well in the new SL-COMP competition for separation logic theorem provers.</gtr:impact><gtr:outcomeId>54636c7594a882.09653790</gtr:outcomeId><gtr:title>Cyclist 2014</gtr:title><gtr:type>Software</gtr:type><gtr:url>https://github.com/ngorogiannis/cyclist</gtr:url><gtr:yearFirstProvided>2014</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput></gtr:softwareAndTechnicalProductOutputs><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>3860FA12-981F-4756-9148-5F67CA8A56C3</gtr:id><gtr:title>Model checking for symbolic-heap separation logic with inductive predicates</gtr:title><gtr:parentPublicationTitle>ACM SIGPLAN Notices</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/4318012ae61b9d7d7927edb1df295cbe"><gtr:id>4318012ae61b9d7d7927edb1df295cbe</gtr:id><gtr:otherNames>Brotherston J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2016-01-01</gtr:date><gtr:outcomeId>56d9958a2c4aa2.99963997</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/K040049/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>