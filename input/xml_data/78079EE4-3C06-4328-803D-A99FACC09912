<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations/><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/C6D0044A-2CD2-4167-B90B-922AF53E361F"><gtr:id>C6D0044A-2CD2-4167-B90B-922AF53E361F</gtr:id><gtr:name>University of Kent</gtr:name><gtr:department>Sch of Computing</gtr:department><gtr:address><gtr:line1>The Registry</gtr:line1><gtr:line4>Canterbury</gtr:line4><gtr:line5>Kent</gtr:line5><gtr:postCode>CT2 7NZ</gtr:postCode><gtr:region>South East</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/C6D0044A-2CD2-4167-B90B-922AF53E361F"><gtr:id>C6D0044A-2CD2-4167-B90B-922AF53E361F</gtr:id><gtr:name>University of Kent</gtr:name><gtr:address><gtr:line1>The Registry</gtr:line1><gtr:line4>Canterbury</gtr:line4><gtr:line5>Kent</gtr:line5><gtr:postCode>CT2 7NZ</gtr:postCode><gtr:region>South East</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/A396E5E2-28A5-4F3F-B2DA-2EC081A6D4EC"><gtr:id>A396E5E2-28A5-4F3F-B2DA-2EC081A6D4EC</gtr:id><gtr:firstName>Richard</gtr:firstName><gtr:otherNames>Elliott</gtr:otherNames><gtr:surname>Jones</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FF06523X%2F1"><gtr:id>78079EE4-3C06-4328-803D-A99FACC09912</gtr:id><gtr:title>Visiting researcher: Dr Tony Hosking</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Research Grant</gtr:grantCategory><gtr:grantReference>EP/F06523X/1</gtr:grantReference><gtr:abstractText>The growing use of object-oriented languages like Java and C# in substantial applications of commercial import has made automatic dynamic memory management, or 'garbage collection' (GC), more important economically than ever before. GC allows programs to recycle unused memory automatically, without error-prone programmer intervention. Significant research challenges remain in this area as new software developments push state-of-the-art collectors to their limits in terms of scalability and responsiveness. Meanwhile, commodity multi-threaded, multi-core, and multi-processor hardware make scalability and responsiveness even more critical, as applications look to exploit increasingly available thread-level parallelism.Desktop platforms and applications make different demands on garbage collection than server class applications, so further research is needed to reconcile existing concurrent collector techniques to these demands. Moreover, new approaches to concurrency control based on non-blocking synchronization, and transactional memory (TM) hardware, are enabling finer-grained synchronization of GC activities along with improved locality for shared state. In particular, concurrent collectors have until recently focused on non-moving collection techniques that avoid relocating live objects, so as to minimize the need for synchronization between the collector and mutators. Unfortunately, non-moving collectors are unable to compact the heap to avoid fragmentation and increase heap utilization. It is this problem that will be addressed by this work, reconciling compaction with concurrency.This project brings together Jones (University of Kent) and Hosking (Purdue University), two internationally leading researchers in the field of memory management. Dr Hosking has a unique combination of expertise in GC, transactional memory, concurrency, and mutator-collector synchronization. He is PI or co-PI on grants, supported by IBM, Sun Microsystems, Microsoft, Intel, and the USA's National Science Foundation, totalling several million dollars cumulatively, including the successful DaCapo project, www.dacapo-group.org, rated as the best GC research group in the USA, if not the world by the NSF. This work will build on his expertise and that of his UK-based colleagues both to understand better how to construct concurrent collectors for multi-core platforms and to disseminate widely this expertise and experience.We plan to improve understanding of concurrent garbage collection for multi-core platforms by (a) developing a uniform platform for comparing different concurrent GC approaches on multi-core platforms; (b) adding transactional memory mechanisms and support; and (c) exploiting TM mechanisms in support of concurrent garbage collection and heap compaction. As well as dissemination through the usual vehicles of journals and conferences, we shall also contribute the software developed back to the open source Jikes RVM project so that they are freely available.In addition, we shall take advantage of Dr Hosking's visit to disseminate his expertise in transactional memory to UK researchers through a seminar series at the University of Kent, open to all, and short visits to other institutions. We plan to make these seminars available to all through multimedia recordings available from the University of Kent web site.Finally, we shall write a new book on advanced GC. Jones's 1996 book has long remained the definitive book on the subject, but there have been many developments over the last eleven years. We anticipate that the new book will be an essential resource for researchers, developers and students. Concurrent GC will be a particular focus of the book.</gtr:abstractText><gtr:fund><gtr:end>2008-10-31</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2008-05-01</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>26455</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs/><gtr:disseminationOutputs/><gtr:exploitationOutputs/><gtr:furtherFundingOutputs/><gtr:impactSummaryOutputs/><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>The outcomes of this project were (1) a paper, (2) a book and (3) preparatory work for a successful grant application.



Concurrent and incremental collectors require barriers to ensure correct synchronisation between mutator and collector. The overheads imposed by particular barriers on particular systems have been widely studied, but until now, the consequences for locality of different barrier choices has not been studied, despite its increasing importance for emerging architectures. Although we confirm that deletion barriers generate more work for a concurrent GC than insertion barriers, surprisingly we find that deletion barriers may lead to better cache performance than has hitherto been expected.



Our new Garbage Collection Handbook was published in 2012.</gtr:description><gtr:exploitationPathways>Jones's previous Garbage Collection book sits on the bookshelf of almost every industrial developer building programming language virtual machines; it has received nearly 1200 citations. The new book addresses new challenges to garbage collection made by recent advances in hardware and software. We expect the new book to be equally influential.</gtr:exploitationPathways><gtr:id>792E84A4-33E7-4900-B52A-67340E4C109A</gtr:id><gtr:outcomeId>r-3909473776.733012777747356</gtr:outcomeId><gtr:sectors><gtr:sector>Digital/Communication/Information Technologies (including Software)</gtr:sector></gtr:sectors></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs/><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>439FDD55-6ED8-4231-8573-7E45B635D230</gtr:id><gtr:title>The Garbage Collection Handbook: The Art of Automatic Memory Management</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/62a16dcc2bce09ce7324789c72a6c53b"><gtr:id>62a16dcc2bce09ce7324789c72a6c53b</gtr:id><gtr:otherNames>Jones, Richard; Hosking, Antony; Moss, Eliot</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2011-01-01</gtr:date><gtr:isbn>978-1-4200-8279-1</gtr:isbn><gtr:outcomeId>i_64241767333c060306</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/F06523X/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>