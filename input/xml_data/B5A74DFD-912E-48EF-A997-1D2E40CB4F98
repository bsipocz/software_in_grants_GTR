<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations/><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/5E2B04DD-4A03-45ED-9892-61C5CCB8AC68"><gtr:id>5E2B04DD-4A03-45ED-9892-61C5CCB8AC68</gtr:id><gtr:name>Newcastle University</gtr:name><gtr:department>Sch of Computer Science</gtr:department><gtr:address><gtr:line1>1 Park Terrace</gtr:line1><gtr:line4>Newcastle Upon Tyne</gtr:line4><gtr:line5>Tyne and Wear</gtr:line5><gtr:postCode>NE1 7RU</gtr:postCode><gtr:region>North East</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/5E2B04DD-4A03-45ED-9892-61C5CCB8AC68"><gtr:id>5E2B04DD-4A03-45ED-9892-61C5CCB8AC68</gtr:id><gtr:name>Newcastle University</gtr:name><gtr:address><gtr:line1>1 Park Terrace</gtr:line1><gtr:line4>Newcastle Upon Tyne</gtr:line4><gtr:line5>Tyne and Wear</gtr:line5><gtr:postCode>NE1 7RU</gtr:postCode><gtr:region>North East</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/55C84B64-A50E-40E3-8E91-7A1D3C009FCF"><gtr:id>55C84B64-A50E-40E3-8E91-7A1D3C009FCF</gtr:id><gtr:firstName>Leo</gtr:firstName><gtr:surname>Freitas</gtr:surname><gtr:roles><gtr:role><gtr:name>RESEARCHER</gtr:name></gtr:role></gtr:roles></gtr:personRole><gtr:personRole url="http://gtr.ukri.org:80/person/44A6C7FC-21C0-409C-80E6-057B949DD2D9"><gtr:id>44A6C7FC-21C0-409C-80E6-057B949DD2D9</gtr:id><gtr:firstName>Cliff</gtr:firstName><gtr:otherNames>Bryn</gtr:otherNames><gtr:surname>Jones</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FK011707%2F1"><gtr:id>B5A74DFD-912E-48EF-A997-1D2E40CB4F98</gtr:id><gtr:title>Taming Concurrency</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Research Grant</gtr:grantCategory><gtr:grantReference>EP/K011707/1</gtr:grantReference><gtr:abstractText>Computer programs are notoriously difficult to perfect (everyone has experienced some form of inconvenience from &amp;quot;bugs&amp;quot;) and even if this situation is beginning to come under control, it is at enormous cost. One reason for the high development cost of software is that errors made early in the design of a system can lay undetected until that system is tested - or even worse, used by customers. Correcting errors at such late stages is extremely expensive because so much work has to be repeated. So-called &amp;quot;formal methods&amp;quot; were first deployed on safety-critical software but are becoming more and more cost-effective because their use throughout design can drastically reduce the &amp;quot;scrap and rework&amp;quot; that comes from late detection of design mistakes. Formal methods make this possible because they use formal notations for specifying what should be built and thus offer a notion of correctness for each design step. Verifying design decisions becomes a proof process that can be helped by appropriate theorem proving software. Unfortunately, just as real progress is being made (both with general engineering practices and with the application of formal methods), separate commercial developments are increasing the challenges enormously. The general direction of new difficulties is &amp;quot;concurrency&amp;quot;. Programs that are concurrent have to run in contexts which interfere with their progress. Concurrency can come from a desire for better performance, from use of embedded programs in conjunction with physical devices such as cars and planes, or from the use of the latest hardware designs that are built from many processors. Traditional engineering approaches, and even many modern automatic tools for detecting errors in software, are not going to suffice for the world of massive concurrency because the number of execution paths is astronomically large when processes can interfere with each other. Fortunately, there is research (in which UK researchers are at the forefront) for reasoning both about where interference is absent and/or constrained. These research avenues, however, need to be brought together and tool support must be implemented before they are usable by engineers. These are the expected outputs of &amp;quot;Taming Concurrency&amp;quot;.</gtr:abstractText><gtr:potentialImpactText>There will be immediate research benefits from the proposed research; future benefits to those who develop programs in industry or institutions; and long term benefits to all users of computers. These are considered and justified in turn.

Success in this research would bring together several strands of thought on the most appropriate ways to develop concurrent programs. This is a field where UK researchers are already at the forefront of research but the synergy that would result from a unification of rely/guarantee thinking with separation logic could be another major advance on which we could all build. The same payoff would result from a link between atomicity refinement and linearisability methods. Furthermore, although a top-down approach is to be used as an initial guide, the concepts should also provide useful targets for bottom-up methods and tool support.

More tractable methods for developing complex concurrent programs will have a strong impact on the work of development programmers who are already struggling with concurrency and are bound to have to tackle this difficult area ever more often (at least) because of the move to massively parallel (many-core) hardware. The methods developed in this project will be made easier to adopt in industry by the development of tool support within a work package of the project.

Once the new methods are more widely used, the quality of concurrent software will be higher (i.e. less bugs). Furthermore, performance of future systems will be made better because of the ability of program designers to tackle the design of concurrent systems with greater confidence. This will be beneficial to all users of computers.</gtr:potentialImpactText><gtr:fund><gtr:end>2017-09-30</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2013-04-01</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>643518</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs/><gtr:disseminationOutputs/><gtr:exploitationOutputs/><gtr:furtherFundingOutputs/><gtr:impactSummaryOutputs/><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>See new publications particularly the joint paper with Hayes on &amp;quot;possible Values&amp;quot;.

We are about to submit a further (conference) paper of Expressivity and Compositionality.

=========
We are now well into &amp;quot;Taming Concurrency&amp;quot; (see first year comments below).
1) a paper (Jones/Yatapanage 2015) has been published on the link twixt Separation Logic and Rely/Guarantee thinking.
2) Together with Colleagues from Queensland University, we are working on a more algebraic presentation of Rely/Guarantee reasoning. 
3) A new &amp;quot;possible values&amp;quot; notation has been formalised (see Jones/Hayes 2016)
4) The Technical Report (1425) is being mechanised in Isabelle
5) Dr Hongjin Liang from Suzhou University spent two months working with us - I hope to build on this to have a bridge with Prof Xinyu Feng's group there
6) Prof Ian Hayes (Queensland) spent a 6 month sabbatical with us

===========
The initial phase of this on-going project has already exposed a new way of looking at the key issue of separation in the design of concurrent programs.

Furthermore, existing research of documenting and reasoning about another crucial issue -interference- has been completely recast in a new more algebraic frame.</gtr:description><gtr:exploitationPathways>We have good contacts in industry and are presenting at venues where the results will be appreciated.
In particular the FM conferences are well attended by a mix from industry and academia.</gtr:exploitationPathways><gtr:id>D3E73867-0E8F-40AF-A30A-C9A65918D583</gtr:id><gtr:outcomeId>544fd5352ffbb9.36571068</gtr:outcomeId><gtr:sectors><gtr:sector>Aerospace, Defence and Marine,Digital/Communication/Information Technologies (including Software),Security and Diplomacy,Transport</gtr:sector></gtr:sectors><gtr:url>http://www.ncl.ac.uk/computing/research/project/4519</gtr:url></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs><gtr:researchMaterialOutput><gtr:description>@article{Concurrent_Ref_Alg-AFP,
 Abstract = {
 The concurrent refinement algebra developed here is designed to provide
 a foundation for rely/guarantee reasoning about concurrent programs.
 The algebra builds on a complete lattice of commands by providing
 sequential composition, parallel composition and a novel weak conjunction operator.
 The weak conjunction operator coincides with the lattice supremum
 providing its arguments are non-aborting, but aborts if either of its arguments do.
 Weak conjunction provides an abstract version of a guarantee condition as a guarantee process.
 We distinguish between models that distribute sequential composition
 over non-deterministic choice from the left (referred to as being conjunctive
 in the refinement calculus literature) and those that don't.
 Least and greatest fixed points of monotone functions are provided to
 allow recursion and iteration operators to be added to the language.
 Additional iteration laws are available for conjunctive models.
 The rely quotient of processes c and i is the process that,
 if executed in parallel with i implements c.
 It represents an abstract version of a rely condition generalised to a process.
 },
 Author = {Julian Fell and Ian J. Hayes and Andrius Velykis},
 For = {080309 (Software Engineering)},
 Issn = {2150-914x},
 Journal = {Archive of Formal Proofs},
 Month = dec,
 Note = {\url{http://isa-afp.org/entries/Concurrent_Ref_Alg.shtml}, Formal proof development},
 Project = {RGT},
 Seo = {890299 (Computer Software and Services not elsewhere classified)},
 Title = {Concurrent Refinement Algebra and Rely Quotients},
 Year = 2016}</gtr:description><gtr:id>D7E0AFA2-C520-4386-8D24-A14B3114AEF5</gtr:id><gtr:impact>AFP is widely accessed - but not tracked</gtr:impact><gtr:outcomeId>58b2bf65ab29f8.54493629</gtr:outcomeId><gtr:providedToOthers>true</gtr:providedToOthers><gtr:title>Archive of Formal Proofs</gtr:title><gtr:type>Improvements to research infrastructure</gtr:type><gtr:url>http://isa-afp.org/entries/Concurrent_Ref_Alg.shtml</gtr:url><gtr:yearFirstProvided>2016</gtr:yearFirstProvided></gtr:researchMaterialOutput></gtr:researchMaterialOutputs><gtr:softwareAndTechnicalProductOutputs/><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>72F2AF1A-58F3-40B4-BFC3-8024C8680195</gtr:id><gtr:title>Balancing expressiveness in formal approaches to concurrency</gtr:title><gtr:parentPublicationTitle>Formal Aspects of Computing</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/eb717bce2e3d9f5f8e2e0fd9de5431d0"><gtr:id>eb717bce2e3d9f5f8e2e0fd9de5431d0</gtr:id><gtr:otherNames>Jones C</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2014-01-01</gtr:date><gtr:outcomeId>5433c2bacb42a7.05839293</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>B20A97A0-044A-4DDF-BF94-1093C50C568D</gtr:id><gtr:title>Elucidating concurrent algorithms via layers of abstraction and reification</gtr:title><gtr:parentPublicationTitle>Formal Aspects of Computing</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/eb717bce2e3d9f5f8e2e0fd9de5431d0"><gtr:id>eb717bce2e3d9f5f8e2e0fd9de5431d0</gtr:id><gtr:otherNames>Jones C</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2010-01-01</gtr:date><gtr:outcomeId>544a095e471296.97612151</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>8DF785F8-AE7C-449C-9CDA-85D02D3FE699</gtr:id><gtr:title>Possible values: Exploring a concept for concurrency</gtr:title><gtr:parentPublicationTitle>Journal of Logical and Algebraic Methods in Programming</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/eb717bce2e3d9f5f8e2e0fd9de5431d0"><gtr:id>eb717bce2e3d9f5f8e2e0fd9de5431d0</gtr:id><gtr:otherNames>Jones C</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2016-01-01</gtr:date><gtr:outcomeId>56afbb289c17f0.15455617</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>7F0B478B-BFF8-4A5E-9B4B-E731AB0270BB</gtr:id><gtr:title>Comparing Degrees of Non-Determinism in Expression Evaluation</gtr:title><gtr:parentPublicationTitle>The Computer Journal</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/379efbdc3bfe6c245b5a55af2f9389d1"><gtr:id>379efbdc3bfe6c245b5a55af2f9389d1</gtr:id><gtr:otherNames>Hayes I</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2013-01-01</gtr:date><gtr:outcomeId>544a095e78f173.44564644</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>7AACC479-DB77-4D37-9F9E-822383892515</gtr:id><gtr:title>Laws and semantics for rely-guarantee refinement</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/00cc672944433afca82e91e155734da0"><gtr:id>00cc672944433afca82e91e155734da0</gtr:id><gtr:otherNames>Hayes, I J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2014-01-01</gtr:date><gtr:outcomeId>56afbd1e8c9be3.47850596</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>E3336562-E3C1-48E4-9476-72B89864C210</gtr:id><gtr:title>Industrial Deployment of System Engineering Methods</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/98717e4cf90b25d52763956d3e4c9028"><gtr:id>98717e4cf90b25d52763956d3e4c9028</gtr:id><gtr:otherNames>Gmehlich R</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2013-01-01</gtr:date><gtr:outcomeId>5450fadae49408.83884277</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>BE9CE41A-879A-41BE-9163-658C0F45CC73</gtr:id><gtr:title>Expressiveness of Notations for Reasoning about Concurrency</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/eb717bce2e3d9f5f8e2e0fd9de5431d0"><gtr:id>eb717bce2e3d9f5f8e2e0fd9de5431d0</gtr:id><gtr:otherNames>Jones C</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2013-01-01</gtr:date><gtr:outcomeId>544a095f24e692.67619610</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/K011707/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>30</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic><gtr:researchTopic><gtr:id>E05CFE0B-163D-412D-A3C2-28E89B2CA336</gtr:id><gtr:percentage>70</gtr:percentage><gtr:text>Software Engineering</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>