<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations><gtr:collaborator url="http://gtr.ukri.org:80/organisation/AFE5C6FD-3500-44F6-B100-184B5F2FD0D7"><gtr:id>AFE5C6FD-3500-44F6-B100-184B5F2FD0D7</gtr:id><gtr:name>Microsoft Research</gtr:name><gtr:address><gtr:line1>One Microsoft Way</gtr:line1><gtr:line4>Redmond</gtr:line4><gtr:line5>Washington 98052</gtr:line5><gtr:region>Outside UK</gtr:region><gtr:country>United States</gtr:country></gtr:address></gtr:collaborator></gtr:collaborations><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/5BB4F8BF-B4E0-4EAF-9AF5-885E19D64850"><gtr:id>5BB4F8BF-B4E0-4EAF-9AF5-885E19D64850</gtr:id><gtr:name>University of Strathclyde</gtr:name><gtr:department>Computer and Information Sciences</gtr:department><gtr:address><gtr:line1>16 Richmond Street</gtr:line1><gtr:line4>Glasgow</gtr:line4><gtr:postCode>G1 1XQ</gtr:postCode><gtr:region>Scotland</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/5BB4F8BF-B4E0-4EAF-9AF5-885E19D64850"><gtr:id>5BB4F8BF-B4E0-4EAF-9AF5-885E19D64850</gtr:id><gtr:name>University of Strathclyde</gtr:name><gtr:address><gtr:line1>16 Richmond Street</gtr:line1><gtr:line4>Glasgow</gtr:line4><gtr:postCode>G1 1XQ</gtr:postCode><gtr:region>Scotland</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/AFE5C6FD-3500-44F6-B100-184B5F2FD0D7"><gtr:id>AFE5C6FD-3500-44F6-B100-184B5F2FD0D7</gtr:id><gtr:name>Microsoft Research</gtr:name><gtr:address><gtr:line1>One Microsoft Way</gtr:line1><gtr:line4>Redmond</gtr:line4><gtr:line5>Washington 98052</gtr:line5><gtr:region>Outside UK</gtr:region><gtr:country>United States</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>COLLABORATOR</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/0BD0B05E-91E9-461A-B3D1-036884523A3A"><gtr:id>0BD0B05E-91E9-461A-B3D1-036884523A3A</gtr:id><gtr:firstName>C</gtr:firstName><gtr:otherNames>T</gtr:otherNames><gtr:surname>McBride</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FJ014591%2F1"><gtr:id>E1A64EB9-EE14-4B33-BE92-3B71930991D4</gtr:id><gtr:title>Haskell Types with Added Value</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Research Grant</gtr:grantCategory><gtr:grantReference>EP/J014591/1</gtr:grantReference><gtr:abstractText>Good ideas, like lightning, take the most conductive path to earth. This one-year project takes advantage of fresh technological insights to narrow the spark-gap from theoretical research to the programming mainstream. In the last decade, dependent types --- capturing relative notions of data validity --- have jumped from logics and proof systems to programming. Prototype languages such as Cayenne, ATS, Agda and our own Epigram teach us how to characterize data precisely, but none has a coherent treatment of interaction in applications. This project will bring the basics of dependent types to application development now, not via a prototype, but with Haskell, a mature functional programming language with growing traction, thanks to the Glasgow Haskell Compiler (GHC), now developed under the Microsoft aegis. To make this jump, we must give practical answers to theoretical questions about the mathematical structures which underpin interactive and distributed systems. We must take the blackboard to the motherboard.

The tool which enables this project is our GHC preprocessor, the Strathclyde Haskell Enhancement (SHE), which mechanizes a partial translation from 'dependently typed Haskell' to Haskell as it stands. Up and running, SHE has already delivered the basics of our approach, leading to an article accepted in 2011 by the Journal of Functional Programming, and spurring deeper investigation of both the mathematics of dependently typed interaction and the engineering challenge of scaling up. Through theoretical research, library design and case study, we shall deliver progress across this spectrum through papers and open source software. GHC is adopting our functionality, but we do not need to wait. SHE can sustain low-cost exploration, putting an effective toolkit in users' hands now, as well as informing the future prospectuses both for dependent types in Haskell and for programming interaction in the next generation of functional languages. Haskellers recognize the need: Microsoft currently funds a PhD at Strathclyde on numerical dependency in Haskell types.

This project is, then, a double fix: it imports dependent types from tomorrow's languages to today's, and it allows us to guide tomorrow's dependently typed languages towards principled approaches to production software. We have proven track records in theoretical research and professional software development, key ideas to change programming for the better, and the skills to deliver world-leading research.</gtr:abstractText><gtr:potentialImpactText>This project seeks to deliver useful and usable programming technology based on novel techniques and original theoretical research, via the SHE preprocessor for the functional programming language Haskell. SHE will achieve impact outside academia by putting tools for productivity with precision in the hands of programmers: SHE already has this impact on our own software projects, here at Strathclyde, notably the implementation of Epigram. The project is focused on library design, packaging the key abstractions for systematic deployment. Our case studies will show the new technology in effective action and provide examples that other programmers can readily adapt.

Our primary impact is a contribution to the knowledge base, with scientific advances and new software techniques made available and ready to use for a significant and growing community of software professionals. We shall remain active in promoting uptake: new knowledge for the field will become new skills for people, as we equip them to face complex issues in modern applications development with precise and modular technology. Our longer term agenda impacts on society and the economy by making it increasingly feasible, on a technical level, to insist on higher standards of acceptable software behaviour, stronger security policies, clearer articulation of component capabilities, and more precise compliance with agreed protocols. By expressing more of `the rules of the game' in types, we shift more quality assurance responsibility into the basic discipline enforced by the compiler. Our libraries and case studies will show that it is feasible to work effectively to that high level of assurance, and thus reasonable to demand it!

Our work will reach Haskell programmers directly, as our preprocessor is already available and the libraries we develop in this project will be distributed with a suitable open source licence. We have a track record in attracting programmers to fresh ideas. We pursue uptake by participating in the online community and engaging with practitioners and their real world problems at first hand. It is not enough to write academic papers!

Moreover, we shall continue to work with the designers of the Glasgow Haskell Compiler to standardise our technology and techniques in the standard Haskell language and libraries, thus delivering the standard of support needed for industrial-strength deployment. The work to make GHC absorb SHE has already started!

This project addresses a real software problem: in our world of multiple communicating devices, we need reliable ways to express interfaces for meaningful communication and enforce that components respect those interfaces. We seek new programming language technology to cope with the increasing complexity of our computing environments. If we can bring about a step-change in what can feasibly be achieved with Haskell, we shall raise the quality assurance bar for everyone, and other more mainstream programming languages will surely step up too.</gtr:potentialImpactText><gtr:fund><gtr:end>2013-06-30</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2012-07-01</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>96582</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs><gtr:collaborationOutput><gtr:collaboratingOrganisation>Microsoft Research</gtr:collaboratingOrganisation><gtr:country>Global</gtr:country><gtr:description>Visiting Researcher position at Microsoft Research Cambridge</gtr:description><gtr:id>D898A03C-9C28-49A0-98B5-1A40F899BF25</gtr:id><gtr:impact>This collaboration has resulted in ongoing change to the design of Haskell's type system, as documented in the Glasgow Haskell Compiler wiki, notably here: https://ghc.haskell.org/trac/ghc/wiki/DependentHaskell. My work on linear dependent type theory is about to be published in a volume of papers dedicated to Prof Philip Wadler. My work on modelling data is listed here http://research.microsoft.com/en-US/collaboration/global/phd_projects2015.aspx has a PhD project funded by MSR.</gtr:impact><gtr:outcomeId>56deb1ac39eec1.73593427-1</gtr:outcomeId><gtr:partnerContribution>Microsoft's Programming Principles and Tools group have many interesting people to work with and manage useful paths-to-market for my research. Simon Peyton Jones and the Haskell type system design team bring my work to real programmers. Discussions with Nick Benton helped crystallize my novel treatment of linear dependent types. Andy Gordon, Don Syme and Sir Tony Hoare were of great help in developing the data-modelling project to viability.</gtr:partnerContribution><gtr:piContribution>Arising primarily from my interaction with Simon Peyton Jones concerning the evolution of the Haskell type system and my interaction with Nick Benton on type systems in general, I was invited to spend the summer of 2014 as a Visiting Researcher in the Programming Principles and Tools group of Microsoft Research, Cambridge. There, I worked with Simon on aspects of the Haskell type system and with Nick on combining linear and dependent type systems. I also began a new line of research in collaboration with Don Syme and Andy Gordon, using dependent types to model the content of real world data. The latter has led to the award of an MSR PhD scholarship to be supervised by me at Strathclyde.</gtr:piContribution><gtr:sector>Private</gtr:sector><gtr:start>2014-01-01</gtr:start></gtr:collaborationOutput></gtr:collaborationOutputs><gtr:disseminationOutputs><gtr:disseminationOutput><gtr:description>Keynote &quot;SpaceMonads&quot; at CodeMesh 2016, London, 3 November 2016</gtr:description><gtr:form>A talk or presentation</gtr:form><gtr:geographicReach>International</gtr:geographicReach><gtr:id>77EE2DA8-75C6-4752-8D2A-B1FB0F630197</gtr:id><gtr:impact>One of the organisers of this meeting asked me on twitter if I could make it and I said yes. The talk involves live-coding in Agda, working with data structures which precisely tile within a given perimeter. It was news that this problem makes use of the kind of monadic programming familiar to Haskell programmers, and in particular, the monads on indexed types with which we did so much work in &amp;quot;Haskell Types with Added Value&amp;quot;. Indeed, this talk is a small generalisation of the work on rectangular tilings which was a key example in the &amp;quot;Hasochism&amp;quot; paper arising from the project.</gtr:impact><gtr:outcomeId>58c7ff1acf2411.82086686</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Professional Practitioners</gtr:primaryAudience><gtr:url>http://www.codemesh.io/codemesh/conor-mcbride</gtr:url><gtr:year>2016</gtr:year></gtr:disseminationOutput><gtr:disseminationOutput><gtr:description>Keynote &quot;Is a type a lifebuoy or a lamp?&quot; at Haskell Exchange 2016 Skills Matter event, 6 October 2016</gtr:description><gtr:form>A talk or presentation</gtr:form><gtr:geographicReach>National</gtr:geographicReach><gtr:id>592EC080-1E5C-4F84-A18D-A6D9797AA712</gtr:id><gtr:impact>Skills Matter Haskell Exchange is a two day event for professional Haskell programmers, exchanging the latest advances and techniques. Not only was my keynote directly the outcome of research on the Haskell Types with Added Value project: several other speakers gave talks based on techniques and technologies arising in part from that work. The advanced typed programming reported in the &amp;quot;Hasochism&amp;quot; paper is very much catching on in this community of practice. Two further conference organisers expressed an intention to invite me. The talk was recorded and is available as a Skills Matter &amp;quot;skillscast&amp;quot;: the number of hits is not reported.</gtr:impact><gtr:outcomeId>58c7fce1a8f2b2.86420085</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Professional Practitioners</gtr:primaryAudience><gtr:url>https://skillsmatter.com/skillscasts/8893-is-a-type-a-lifebuoy-or-a-lamp</gtr:url><gtr:year>2016</gtr:year></gtr:disseminationOutput><gtr:disseminationOutput><gtr:description>Talks to sixth formers &quot;Functional Programming (and maybe one or two other things)&quot; at events organised by The Training Partnership (London, 24 November 2016; Warwick, 7 December 2016)</gtr:description><gtr:form>A talk or presentation</gtr:form><gtr:geographicReach>Regional</gtr:geographicReach><gtr:id>E0DD26E8-DF6A-4059-9D07-B8F9A3775058</gtr:id><gtr:impact>I gave the same talk at two events. It was an talk introducing concepts in functional programming, illusrtated by live coding in Haskell. The initial contact came from awareness of my &amp;quot;How to Keep Your Neighbours in Order&amp;quot; talk (arising from work on &amp;quot;Haskell Types with Added Value&amp;quot;), and indeed the content of the talk was informed by those ideas. I think at least some of the sixth formers present were interested in investigating further this mode of programming which is outside the norm for computing at schools.</gtr:impact><gtr:outcomeId>58c8011fe4cb28.78897696</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Schools</gtr:primaryAudience><gtr:url>http://www.thetrainingpartnership.org.uk/study-day/computer-science-in-action/</gtr:url><gtr:year>2016</gtr:year></gtr:disseminationOutput><gtr:disseminationOutput><gtr:description>Keynote &quot;What are Types for, or are they only Against?&quot; at Yow LambdaJam, Brisbane, 8 May 2016</gtr:description><gtr:form>A talk or presentation</gtr:form><gtr:geographicReach>International</gtr:geographicReach><gtr:id>945CF826-7E9C-4DAC-8E95-78D47D5CE71A</gtr:id><gtr:impact>After a couple of invitations to speak at Yow! meetings in Australia which I was unable to accept for timing reasons, in 2016, I was able to keynote at Yow! LambdaJam in Brisbane. My talk, &amp;quot;What areTypes for, or are they only Against?&amp;quot; was primarily concerned with communicating the approach and technology of Haskell programming which came about in no small part due to the &amp;quot;Haskell Types with Added Value&amp;quot; project. The audience in the room was around 100 in number, but the talk was recorded and the YouTube video, linked below, has over 3800 views. Yow! LambdaJam is attended mostly by professional functional programmers working in industry, but there is some academic presence: most participants come from Australia, but a handful from further afield. This visit also made possible a two week visit to the University of New South Wales in Sydney, where I gave two talks had some very useful interactions with functional programming researchers working in advanced type systems. although less tightly related to this project. The key impact of the talk was to persuade at least some listeners to think of types for programs, given in advance (not inferred), as a means to drive program generation (not just program criticism).</gtr:impact><gtr:outcomeId>58c7fa847b3478.42762605</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Professional Practitioners</gtr:primaryAudience><gtr:url>https://www.youtube.com/watch?v=3U3lV5VPmOU&amp;list=PLIpl4GKFQR6dFB0W9IzF_gcIt1VMRnuco&amp;index=1</gtr:url><gtr:year>2016</gtr:year></gtr:disseminationOutput></gtr:disseminationOutputs><gtr:exploitationOutputs/><gtr:furtherFundingOutputs/><gtr:impactSummaryOutputs><gtr:impactSummaryOutput><gtr:description>The research outcomes from this project have helped to direct the continuing evolution of the programming language Haskell, which is developed and widely used outside the academic sector. Working with Simon Peyton Jones (Microsoft Research) and Stephanie Weirich (University of Pennsylvania), we have helped Haskell absorb features from the research languages a generation ahead of it, facilitating the adoption of new techniques whilst retaining the existing broad developer base.</gtr:description><gtr:firstYearOfImpact>2013</gtr:firstYearOfImpact><gtr:id>135B50AA-C530-4107-A019-C58BAA56A874</gtr:id><gtr:impactTypes/><gtr:outcomeId>5464828c8ddd33.46447482</gtr:outcomeId><gtr:sector>Digital/Communication/Information Technologies (including Software)</gtr:sector></gtr:impactSummaryOutput></gtr:impactSummaryOutputs><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>The functional programming language Haskell has an advanced type system, the design of which we have strongly influenced. As a result, it has become possible to capture strong safety and correctness properties in the type system of an industrial strength programming language. In particular, we demonstrated that it is possible to model aspects a program's awareness of the state of the environment it runs in, ensuring that the information it requests is adequate to justify the actions it performs.</gtr:description><gtr:exploitationPathways>The main designers of Haskell are already implementing the technology we mapped out in this project.</gtr:exploitationPathways><gtr:id>1648E033-91FB-4CC1-AAB9-BF90779FDB6F</gtr:id><gtr:outcomeId>56deacbd4161f1.29814046</gtr:outcomeId><gtr:sectors><gtr:sector>Digital/Communication/Information Technologies (including Software)</gtr:sector></gtr:sectors></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs/><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>777563D6-CFA9-46C2-8B6C-7C796FC2BCF1</gtr:id><gtr:title>Productive coprogramming with guarded recursion</gtr:title><gtr:parentPublicationTitle>ACM SIGPLAN Notices</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/00afca2fb8d0062888491afbeca118fc"><gtr:id>00afca2fb8d0062888491afbeca118fc</gtr:id><gtr:otherNames>Atkey R</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2013-01-01</gtr:date><gtr:outcomeId>56deaaaedf0010.19363042</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>4BE6401A-A85B-46E1-ABC7-A97E7F571417</gtr:id><gtr:title>How to keep your neighbours in order</gtr:title><gtr:parentPublicationTitle>ACM SIGPLAN Notices</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/e1371ecbc48199e2e42316c5abb52e8e"><gtr:id>e1371ecbc48199e2e42316c5abb52e8e</gtr:id><gtr:otherNames>McBride C</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2014-01-01</gtr:date><gtr:outcomeId>56dea815e68d97.90631084</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/J014591/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>