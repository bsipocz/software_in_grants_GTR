<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations><gtr:collaborator url="http://gtr.ukri.org:80/organisation/2EEF2D67-ACC8-4D68-BAB1-CA005E7E08B9"><gtr:id>2EEF2D67-ACC8-4D68-BAB1-CA005E7E08B9</gtr:id><gtr:name>ARM Holdings</gtr:name></gtr:collaborator><gtr:collaborator url="http://gtr.ukri.org:80/organisation/1D62836F-9B11-450E-A387-4BAB41F7E644"><gtr:id>1D62836F-9B11-450E-A387-4BAB41F7E644</gtr:id><gtr:name>Mozilla Research</gtr:name></gtr:collaborator></gtr:collaborations><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/BECA2763-0902-40AA-8DB2-836A5731CF58"><gtr:id>BECA2763-0902-40AA-8DB2-836A5731CF58</gtr:id><gtr:name>Brunel University</gtr:name><gtr:department>Computer Science</gtr:department><gtr:address><gtr:line1>Brunel University</gtr:line1><gtr:line4>Uxbridge</gtr:line4><gtr:line5>Middlesex</gtr:line5><gtr:postCode>UB8 3PH</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/BECA2763-0902-40AA-8DB2-836A5731CF58"><gtr:id>BECA2763-0902-40AA-8DB2-836A5731CF58</gtr:id><gtr:name>Brunel University</gtr:name><gtr:address><gtr:line1>Brunel University</gtr:line1><gtr:line4>Uxbridge</gtr:line4><gtr:line5>Middlesex</gtr:line5><gtr:postCode>UB8 3PH</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/2EEF2D67-ACC8-4D68-BAB1-CA005E7E08B9"><gtr:id>2EEF2D67-ACC8-4D68-BAB1-CA005E7E08B9</gtr:id><gtr:name>ARM Holdings</gtr:name><gtr:roles><gtr:role><gtr:name>COLLABORATOR</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/1D62836F-9B11-450E-A387-4BAB41F7E644"><gtr:id>1D62836F-9B11-450E-A387-4BAB41F7E644</gtr:id><gtr:name>Mozilla Research</gtr:name><gtr:roles><gtr:role><gtr:name>COLLABORATOR</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/99D6EE75-2C0F-44E9-8C7F-21BD7F40A636"><gtr:id>99D6EE75-2C0F-44E9-8C7F-21BD7F40A636</gtr:id><gtr:name>University of Augsburg</gtr:name><gtr:address><gtr:line1>Universitat Augsburg</gtr:line1><gtr:line2>Institut fur Physik</gtr:line2><gtr:line3>Universitatsstrasse 1</gtr:line3><gtr:region>Outside UK</gtr:region></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/B5750C27-7358-4FF2-842C-1C5A1E937D3D"><gtr:id>B5750C27-7358-4FF2-842C-1C5A1E937D3D</gtr:id><gtr:name>Chalmers University of Technology</gtr:name><gtr:address><gtr:line1>Chalmers University of Technology</gtr:line1><gtr:line4>Gothenburg</gtr:line4><gtr:postCode>SE-41296</gtr:postCode><gtr:region>Outside UK</gtr:region><gtr:country>Sweden</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/03D8AFBB-3EA5-4885-B036-BD4F9F4F9849"><gtr:id>03D8AFBB-3EA5-4885-B036-BD4F9F4F9849</gtr:id><gtr:name>University of Sheffield</gtr:name><gtr:address><gtr:line1>Firth Court</gtr:line1><gtr:line2>Western Bank</gtr:line2><gtr:line4>Sheffield</gtr:line4><gtr:line5>South Yorkshire</gtr:line5><gtr:postCode>S10 2TN</gtr:postCode><gtr:region>Yorkshire and The Humber</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/D6C3234E-5048-4AA0-A116-0CAC51569B2D"><gtr:id>D6C3234E-5048-4AA0-A116-0CAC51569B2D</gtr:id><gtr:name>University of Queensland</gtr:name><gtr:address><gtr:line1>University of Queensland</gtr:line1><gtr:line4>Brisbane</gtr:line4><gtr:line5>Queensland 4972</gtr:line5><gtr:region>Outside UK</gtr:region><gtr:country>Australia</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/211B3DB0-8664-4B25-8CD3-1405CD72F0C7"><gtr:id>211B3DB0-8664-4B25-8CD3-1405CD72F0C7</gtr:id><gtr:name>University of Paderborn</gtr:name><gtr:address><gtr:line1>Warburger Str. 100</gtr:line1><gtr:region>Outside UK</gtr:region><gtr:country>Germany</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/308C1B48-278F-44D4-A65F-12A0D8DE1068"><gtr:id>308C1B48-278F-44D4-A65F-12A0D8DE1068</gtr:id><gtr:name>Victoria University of Wellington</gtr:name><gtr:address><gtr:line1>PO Box 600</gtr:line1><gtr:line4>Wellington</gtr:line4><gtr:postCode>6140</gtr:postCode><gtr:region>Outside UK</gtr:region><gtr:country>New Zealand</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/E2230FAB-EC7D-4768-8A7D-AC2E11B082E7"><gtr:id>E2230FAB-EC7D-4768-8A7D-AC2E11B082E7</gtr:id><gtr:firstName>Brijesh</gtr:firstName><gtr:surname>Dongol</gtr:surname><gtr:orcidId>0000-0003-0446-3507</gtr:orcidId><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FN016661%2F1"><gtr:id>0EDE6283-D479-4F37-86EA-EDF8DF1FF2D5</gtr:id><gtr:title>Verifiably correct high-performance concurrency libraries for multi-core computing systems</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Research Grant</gtr:grantCategory><gtr:grantReference>EP/N016661/1</gtr:grantReference><gtr:abstractText>The benefits of fast computer systems are clear - improving performance allows more sophisticated applications to be developed. Speed-up via higher processor clock speeds, however, reached a physical upper limit in the early 2000s, with power-dissipation becoming a major issue. Hardware designers have therefore switched to multicore processors with fixed clock speeds, where speed-up is achieved by including several cores in a single processor. Multicore processors are now pervasive in all aspects of computing, from cluster servers and desktops to low-power mobile devices.

A multicore processor efficiently executes concurrent programs comprising multiple threads by allowing several computations to take place simultaneously in the different cores. These threads communicate via synchronised access and modification of shared resources stored in shared memory. While some problems (coined embarrassingly parallel problems) are naturally able to take advantage of multicore computing, the majority require clever management of thread synchronisation that is difficult to achieve. Moreover, modern architectures have forced programmers to understand intricate details of the hardware/software interface in addition to concurrency issues within the programs they develop.

Within a multicore processor, each processing core has access to a local buffer that acts as a temporary cache - any writes stored in a local buffer are not visible to other cores until the buffer is flushed. For efficiency reasons, multicore architectures implement so-called relaxed-memory models, where read and write events within a single thread may take effect in shared memory out-of-order, leading to behaviours that may not be expected by a programmer. Restoring correctness requires manual introduction of &amp;quot;fence&amp;quot; instructions in a program's code, which is a non-trivial task - under-fencing leads to incorrect behaviours, while overfencing leads to inefficient programs. Therefore, as Shavit states, &amp;quot;The advent of multicore processors as the standard computing platform will force major changes in software design.&amp;quot; There is a large international effort in both academia and industry to make better use of multicore processing, ranging from new foundational and theoretical underpinnings to the development of novel abstractions, tool support, engineering paradigms, etc.

In this project, we aim to simplify system development via practical solutions that are highly performant (to increase efficiency), verifiably correct (to ensure dependability) and cope with relaxed-memory models (as used by modern hardware). In particular, we develop efficient &amp;quot;concurrent objects&amp;quot; that provide abstractions from the low-level hardware interface and manage thread synchronisation on behalf of a programmer. Concurrent objects are to ultimately become part of a programming language library - some languages e.g., Java already offer basic concurrent objects as part of their standard library - hence are highly applicable.

The objects we deliver will take advantage of relaxed memory models. Here, it is well known that correctness conditions that are too strict (e.g., linearizability) are themselves becoming a barrier to efficiency. 
We therefore begin by developing new theoretical foundations in the form of relaxed correctness conditions that match relaxed memory models. A hierachy of different conditions will be developed, enabling one to easily determine the relative strengths of each condition. These conditions will be linked to a contextual notion of refinement to provide a basis for substitutability in client programs. This provides a basis for more efficient, verifiably correct, concurrent objects for relaxed memory models. We will focus on developing concurrent data structures (e.g., stacks, queues, deques) for the TSO memory model. Their verification will be mechanised in the KIV theorem prover to eliminate human error in verification, which in turn improves dependability.</gtr:abstractText><gtr:potentialImpactText>This work will have impact on three key areas. 

Academic. This work covers the areas of concurrency theory, programming languages, algorithm development and verification, and hence, researchers from these areas will be the primary beneficiaries. Academically, we will produce scientific innovations that present new ways of thinking about correctness of a concurrent object, develop new concurrent object designs as proofs of concept, and new verifications of these objects. Correctness notions for concurrent objects are adapted from distributed computing and databases, and hence our insights gained in the multicore context can be fed back into both of these areas. On a wider scale, this project will enable us to deepen our understanding of concurrent systems, by learning from the abstractions and logics we use to verify the concurrent objects we develop. 

Industrial. The project covers foundational aspects of concurrent systems, and hence, is industrially relevant to many different types of companies.
- Hardware manufacturers, e.g., IBM, Intel, AMD, and ARM, who require better-performing software to justify introduction of additional cores in the processors they produce. Without software-side improvements, end-users will see minimal improvements from processors with more cores.
- Programming language developers, e.g., Java (Oracle), C++, Scala, Python, who use predefined libraries to provide high-end functionality to programmers in a layered re-usable manner. 
- Application developers, e.g., Valve Software (video gaming), Codeplay Software (SoC tools), etc., who require reliable high-performance libraries to take advantage of the available multi-core hardware. 
- Formal verification companies, e.g., http://formalmethods.wikia.com/wiki/Companies, who will benefit from the techniques we use to verify novel concurrent data structures for relaxed memory. Of particular interest will be the mechanisations we develop in KIV.
- Large-scale developers, e.g., Google, Facebook and Amazon, who are interested in correctness conditions such as causal and eventual consistency in the databases they use. There is a direct link between the correctness conditions studied in WP1 and such notions of consistency. 

Societal. There is no doubt that faster computing is the cornerstone of improving modern life, with an endless list of examples forming a wide range of real-world scenarios - improving personal interactions with end-user devices, connecting ever more devices to both centralised and distributed servers, processing vast quantities of data for commercial and scientific use, enhancing security for commerce, etc. There is an increasing dependence on computerised systems that control an ever-larger proportion of security-, mission- and safety-critical systems, e.g., railways, power distribution systems, spacecraft, etc, all of which are inherently concurrent and, in addition, reliability is of utmost importance.</gtr:potentialImpactText><gtr:fund><gtr:end>2017-04-30</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2016-03-01</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>98219</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs><gtr:collaborationOutput><gtr:collaboratingOrganisation>Mozilla Research</gtr:collaboratingOrganisation><gtr:country>Global</gtr:country><gtr:description>Mozilla</gtr:description><gtr:id>CAA2F5A0-FE12-4D25-B075-92CEE3E6AE12</gtr:id><gtr:impact>We are developing a logic for C11 to verify correctness of the modified TML using the theorem prover Isabelle. 

Mozilla Research (Dr Alan Jeffrey) is an industrial partner for my new ESPRC grant (Verifiably Correct Transactional Memory for Reliable High Performance Concurrency) which is currently under review. Here, we plan to extend our initial investigations outlined above.</gtr:impact><gtr:outcomeId>58aea03e2077f2.92579727-1</gtr:outcomeId><gtr:partnerContribution>Alan has implemented a modified version of the TML in Rust (https://github.com/asajeffrey/tra-mut-loc). For efficiency, the implementation uses C11 relaxed-memory bindings. Early investigations show that using TML in place of global locks achieves a 10x performance increase across realistic benchmarks.</gtr:partnerContribution><gtr:piContribution>Jointly investigated transactional memory implementations for Servo using the Rust programming language. Dongol travelled to Chicago to meet with Dr Alan Jeffrey to investigate the use of transactional memory within Mozilla's next generation Servo browser Engine (https://servo.org/). For the issues at hand, it was decided that a variation of the Transactional Mutex Lock (TML) would be most suitable.</gtr:piContribution><gtr:sector>Charity/Non Profit</gtr:sector><gtr:start>2016-01-01</gtr:start></gtr:collaborationOutput><gtr:collaborationOutput><gtr:collaboratingOrganisation>ARM Holdings</gtr:collaboratingOrganisation><gtr:country>United Kingdom of Great Britain &amp; Northern Ireland (UK)</gtr:country><gtr:description>ARM</gtr:description><gtr:id>37D2D73C-0EF7-49DF-9DF3-8FE7727F3992</gtr:id><gtr:impact>Dr Stephan Diestelhorst at ARM is an industrial collaborator on my new EPSRC grant (under review).</gtr:impact><gtr:outcomeId>58aea5ab4a6a85.14416021-1</gtr:outcomeId><gtr:partnerContribution>ARM have provided some feedback on our work and discussed the methods that would have most impact.</gtr:partnerContribution><gtr:piContribution>Dongol together with Prof John Derrick and Dr Simon Doherty travelled to ARM (Cambridge) to discuss potential for collaborative work with ARM. Dongol gave a presentation (via a lunch-and-learn session), followed by a discussion about the most imminent problems for verification at ARM.</gtr:piContribution><gtr:sector>Private</gtr:sector><gtr:start>2016-01-01</gtr:start></gtr:collaborationOutput></gtr:collaborationOutputs><gtr:disseminationOutputs><gtr:disseminationOutput><gtr:description>Presentation at ARM</gtr:description><gtr:form>A talk or presentation</gtr:form><gtr:geographicReach>International</gtr:geographicReach><gtr:id>7D3A6CDD-45F7-4254-86A7-3253008FB817</gtr:id><gtr:impact>Around 15 ARM personnel in Cambridge and 10 additional personnel in Texas attended my lunch-and-learn session on verifying concurrent objects and transactional memory (including hybrid transactional memory). This has led to further discussions and collaboration on my new research grant.</gtr:impact><gtr:outcomeId>58aea77815d532.84174167</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Industry/Business</gtr:primaryAudience><gtr:year>2016</gtr:year></gtr:disseminationOutput></gtr:disseminationOutputs><gtr:exploitationOutputs/><gtr:furtherFundingOutputs/><gtr:impactSummaryOutputs><gtr:impactSummaryOutput><gtr:description>With the continued importance of multi-core systems, work on verifiably correct concurrency abstractions continues to play an important role in current computer science research. Our work on transactional memory (TM) and weak-memory verification has gained the most traction; initial investigations in this area has attracted three important industrial collaborators - Oracle, ARM, and Mozilla. 

- Oracle are interested in verification, in particular our work linking to linearizability, which would enable verification of TM using their existing model checking techniques. 
- ARM are interested in our hybrid TM implementations, which would motivate HTM implementations within ARM processors. HTM is currently available commercially within Intel's Haswell and IBM's BlueGene architectures. 
- Mozilla are interested in using TM within their parallel Servo browser engine. We have conducted some preliminary experiments using a transactional mutex lock (https://github.com/asajeffrey/tra-mut-loc/blob/master/src/lib.rs) in Rust. We are currently developing verification methods for the implementation in Rust's LLVM-based memory model.

Continuation of the work above however, depends on our new EPSRC grant (under review).</gtr:description><gtr:firstYearOfImpact>2016</gtr:firstYearOfImpact><gtr:id>4FF775BE-1FC7-4614-81C0-1BDED3EF03F2</gtr:id><gtr:impactTypes><gtr:impactType>Economic</gtr:impactType></gtr:impactTypes><gtr:outcomeId>58b41e8c786c94.50059595</gtr:outcomeId><gtr:sector>Digital/Communication/Information Technologies (including Software)</gtr:sector></gtr:impactSummaryOutput></gtr:impactSummaryOutputs><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>Our primary set of findings is as follows, 

- Correctness conditions for concurrent objects are intrinsically difficult to prove, and weakening these conditions does not necessarily make them simpler to verify. We have established decidability and complexity results for different variations of a weak condition known as quiescent consistency. 

- Correctness conditions weaker than linearizability (including sequential consistency) do not guarantee contextual trace refinement (trace refinement of client programs). However, the correctness condition linearizability together with a progress condition (minimal progress) does guarantee contextual trace refinement. This potentially forms a basis for understanding relaxed correctness under relaxed memory by relaxing the (totally ordered) trace models to partial orders. 

- The potential for impact from transactional memory as a concurrency abstraction seems greater than concurrent objects alone, especially in light of new research that describes how concurrent objects can be constructed using transactional memory. Transactional objects are inherently more generic than concurrent objects - a language/compiler would only need to implement transactional memory algorithms; the objects implemented by the transactional memory would then be available for free. 

- It is feasible to verify transactional memory using simulation against the TMS2 specification; we have demonstrated this via a series of verifications: 
 - the verification of an incredibly subtle pessimistic algorithm, 
 - a method that links transactional correctness to linearizability (which includes a weak-memory verification), and
 - a modular method for verifying hybrid transactional memory.
 A paper comparing an older technique from FM 2015 has also been submitted for review.</gtr:description><gtr:exploitationPathways>- Those interested in verification could use our simulation-based Isabelle proofs to verify other types of concurrent algorithms. 
- Those interested in implementation could implement our verified algorithms; others could in turn use them in their application programs. 
- Transactional memory does provide an easy-to-use concurrency abstraction; it is worth exploring them as an alternative to mutex locks in concurrent software, especially in the presence of weak memory.</gtr:exploitationPathways><gtr:id>2DDB7BF0-99C5-4C90-B528-58963805A815</gtr:id><gtr:outcomeId>58b532c48c1268.95424981</gtr:outcomeId><gtr:sectors><gtr:sector>Aerospace, Defence and Marine,Digital/Communication/Information Technologies (including Software),Electronics,Energy,Financial Services, and Management Consultancy,Manufacturing, including Industrial Biotechology,Security and Diplomacy,Transport</gtr:sector></gtr:sectors></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs/><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>353420E4-E388-472A-84CE-9B1C48E875BE</gtr:id><gtr:title>Proving opacity of a pessimistic STM</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/dcaa95350e97e127f4bbd2307c75c041"><gtr:id>dcaa95350e97e127f4bbd2307c75c041</gtr:id><gtr:otherNames>Doherty S</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2016-01-01</gtr:date><gtr:outcomeId>58ae9b9f0fd766.98865287</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>8AC89C68-85E5-4F94-A023-39572FACAC3F</gtr:id><gtr:title>Mechanized proofs of opacity: a comparison of two techniques</gtr:title><gtr:parentPublicationTitle>Formal Aspects of Computing</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/0023abac1f92a8b91b2b353e7d21f339"><gtr:id>0023abac1f92a8b91b2b353e7d21f339</gtr:id><gtr:otherNames>Derrick J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2017-01-01</gtr:date><gtr:outcomeId>5a2fe620386a24.37354857</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>F18A978F-DAEC-43C1-B2A9-226B0CC4FF50</gtr:id><gtr:title>Mechanized proofs of opacity: A comparison of two techniques</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/dcaa95350e97e127f4bbd2307c75c041"><gtr:id>dcaa95350e97e127f4bbd2307c75c041</gtr:id><gtr:otherNames>Doherty S</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2016-01-01</gtr:date><gtr:outcomeId>58b9817f41afb5.17744874</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>8BD93E27-A0E1-4EDA-843B-647C8D66AF3A</gtr:id><gtr:title>Reducing Opacity to Linearizability: A Sound and Complete Method</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/447631a66439719e2e8db99a1423ec2b"><gtr:id>447631a66439719e2e8db99a1423ec2b</gtr:id><gtr:otherNames>Armstrong A</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2016-01-01</gtr:date><gtr:outcomeId>58aea11e6460b0.01040146</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>5D11E0B1-19E9-4944-B15F-68D253F11B8C</gtr:id><gtr:title>Relational Convolution, Generalised Modalities and Incidence Algebras</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/142dc9ea8c15ac8e8fb4a19adad12a84"><gtr:id>142dc9ea8c15ac8e8fb4a19adad12a84</gtr:id><gtr:otherNames>Dongol B</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2017-01-01</gtr:date><gtr:outcomeId>58aea16e1b8208.92783160</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>D189DABC-EFA4-4ACF-B6C3-87D252ACA0F2</gtr:id><gtr:title>Modularising opacity verification for Hybrid Transactional Memory</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/447631a66439719e2e8db99a1423ec2b"><gtr:id>447631a66439719e2e8db99a1423ec2b</gtr:id><gtr:otherNames>Armstrong A</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2017-01-01</gtr:date><gtr:outcomeId>58b5403347bd77.45314398</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/N016661/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>50</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic><gtr:researchTopic><gtr:id>E05CFE0B-163D-412D-A3C2-28E89B2CA336</gtr:id><gtr:percentage>50</gtr:percentage><gtr:text>Software Engineering</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>