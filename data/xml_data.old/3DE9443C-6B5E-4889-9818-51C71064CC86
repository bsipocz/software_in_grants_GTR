<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations/><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/818CD6C9-61EE-41F2-9F37-0C7A8F43E25D"><gtr:id>818CD6C9-61EE-41F2-9F37-0C7A8F43E25D</gtr:id><gtr:name>University of Birmingham</gtr:name><gtr:department>School of Computer Science</gtr:department><gtr:address><gtr:line1>Edgbaston Park Road</gtr:line1><gtr:line2>Edgbaston</gtr:line2><gtr:postCode>B15 2TT</gtr:postCode><gtr:region>West Midlands</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/818CD6C9-61EE-41F2-9F37-0C7A8F43E25D"><gtr:id>818CD6C9-61EE-41F2-9F37-0C7A8F43E25D</gtr:id><gtr:name>University of Birmingham</gtr:name><gtr:address><gtr:line1>Edgbaston Park Road</gtr:line1><gtr:line2>Edgbaston</gtr:line2><gtr:postCode>B15 2TT</gtr:postCode><gtr:region>West Midlands</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/E3467D80-13A7-4C31-B14D-CC4C3B12086F"><gtr:id>E3467D80-13A7-4C31-B14D-CC4C3B12086F</gtr:id><gtr:firstName>Dan</gtr:firstName><gtr:otherNames>R</gtr:otherNames><gtr:surname>Ghica</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FK015214%2F1"><gtr:id>3DE9443C-6B5E-4889-9818-51C71064CC86</gtr:id><gtr:title>A higher-order approach to codesign - 27659</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Research Grant</gtr:grantCategory><gtr:grantReference>EP/K015214/1</gtr:grantReference><gtr:abstractText>Current computing architectures are moving increasingly towards
heterogeneity, as physical limitations of scale demand a
bifurcation of optimisation techniques between reducing latency and
increasing throughput. In the past, the amount of heterogeneity in
devices tended to be limited, therefore RTL were largely suitable for for
hardware design. However, recently there has been a surge
of industrial interest in hybrid programmable hardware-software systems.
For example, Xilinx has recently launched the
Zynq platform which combines a multicore ARM processor with programmable
logic. This development thrusts the question
of design for such hybrid systems, requiring different programming
methodologies, into the foreground.

In general, as architectures move away from the conventional CPU and RAM
(von Neumann) model, the task of devising
programming models for them falls mostly with their designers, who are
usually engineers rather than programming
language experts. As a result we are witnessing a flurry of
architecture-specific languages (ASL), reminiscent of the early
days of computation when each computer came with its own operating system,
programming language, etc. Whereas ASLs
are unavoidable, good programming methodology recommends that they should
be used primarily for the development of
system-level infrastructure. The application-level, algorithmic
programming should happen as much as possible in portable,
machine-independent languages. These lessons are very well known in the
programming community and this knowledge
can be profitably used in electronic design. We aim to address this
problem.

The challenge of heterogeneous codesign is both quantitative and
qualitative. A program has components that must be
compiled into the FPGA fabric and others to be compiled for the CPU. The
reasons are either efficiency (certain
architectures are better at running certain types or code) or physical
constraints (interactions with other components in a
complex design, availability of IP cores, drivers or libraries). But a
program may also have components which can be
compiled to either architecture or both. A choice must be made and it is
reasonable for this choice to be also motivated by
efficiency.

In this proposal we will combine and unify the way type systems in
higher-level languages specify and solve qualitative
(hard) constraints with quantitative optimisation techniques.
Specifically, we will investigate the optimization of memory
subsystems to support parallel access, by combining knowledge of memory
access patterns from the code, resulting in
highly efficient programmable memory controllers. In addition, we will
optimize the allocation of precision within a combined
hardware/software system in order to achieve an accuracy specification
while taking into account the capability and cost
implications of the programmable hardware and native data types supported
in the software. This combined approach can
work both at the source code level (program transformations motivated by
underlying cost models) and at the synthesisedmachine code and HDL level
(pipelined optimisations, etc). We will use a &amp;quot;game semantic&amp;quot; model,
already successfully
applied to hardware synthesis from higher order languages, to establish
the correctness properties of the type system and
to drive the compilation process.</gtr:abstractText><gtr:potentialImpactText>This proposal will result in scientific advances and new techniques in line with the proposed project aims of each WP (heterogeneous compilation, heterogeneous optimisation, advanced cost models, automated partitioning). We plan three routes to ensure the impact of these advances. Firstly, the traditional academic dissemination route is discussed; this route is also of vital importance outside the academic environment: UK and international applied research labs and companies often pick up on publications in the high-quality conferences and journals where we intend to disseminate our work as the starting point to apply fundamental results. Secondly, we plan to release our tools and techniques developed on the web. Thirdly, we will train (in house and through summer schools) three young researchers in a unique combination of advanced skills and deep knowledge at the systemic interface between hardware and software. A proposal with such deep and wide-ranging implications has the potential to generate significant interest in the general public and general interest science and technology press, if presented appropriately.

Within the central research area covered by this proposal, higher level methods for codesign, there is a very timely opportunity for the UK economy. As noted in the case for support, it is currently very unclear how to derive both convenient abstractions and good performance from heterogeneous hardware. This uncertainty opens a major opportunity for the UK to regain a leading role in the industry, with the potential to produce both deep fundamental insights and the potential to repeat UK economic success stories such as ARM.</gtr:potentialImpactText><gtr:fund><gtr:end>2016-12-16</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2013-06-17</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>274300</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs/><gtr:disseminationOutputs/><gtr:exploitationOutputs/><gtr:furtherFundingOutputs/><gtr:impactSummaryOutputs/><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>Game-semantics has been used to develop a practical approach to linking programming languages on heterogeneous devices.</gtr:description><gtr:exploitationPathways>The research compiler we are developing could be developed further, into a practical industrial compiler.</gtr:exploitationPathways><gtr:id>E8240C3F-C477-43E8-B3D3-ED0DBF4F64F0</gtr:id><gtr:outcomeId>5462826cd8ca21.29263089</gtr:outcomeId><gtr:sectors><gtr:sector>Digital/Communication/Information Technologies (including Software),Electronics</gtr:sector></gtr:sectors></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs><gtr:softwareAndTechnicalProductOutput><gtr:description>The Geometry of Synthesis is a new approach to higher-level synthesis of VLSI designs (&amp;quot;hardware&amp;quot;) from behavioural descriptions written in a conventional (&amp;quot;software&amp;quot;) programming language, called Verity. The main difference between GoS/Verity and other HLS tools is full support for functions in the programming language. This allows us to support things like: higher order functions (map, fold), a functional style of programming, recursion, pre-compiled libraries
foreign-function interfaces, run-time services, interfacing with legacy IP cores.
The output of GoS is generic VHDL which can be (in principle) used in any conventional synthesis or simulation design flow. However, we test and run our code using Altera tool chains and FPGAs.</gtr:description><gtr:id>A38F7024-1F99-4289-B74C-EAF5B2726268</gtr:id><gtr:impact>A few hundred downloads of the tool.</gtr:impact><gtr:outcomeId>54627a6e64d415.44002476</gtr:outcomeId><gtr:title>GOS</gtr:title><gtr:type>Software</gtr:type><gtr:url>http://www.veritygos.org</gtr:url><gtr:yearFirstProvided>2010</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput></gtr:softwareAndTechnicalProductOutputs><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>C7DCCDFE-89BC-4360-9D81-27B62C73DF75</gtr:id><gtr:title>Compiling Higher Order Functional Programs to Composable Digital Hardware</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/f27e7a48356dda9ed2f21a5b8a3f6794"><gtr:id>f27e7a48356dda9ed2f21a5b8a3f6794</gtr:id><gtr:otherNames>Pelaez E</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2014-01-01</gtr:date><gtr:outcomeId>56a8ad4eebaf55.62794913</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>4F537D13-2E94-45A4-8FD4-D04E0C4391D2</gtr:id><gtr:title>PushPush: Seamless integration of hardware and software objects via function calls over AXI</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/d2a90f244a13c3decd48858c859a84ea"><gtr:id>d2a90f244a13c3decd48858c859a84ea</gtr:id><gtr:otherNames>Fleming S</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2015-01-01</gtr:date><gtr:outcomeId>56a8ad4f624f19.19195668</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>6FE0763B-DDE6-4965-8264-027B31AE950D</gtr:id><gtr:title>Leaving the Nest: Nominal Techniques for Variables with Interleaving Scopes</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/1949b41bcea500c0f6bf74e1ef4734f5"><gtr:id>1949b41bcea500c0f6bf74e1ef4734f5</gtr:id><gtr:otherNames>Gabbay MJ</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2015-01-01</gtr:date><gtr:outcomeId>56a8aebcbb3bc5.80473063</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>1B66E42C-7FD6-490A-B308-55A70CB07A12</gtr:id><gtr:title>Transparent linking of compiled software and synthesized hardware</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/3926149fa02b356f6fe5a7c742e30aee"><gtr:id>3926149fa02b356f6fe5a7c742e30aee</gtr:id><gtr:otherNames>Thomas DB</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2015-01-01</gtr:date><gtr:outcomeId>56a8ea465671c0.06158297</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/K015214/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>50</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic><gtr:researchTopic><gtr:id>1E31C833-3A35-4F54-A499-31D0C245B5D5</gtr:id><gtr:percentage>50</gtr:percentage><gtr:text>System on Chip</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>