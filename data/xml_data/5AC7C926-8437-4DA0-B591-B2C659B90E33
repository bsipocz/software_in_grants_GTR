<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.ukri.org/api"><gtr:projectComposition><gtr:collaborations/><gtr:leadResearchOrganisation url="http://gtr.ukri.org:80/organisation/46387D84-F71E-4B7D-8C7D-9C288F113510"><gtr:id>46387D84-F71E-4B7D-8C7D-9C288F113510</gtr:id><gtr:name>Imperial College London</gtr:name><gtr:department>Dept of Computing</gtr:department><gtr:address><gtr:line1>South Kensington Campus</gtr:line1><gtr:line2>Exhibition Road</gtr:line2><gtr:line4>London</gtr:line4><gtr:postCode>SW7 2AZ</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/46387D84-F71E-4B7D-8C7D-9C288F113510"><gtr:id>46387D84-F71E-4B7D-8C7D-9C288F113510</gtr:id><gtr:name>Imperial College London</gtr:name><gtr:address><gtr:line1>South Kensington Campus</gtr:line1><gtr:line2>Exhibition Road</gtr:line2><gtr:line4>London</gtr:line4><gtr:postCode>SW7 2AZ</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole><gtr:organisationRole url="http://gtr.ukri.org:80/organisation/8A82DB92-2049-429C-BC69-8D7979E9BC43"><gtr:id>8A82DB92-2049-429C-BC69-8D7979E9BC43</gtr:id><gtr:name>Maxeler Technologies</gtr:name><gtr:address><gtr:line1>3-4 Albion Place</gtr:line1><gtr:postCode>W6 0QT</gtr:postCode><gtr:region>London</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>PROJECT_PARTNER</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.ukri.org:80/person/5AE2FAD2-208D-4909-9F09-F2D642F32A75"><gtr:id>5AE2FAD2-208D-4909-9F09-F2D642F32A75</gtr:id><gtr:firstName>Cristian</gtr:firstName><gtr:surname>Cadar</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.ukri.org:80/projects?ref=EP%2FJ00636X%2F1"><gtr:id>5AC7C926-8437-4DA0-B591-B2C659B90E33</gtr:id><gtr:title>Testing, Verifying, and Generating Software Patches Using Dynamic Symbolic Execution</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Research Grant</gtr:grantCategory><gtr:grantReference>EP/J00636X/1</gtr:grantReference><gtr:abstractText>A large fraction of the costs of developing and maintaining software is associated with detecting and fixing software errors. As a result, the last decade has seen a sustained research effort directed toward designing and developing techniques for automatically detecting software errors, with some of these techniques making their way into commercial and open-source tools. However, detecting an error is only the first step toward fixing it. In fact, many known errors remain unpatched due to the high cost required to diagnose and repair them, combined with the fear that patches are more likely to introduce failures compared to other types of code changes.

The goal of this research project is to address both of these problems, by devising novel techniques based on dynamic symbolic execution for:
(1) automatically testing and verifying the correctness of software patches, and
(2) (semi-)automatically generating candidate patches for software bugs.

The strength of dynamic symbolic execution lies in its ability to precisely model the behaviour of program paths using mathematical constraints. However, the cost associated with this level of precision is poor scalability. The number of paths in a program is usually exponential in the number of branches, which makes it difficult to scale the analysis to very large programs. However, by focusing the analysis on the incremental changes introduced by program patches, we hope to significantly reduce the cost of symbolic execution and significantly increase its applicability in practice. Furthermore, the ability to check software patches opens up the possibility of performing patch generation in an automatic or semi-automatic fashion. In particular, starting from the mathematical constraints gathered from a buggy execution path -- and with the potential addition of a manually-written patch template -- we plan to design techniques for generating a set of candidate patches resembling the ones that would be generated manually by developers.</gtr:abstractText><gtr:potentialImpactText>Key Non-Academic Beneficiaries: The primary non-academic beneficiaries of the proposed research are software companies and the open-source software community. It is well known that software bugs have a large negative impact on the global economy. For example, a report published by the US National Institute of Standards and Technology (NIST) in 2002 has found that software bugs cost annually the US economy an estimated $60 billion dollars or 0.6 percent of the gross domestic product [G. Tassey, The economic impacts of inadequate infrastructure for software testing, NIST 2002], and a similar impact is to be expected in other developed countries like the UK. A large fraction of this cost is associated with writing patches---either to fix existing bugs or to add new features---which is one of the critical software development and maintenance activities. This research project plans to investigate mechanisms for improving the quality of patches and for (partially) automating their development, which on the long term might bring significant economic benefits.

In addition to the commercial and open-source software development communities---who will directly benefit from improving the software patching process---the resulting increase in software quality will positively affect software users across a wide variety of industrial sectors. In particular, the NIST study cited above mentions the financial services and the automotive and aerospace industry as major sectors affected by software errors.

Mechanisms for Exploitation and Application: Our goal is to disseminate the results of this research from an early stage through a variety of mechanisms: (1) by applying it to open-source and commercial code to demonstrate the effectiveness of our approach; (2) by open-sourcing our initial prototype to be used directly by software developers on their code; and (3) by communicating the results of our research to the non-academic user community.

On the short-term, we will apply our technique to widely-used open-source software, and report any errors found to developers. Furthermore, we will send automatically generated patches to developers, use the feedback they provide response to these patches will be used to improve our techniques and associated prototype.

After the initial evaluation on open-source software, we plan to apply our approach to commercial code. We have already discussed our technique with Maxeler Technologies, who are interested in applying our initial prototype to their software (please see the attached letter of support). We also intend to seek further contacts with the software industry, in order to better assess the applicability of our technique, and in particular its integration into the development process.

One of the key ways in which we plan to disseminate our results to the user community is by releasing our initial prototype under an open-source license. This would allow developers from both the commercial and open-source communities to directly apply our technique to their code. Our previous experience releasing our tool KLEE (http://klee.llvm.org) as open-source software should prove beneficial in making sure that our prototype reaches a wide audience. (Since being open-sourced in June 2009, KLEE has been used and extended by a variety of users, with some of these extensions being contributed back to the main branch.)

Communicating the results of our research to a non-academic audience will play an important role in our dissemination strategy. In conjunction with open-sourcing our prototype system, we plan to set up a dedicated website for the project to introduce our research to a general audience. In a similar spirit, we plan to integrate our research into the PI's teaching activities, through group and individual projects offered to undergraduate and Master's students at Imperial College.</gtr:potentialImpactText><gtr:fund><gtr:end>2015-07-31</gtr:end><gtr:funder url="http://gtr.ukri.org:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2012-05-31</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>287184</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs/><gtr:disseminationOutputs><gtr:disseminationOutput><gtr:description>INVEST workshop</gtr:description><gtr:form>Participation in an activity, workshop or similar</gtr:form><gtr:geographicReach>Regional</gtr:geographicReach><gtr:id>B69F03F4-4B0D-49B4-8193-E58E0344A3F6</gtr:id><gtr:impact>The Introduction to Verification and Testing (INVEST) workshop takes place in the Department of Computing, Imperial College London on an annual basis, jointly organised by Cadar, Donaldson and Gardner. The aim of the workshop is to introduce young researchers, and students potentially interested in research careers, to the fields of software verification and testing.</gtr:impact><gtr:outcomeId>58b850ba5ab720.21099887</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Undergraduate students</gtr:primaryAudience><gtr:url>http://invest.doc.ic.ac.uk</gtr:url><gtr:year>2014,2015,2017</gtr:year></gtr:disseminationOutput><gtr:disseminationOutput><gtr:description>IEEE Software Blog</gtr:description><gtr:form>Engagement focused website, blog or social media channel</gtr:form><gtr:geographicReach>International</gtr:geographicReach><gtr:id>78F48AE8-3E18-41A3-BCBC-12308D64D9F1</gtr:id><gtr:impact>IEEE Software blog post on our research on comprehensively testing software patches with symbolic execution.</gtr:impact><gtr:outcomeId>58b851d7384e67.32454185</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Professional Practitioners</gtr:primaryAudience><gtr:url>http://blog.ieeesoftware.org/2016/09/comprehensively-testing-software.html</gtr:url><gtr:year>2016</gtr:year></gtr:disseminationOutput><gtr:disseminationOutput><gtr:description>Co-organiser of Dagstuhl seminar on Symbolic Execution and Constraint Solving</gtr:description><gtr:form>Participation in an activity, workshop or similar</gtr:form><gtr:geographicReach>International</gtr:geographicReach><gtr:id>62FDE4AE-F449-406F-9C15-3EA702030CB9</gtr:id><gtr:impact>Co-organised a Dagstuhl seminar on Symbolic Execution and Constraint Solving, which brought together experts from both academia, research laboratories, and the industry.</gtr:impact><gtr:outcomeId>58b854eb7f4489.06815653</gtr:outcomeId><gtr:partOfOfficialScheme>false</gtr:partOfOfficialScheme><gtr:primaryAudience>Other audiences</gtr:primaryAudience><gtr:url>https://www.dagstuhl.de/en/program/calendar/semhp/?semnr=14442</gtr:url><gtr:year>2014</gtr:year></gtr:disseminationOutput></gtr:disseminationOutputs><gtr:exploitationOutputs/><gtr:furtherFundingOutputs/><gtr:impactSummaryOutputs><gtr:impactSummaryOutput><gtr:description>We have applied our tools to several popular open-source software systems, where we have detected several errors, which were reported to the developers of these systems. 
We qualified as finalists to the EIT ICT Labs Idea Challenge and presented our ideas to an audience of experts from industry, government and academia.
We were invited to discuss our techniques in an IEEE Software Blog, which has attracted attention from the industry.</gtr:description><gtr:firstYearOfImpact>2012</gtr:firstYearOfImpact><gtr:id>65C1A6D3-E65D-4742-B561-C6FB61A770CB</gtr:id><gtr:impactTypes><gtr:impactType>Economic</gtr:impactType></gtr:impactTypes><gtr:outcomeId>56dd6598dceab2.31150527</gtr:outcomeId><gtr:sector>Digital/Communication/Information Technologies (including Software)</gtr:sector></gtr:impactSummaryOutput></gtr:impactSummaryOutputs><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>This grant enabled novel techniques for improving the quality of software updates. One of the distinguishing characteristics of software systems is that they evolve: new patches are committed to software repositories and new versions are released to users on a continuous basis. Unfortunately, many of these changes bring unexpected bugs that break the stability of the system or affect its security. Our techniques comprehensively check these changes, by trying to generate inputs that cover the lines of code added or changed by a patch, and then refining such inputs to expose the new behaviours introduced by the change. The grant has also supported the design of a portfolio-based constraint solving approach for improving some of the techniques mentioned above, and a large-scale empirical study for understanding how large software projects evolve.</gtr:description><gtr:exploitationPathways>The techniques we designed could be used to improve software reliability, by automatically generating high-coverage test inputs and finding errors.</gtr:exploitationPathways><gtr:id>EEB40886-8771-4B2F-ABF5-A3D9A1E133FA</gtr:id><gtr:outcomeId>56dd62ae5a4988.09586259</gtr:outcomeId><gtr:sectors><gtr:sector>Digital/Communication/Information Technologies (including Software)</gtr:sector></gtr:sectors><gtr:url>http://srg.doc.ic.ac.uk/projects</gtr:url></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs><gtr:researchDatabaseAndModelOutput><gtr:description>Data associated with an empirical study examining how code and tests co-evolve in 6 popular open-source systems. We report the main characteristics of software patches, analyse the evolution of program and patch coverage, assess the impact of nondeterminism on the execution of the test suite, and investigate whether the coverage of code containing bugs and bug fixes is higher than average.</gtr:description><gtr:id>A97B0F23-8925-48BF-BDC5-4CD1C48EB04D</gtr:id><gtr:impact>The associated paper was published in the International Symposium on Software Testing and Analysis (ISSTA 2014). The associated artifact has won the Best Artifact Award at the conference.</gtr:impact><gtr:outcomeId>56dd5c3a658673.73046249</gtr:outcomeId><gtr:providedToOthers>true</gtr:providedToOthers><gtr:title>Covrig data set</gtr:title><gtr:type>Database/Collection of data</gtr:type><gtr:url>http://srg.doc.ic.ac.uk/projects/covrig/</gtr:url><gtr:yearFirstProvided>2014</gtr:yearFirstProvided></gtr:researchDatabaseAndModelOutput></gtr:researchDatabaseAndModelOutputs><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs><gtr:softwareAndTechnicalProductOutput><gtr:description>Combines dynamic symbolic execution with several novel heuristics based on program analysis to automatically and comprehensively test code patches.</gtr:description><gtr:id>9A8CED73-6917-4987-8ACE-E0EC5C80BEE0</gtr:id><gtr:impact>Received a Distinguished Artifact award at the Joint Meeting of the European Software Engineering Conference and ACM SIGSOFT Symposium on the Foundations of Software Engineering (ESEC/FSE 2013)</gtr:impact><gtr:outcomeId>56df196113ebf1.77097430</gtr:outcomeId><gtr:title>KATCH</gtr:title><gtr:type>Software</gtr:type><gtr:url>http://srg.doc.ic.ac.uk/projects/katch/</gtr:url><gtr:yearFirstProvided>2013</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput><gtr:softwareAndTechnicalProductOutput><gtr:description>An extension to the KLEE symbolic execution engine that uses the metaSMT framework to add support for multiple SMT solvers (Boolector, STP and Z3).</gtr:description><gtr:id>6336D39B-B8A6-4303-8113-E7C839E02F58</gtr:id><gtr:impact>Published in the proceedings of the International Conference on Computer Aided Verification (CAV 2013). Used by academic and industry teams as part of the KLEE symbolic execution framework.</gtr:impact><gtr:outcomeId>56df1a5eb1a448.80496512</gtr:outcomeId><gtr:title>KLEE-MultiSolver</gtr:title><gtr:type>Software</gtr:type><gtr:url>http://srg.doc.ic.ac.uk/projects/klee-multisolver/</gtr:url><gtr:yearFirstProvided>2013</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput><gtr:softwareAndTechnicalProductOutput><gtr:description>A symbolic execution tool that is designed to generate test inputs that cover the new program behaviours introduced by a patch. The technique works by executing both the old and the new version in the same symbolic execution instance, with the old version shadowing the new one. During this combined shadow execution, whenever a branch point is reached where the old and the new versions diverge, we generate a test case exercising the divergence and comprehensively test the new behaviours of the new version.</gtr:description><gtr:id>0888C6A0-5D87-40E0-9296-22389C5D2161</gtr:id><gtr:impact>The associated paper was accepted to the International Conference on Software Engineering (ICSE 2016). IEEE has invited us to write a blog post which discusses this work.</gtr:impact><gtr:outcomeId>56dd5afbec1bb1.13977584</gtr:outcomeId><gtr:title>Shadow</gtr:title><gtr:type>Software</gtr:type><gtr:url>http://srg.doc.ic.ac.uk/projects/shadow/</gtr:url><gtr:yearFirstProvided>2016</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput><gtr:softwareAndTechnicalProductOutput><gtr:description>A lightweight symbolic execution tool for improving existing test suites by thoroughly checking for errors all sensitive operations executed by a test suite.</gtr:description><gtr:id>5F950C96-CFB8-473B-8A27-E9D6C27A36A3</gtr:id><gtr:impact>The associated paper was published in the proceedings of the International Conference on Software Engineering (ICSE 2012).
Used in several research projects.</gtr:impact><gtr:outcomeId>56df18f6d1b653.77439285</gtr:outcomeId><gtr:title>ZESTI</gtr:title><gtr:type>Software</gtr:type><gtr:url>http://srg.doc.ic.ac.uk/projects/zesti/</gtr:url><gtr:yearFirstProvided>2012</gtr:yearFirstProvided></gtr:softwareAndTechnicalProductOutput></gtr:softwareAndTechnicalProductOutputs><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication><gtr:id>9089D06C-5469-4FF3-A2FF-4961223C0CD5</gtr:id><gtr:title>Shadow of a Doubt: Testing for Divergences</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/ffa136cd2ff7c85876f1cb661ee208e7"><gtr:id>ffa136cd2ff7c85876f1cb661ee208e7</gtr:id><gtr:otherNames>Palikareva, H</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2016-01-01</gtr:date><gtr:outcomeId>56d70e9d84cbe7.38980132</gtr:outcomeId></gtr:publication><gtr:publication><gtr:id>B023D4B1-2CDA-4E62-A114-75ECA2FBC1E4</gtr:id><gtr:title>make test-zesti: A symbolic execution solution for improving regression testing</gtr:title><gtr:authors><gtr:author url="http://gtr.ukri.org:80/person/2b9ae8e885c9752b4ef00b49911217c1"><gtr:id>2b9ae8e885c9752b4ef00b49911217c1</gtr:id><gtr:otherNames>Dan Marinescu P</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2012-01-01</gtr:date><gtr:isbn>978-1-4673-1066-6</gtr:isbn><gtr:outcomeId>541ab3968e5800.86812521</gtr:outcomeId></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/J00636X/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>41593421-CFAC-411D-94A7-E144022B0E6D</gtr:id><gtr:percentage>20</gtr:percentage><gtr:text>Artificial Intelligence</gtr:text></gtr:researchTopic><gtr:researchTopic><gtr:id>E05CFE0B-163D-412D-A3C2-28E89B2CA336</gtr:id><gtr:percentage>80</gtr:percentage><gtr:text>Software Engineering</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>